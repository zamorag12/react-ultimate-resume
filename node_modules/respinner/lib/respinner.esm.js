import React from 'react';

var uniqId = Math.random().toString(36).substr(2, 9);

var repeat = function (count) { return Array.apply(null, Array(count)); };
var embeddedStyle = function (css) { return ("/* <![CDATA[ */" + ((css)) + "/* ]]> */"); };

var RotateAnimation = "@keyframes Rotate" + uniqId + "{100%{transform:rotate(360deg);}}";

var SVGEmbeddedStyle = function (ref) {
  var animation = ref.animation;

  return (
  React.createElement( 'style', null,
    embeddedStyle(animation)
  )
);
};

function objectWithoutProperties (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

var BeatAnimation = "@keyframes Beat" + uniqId + '{' +
  '0%, 80%, 100% {transform: scale(0);}' +
  '40% {transform: scale(1);}' +
'}';

var BeatLoading = function (ref) {
  var duration = ref.duration;
  var count = ref.count;
  var fill = ref.fill;
  var size = ref.size;
  var gap = ref.gap;
  var rest$1 = objectWithoutProperties( ref, ["duration", "count", "fill", "size", "gap"] );
  var rest = rest$1;

  var viewWidth = (size + gap) * count - gap;

  return (
    React.createElement( 'svg', Object.assign({},
      rest, { width: viewWidth, height: size }),
      React.createElement( SVGEmbeddedStyle, { animation: BeatAnimation }),
      repeat(count).map(function (_, i) {
        var style = {
          borderRadius: '50%',
          animation: ("Beat" + uniqId + " infinite both"),
          animationDelay: ((-duration / (count + 1) * (count - i)) + "s"),
          animationDuration: (duration + "s"),
        };

        var cx = size * (i + 1) + gap * i - size / 2;
        var cy = size / 2;

        return (
          React.createElement( 'circle', {
            'transform-origin': (cx + "px " + cy + "px"), key: ("c-" + i), style: style, fill: fill, r: size / 2, cx: cx, cy: cy })
        )
      })
    )
  )
};

BeatLoading.defaultProps = {
  gap: 6,
  size: 8,
  count: 6,
  duration: 0.8,
};

function objectWithoutProperties$1 (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

var BounceAnimation = "@keyframes Bounce" + uniqId + '{' +
  '0%, 100% {transform:translateY(0);}' +
  '25% {transform:translateY(8px);}' +
  '75% {transform:translateY(-8px);}' +
'}';


var BounceLoading = function (ref) {
  var duration = ref.duration;
  var count = ref.count;
  var fill = ref.fill;
  var barWidth = ref.barWidth;
  var barHeight = ref.barHeight;
  var gap = ref.gap;
  var rest$1 = objectWithoutProperties$1( ref, ["duration", "count", "fill", "barWidth", "barHeight", "gap"] );
  var rest = rest$1;

  var viewWidth = (barWidth + gap) * count - gap;

  return (
    React.createElement( 'svg', Object.assign({},
      { width: viewWidth, height: barHeight * 3 }, rest),
      React.createElement( SVGEmbeddedStyle, { animation: BounceAnimation }),
      repeat(count).map(function (_, i) {
        var style = {
          animationDelay: ((-duration / (count + 1) * (count - i)) + "s"),
          animationDuration: (duration + "s"),
          animationName: ("Bounce" + uniqId),
          animationIterationCount: 'infinite',
        };

        return (
          React.createElement( 'rect', { key: ("rect-" + i), style: style, fill: fill, height: barHeight, width: barWidth, x: (barWidth + gap) * i, y: barHeight })
        )}
      )
    )
  )
};

BounceLoading.defaultProps = {
  gap: 6,
  count: 4,
  barWidth: 4,
  barHeight: 16,
  duration: 0.8,
};

function objectWithoutProperties$2 (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

/*
 * hard to find the law of google style circular loading
 * set 50 x 50 as basic viewbox size. scale viewbox when use.
 *
 * from: https://codepen.io/jczimm/pen/vEBpoL
 */

var CircularBarDashAnimation = "@keyframes CircularBarDash" + uniqId + '{' +
  '0% {stroke-dasharray: 1, 200; stroke-dashoffset: 0;}' +
  '50% {stroke-dasharray: 89, 200; stroke-dashoffset: -35;}' +
  '100% {stroke-dasharray: 89, 200; stroke-dashoffset: -124;}' +
'}';

var animation = [RotateAnimation, CircularBarDashAnimation].join('\n');

var CIRCLE_RADIUS = 50 / 2;

var CircularLoading = function (ref) {
  var duration = ref.duration;
  var stroke = ref.stroke;
  var strokeWidth = ref.strokeWidth;
  var linecap = ref.linecap;
  var size = ref.size;
  var rest$1 = objectWithoutProperties$2( ref, ["duration", "stroke", "strokeWidth", "linecap", "size"] );
  var rest = rest$1;

  return (
    React.createElement( 'svg', Object.assign({},
      rest, { viewBox: ("0 0 " + (CIRCLE_RADIUS * 2) + " " + (CIRCLE_RADIUS * 2)), width: size, height: size, style: {
        animation: ("Rotate" + uniqId + " linear infinite"),
        animationDuration: ((duration * 4 / 3) + "s")
      } }),
      React.createElement( SVGEmbeddedStyle, { animation: animation }),
      React.createElement( 'circle', {
        fill: "none", stroke: stroke, strokeWidth: strokeWidth, strokeLinecap: linecap, cx: CIRCLE_RADIUS, cy: CIRCLE_RADIUS, r: CIRCLE_RADIUS - strokeWidth, style: {
          transformOrigin: 'center',
          animation: ("CircularBarDash" + uniqId + " " + duration + "s infinite"),
        } })
    )
  )
};

CircularLoading.defaultProps = {
  size: 40,
  strokeWidth: 5,
  linecap: 'round',
  duration: 1,
};

function objectWithoutProperties$3 (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

var ClockLoading = function (ref) {
  var size = ref.size;
  var strokeWidth = ref.strokeWidth;
  var duration = ref.duration;
  var rest$1 = objectWithoutProperties$3( ref, ["size", "strokeWidth", "duration"] );
  var rest = rest$1;

  var needleProps = {
    strokeWidth: strokeWidth,
    strokeLinecap: 'round',
    x1: size / 2,
    y1: strokeWidth * 2,
    x2: size / 2,
    y2: size - strokeWidth * 2,
  };

  return (
    React.createElement( 'svg', Object.assign({}, rest, { width: size, height: size }),
      React.createElement( SVGEmbeddedStyle, { animation: RotateAnimation }),
      React.createElement( 'circle', {
        fill: "none", strokeWidth: strokeWidth, cx: (size) / 2, cy: (size) / 2, r: size / 2 - strokeWidth }),
      React.createElement( 'line', Object.assign({},
        needleProps, { strokeDasharray: ((size / 3) + " " + (size / 2)), strokeDashoffset: size / 3 + strokeWidth * 2, style: {
          transformOrigin: 'center',
          animation: ("Rotate" + uniqId + " linear infinite"),
          animationDuration: (duration + "s"),
        } }))
    )
  )
};

function objectWithoutProperties$4 (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

var RotateLoading = function (ref) {
  var size = ref.size;
  var strokeWidth = ref.strokeWidth;
  var duration = ref.duration;
  var opacity = ref.opacity;
  var rest$1 = objectWithoutProperties$4( ref, ["size", "strokeWidth", "duration", "opacity"] );
  var rest = rest$1;

  var radius = size / 2 - strokeWidth;

  var circleProps = Object.assign({}, {strokeWidth: strokeWidth,
    r: radius,
    cx: radius + strokeWidth,
    cy: radius + strokeWidth,
    fill: 'none'},
    rest);

  return (
    React.createElement( 'svg', { width: size, height: size },
      React.createElement( SVGEmbeddedStyle, { animation: RotateAnimation }),
      React.createElement( 'circle', Object.assign({}, circleProps, { style: {opacity: opacity} })),
      React.createElement( 'circle', Object.assign({},
        circleProps, { style: {
          animation: ("Rotate" + uniqId + " linear infinite"),
          strokeDasharray: '20 180',
          transformOrigin: 'center',
          animationDuration: (duration + "s"),
        } }))
    )
  )
};

RotateLoading.defaultProps = {
  size: 40,
  opacity: 0.2,
  strokeWidth: 4,
  duration: 1.6,
};

function objectWithoutProperties$5 (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

var SpinFadeAnimation = "@keyframes SpinFade" + uniqId + '{ ' +
  '50% {opacity:.3;}' +
  '100% {opacity:1;}' +
'}';

var SpinLoading = function (ref) {
  var size = ref.size;
  var barWidth = ref.barWidth;
  var barHeight = ref.barHeight;
  var count = ref.count;
  var duration = ref.duration;
  var fill = ref.fill;
  var borderRadius = ref.borderRadius;
  var rest$1 = objectWithoutProperties$5( ref, ["size", "barWidth", "barHeight", "count", "duration", "fill", "borderRadius"] );
  var rest = rest$1;

  var radius = size / 2 - barHeight / 2;

  return (
    React.createElement( 'svg', Object.assign({},
      rest, { width: size, height: size }),
      React.createElement( SVGEmbeddedStyle, { animation: SpinFadeAnimation }),
      repeat(count).map(function (_, i) {
        var angle = 360 / count * i;
        /* (barWidth + borderRadius) / 2 is used to fix the excursion caused by thickness */
        var x = Math.cos(Math.PI * angle / 180) * radius + radius + (barWidth + borderRadius) / 2;
        var y = Math.sin(Math.PI * angle / 180) * radius + radius;
        var style = {
          animation: ("SpinFade" + uniqId + " linear infinite both"),
          animationDelay: ((duration * .8 / count * i) + "s"),
          animationDuration: (duration + "s"),
          transform: ("rotate(" + (90 + angle) + "deg)"),
          transformOrigin: ((x + barWidth / 2) + "px " + (y + barHeight / 2) + "px"), // safari/firefox compactible
        };

        return (
          React.createElement( 'rect', {
            x: x, y: y, fill: fill, style: style, key: ("r-" + i), width: barWidth, height: barHeight, rx: borderRadius, ry: borderRadius })
        )
      })
    )
  )
};

SpinLoading.defaultProps = {
  size: 40,
  count: 8,
  barWidth: 4,
  duration: 1,
  barHeight: 10,
  borderRadius: 1,
};

function objectWithoutProperties$6 (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

var WaveAnimation = "@keyframes Wave" + uniqId + '{' +
  '0% {transform:scale(.1); opacity:1;}' +
  '70% {transform:scale(1); opacity:.7;}' +
  '100% {transform:scale(1); opacity:0;}' +
'}';

var WaveLoading = function (ref) {
  var size = ref.size;
  var count = ref.count;
  var stroke = ref.stroke;
  var duration = ref.duration;
  var strokeWidth = ref.strokeWidth;
  var rest$1 = objectWithoutProperties$6( ref, ["size", "count", "stroke", "duration", "strokeWidth"] );
  var rest = rest$1;

  var radius = size / 2 - strokeWidth;

  return (
    React.createElement( 'svg', Object.assign({},
      rest, { width: size, height: size }),
      React.createElement( SVGEmbeddedStyle, { animation: WaveAnimation }),
      repeat(count).map(function (_, i) {
        var style = {
          animation: ("Wave" + uniqId + " infinite both"),
          animationDelay: ((duration / count * i) + "s"),
          animationDuration: (duration + "s"),
        };

        var pos = size / 2;

        return (
          React.createElement( 'circle', {
            key: ("c-" + i), style: style, stroke: stroke, strokeWidth: strokeWidth, 'transform-origin': (pos + "px " + pos + "px"), fill: "none", r: radius, cx: pos, cy: pos })
        )
      })
    )
  )
};

WaveLoading.defaultProps = {
  size: 40,
  count: 3,
  duration: 1.5,
  strokeWidth: 2,
};

function objectWithoutProperties$7 (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

var DashedRotateAnimation = function (dash) { return "@keyframes DashedRotate" + uniqId + '{' +
  "0% {stroke-dasharray:" + dash + " " + dash + " 1 " + dash + ";transform:rotate(0deg);}" +
  "50% {stroke-dasharray:" + dash + ";transform:rotate(360deg);}" +
  "100% {stroke-dasharray:" + dash + " " + dash + " 1 " + dash + ";transform:rotate(720deg);}" +
'}'; };

var DashLoading = function (ref) {
  var size = ref.size;
  var stroke = ref.stroke;
  var strokeWidth = ref.strokeWidth;
  var duration = ref.duration;
  var rest$1 = objectWithoutProperties$7( ref, ["size", "stroke", "strokeWidth", "duration"] );
  var rest = rest$1;

  var radius = size / 2 - strokeWidth;
  var dash = Math.PI * radius / 5;

  return (
    React.createElement( 'svg', Object.assign({}, rest, { width: size, height: size }),
      React.createElement( SVGEmbeddedStyle, { animation: DashedRotateAnimation(dash) }),
      React.createElement( 'circle', {
        fill: "none", stroke: stroke, strokeLinecap: "round", strokeWidth: strokeWidth, cx: size / 2, cy: size / 2, r: radius, style: {
          transformOrigin: 'center',
          animationName: ("DashedRotate" + uniqId),
          animationDuration: (duration + "s"),
          animationIterationCount: 'infinite',
        } })
    )
  )
};

DashLoading.defaultProps = {
  size: 40,
  duration: 1.8,
  strokeWidth: 4,
};

function objectWithoutProperties$8 (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

var TransRotate = "@keyframes TransRotate" + uniqId + '{' +
  '0% {transform:rotate(45deg) scale(1);}' +
  '50% {transform:rotate(405deg) scale(.2);}' +
  '100% {transform:rotate(765deg) scale(1);}';

var CopperLoading = function (ref) {
  var size = ref.size;
  var strokeWidth = ref.strokeWidth;
  var stroke = ref.stroke;
  var fill = ref.fill;
  var duration = ref.duration;
  var rest$1 = objectWithoutProperties$8( ref, ["size", "strokeWidth", "stroke", "fill", "duration"] );
  var rest = rest$1;

  var commonStyle = {
    transformOrigin: 'center',
    animation: ("TransRotate" + uniqId + " " + duration + "s infinite"),
  };
  return (
    React.createElement( 'svg', Object.assign({},
      rest, { width: size, height: size }),
      React.createElement( SVGEmbeddedStyle, { animation: TransRotate }),
      React.createElement( 'rect', { width: size / 3, height: size / 3, x: size / 3, y: size / 3, fill: fill, style: commonStyle }),
      React.createElement( 'circle', {
        cx: size / 2, cy: size / 2, r: size / 2 - strokeWidth, fill: "transparent", stroke: fill, strokeWidth: strokeWidth, style: Object.assign({}, commonStyle,
          {animationDelay: ((duration / 2) + "s")}) })
    )
  )
};

CopperLoading.defaultProps = {
  size: 40,
  strokeWidth: 4,
  duration: 2,
};

export { BeatLoading, BounceLoading, CircularLoading, ClockLoading, CopperLoading, DashLoading, RotateLoading, SpinLoading, WaveLoading };
