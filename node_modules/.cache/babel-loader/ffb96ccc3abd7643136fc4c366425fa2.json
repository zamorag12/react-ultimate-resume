{"ast":null,"code":"import _objectSpread from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import*as Yup from'yup';import moment from'moment';import{validationTranslations}from'../../../../../utils/validation_translations';import{workTranslations}from'./validator_translations';export var WorkValidator=function WorkValidator(formatMessage){return Yup.object().shape({work:Yup.array().required(formatMessage(workTranslations.atLeastOne)).min(1,formatMessage(workTranslations.atLeastOne)).of(Yup.object().transform(function(value){return _objectSpread(_objectSpread({},value),{},{stillEmployed:!value.endDate});}).shape({position:Yup.string().required(formatMessage(validationTranslations.required)),name:Yup.string().required(formatMessage(validationTranslations.required)),summary:Yup.string().required(formatMessage(validationTranslations.required)).min(30,formatMessage(validationTranslations.min,{min:30})),place:Yup.object().nullable().shape({name:Yup.string().required(formatMessage(validationTranslations.required)).min(5,formatMessage(validationTranslations.min,{min:5}))}),startDate:Yup.object().required(formatMessage(validationTranslations.required)).test('is-not-in-future',formatMessage(workTranslations.noFutureDate),function(value){return value&&value.isBefore(moment().add(1,'day'));}).test('is-not-empty',formatMessage(validationTranslations.required),function(value){return!!value&&!Number.isNaN(Number(value.year()))&&!Number.isNaN(Number(value.month()));}),endDate:Yup.object().when('stillEmployed',{is:true,then:Yup.object().nullable().notRequired(),otherwise:Yup.object().when('startDate',function(start){return Yup.object().test('is-not-empty',formatMessage(validationTranslations.required),function(value){return!!value&&!Number.isNaN(Number(value.year()))&&!Number.isNaN(Number(value.month()));}).test('isafter',formatMessage(validationTranslations.isAfter),function(value){if(!start||Number.isNaN(Number(start.year()))||Number.isNaN(Number(start.month()))){return true;}return moment(value).isSameOrAfter(start);});})})}))});};export var validateWorkComplete=function validateWorkComplete(data){try{Yup.object({work:Yup.array().required().min(1)}).validateSync(data);}catch(e){return false;}return true;};","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/experiences/data/validator.js"],"names":["Yup","moment","validationTranslations","workTranslations","WorkValidator","formatMessage","object","shape","work","array","required","atLeastOne","min","of","transform","value","stillEmployed","endDate","position","string","name","summary","place","nullable","startDate","test","noFutureDate","isBefore","add","Number","isNaN","year","month","when","is","then","notRequired","otherwise","start","isAfter","isSameOrAfter","validateWorkComplete","data","validateSync","e"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport moment from 'moment';\nimport { validationTranslations } from '../../../../../utils/validation_translations';\nimport { workTranslations } from './validator_translations';\n\nexport const WorkValidator = (formatMessage) =>\n    Yup.object().shape({\n        work: Yup.array()\n            .required(formatMessage(workTranslations.atLeastOne))\n            .min(1, formatMessage(workTranslations.atLeastOne))\n            .of(\n                Yup.object()\n                    .transform((value) => ({ ...value, stillEmployed: !value.endDate }))\n                    .shape({\n                        position: Yup.string().required(formatMessage(validationTranslations.required)),\n                        name: Yup.string().required(formatMessage(validationTranslations.required)),\n                        summary: Yup.string()\n                            .required(formatMessage(validationTranslations.required))\n                            .min(30, formatMessage(validationTranslations.min, { min: 30 })),\n                        place: Yup.object()\n                            .nullable()\n                            .shape({\n                                name: Yup.string()\n                                    .required(formatMessage(validationTranslations.required))\n                                    .min(5, formatMessage(validationTranslations.min, { min: 5 }))\n                            }),\n                        startDate: Yup.object()\n                            .required(formatMessage(validationTranslations.required))\n                            .test(\n                                'is-not-in-future',\n                                formatMessage(workTranslations.noFutureDate),\n                                (value) => value && value.isBefore(moment().add(1, 'day'))\n                            )\n                            .test(\n                                'is-not-empty',\n                                formatMessage(validationTranslations.required),\n                                (value) =>\n                                    !!value &&\n                                    !Number.isNaN(Number(value.year())) &&\n                                    !Number.isNaN(Number(value.month()))\n                            ),\n\n                        endDate: Yup.object().when('stillEmployed', {\n                            is: true,\n                            then: Yup.object().nullable().notRequired(),\n                            otherwise: Yup.object().when('startDate', (start) =>\n                                Yup.object()\n                                    .test(\n                                        'is-not-empty',\n                                        formatMessage(validationTranslations.required),\n                                        (value) =>\n                                            !!value &&\n                                            !Number.isNaN(Number(value.year())) &&\n                                            !Number.isNaN(Number(value.month()))\n                                    )\n                                    .test('isafter', formatMessage(validationTranslations.isAfter), (value) => {\n                                        if (\n                                            !start ||\n                                            Number.isNaN(Number(start.year())) ||\n                                            Number.isNaN(Number(start.month()))\n                                        ) {\n                                            return true;\n                                        }\n                                        return moment(value).isSameOrAfter(start);\n                                    })\n                            )\n                        })\n                    })\n            )\n    });\n\nexport const validateWorkComplete = (data) => {\n    try {\n        Yup.object({\n            work: Yup.array().required().min(1)\n        }).validateSync(data);\n    } catch (e) {\n        return false;\n    }\n    return true;\n};\n"]},"metadata":{},"sourceType":"module"}