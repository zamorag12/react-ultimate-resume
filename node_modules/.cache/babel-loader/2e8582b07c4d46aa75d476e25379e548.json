{"ast":null,"code":"import _classCallCheck from \"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { Provider } from './injectIntl';\nimport { createError, DEFAULT_INTL_CONFIG, createFormatters, invariantIntlContext, createIntlCache } from '../utils';\nimport { formatNumber, formatNumberToParts } from '../formatters/number';\nimport { formatRelativeTime } from '../formatters/relativeTime';\nimport { formatDate, formatTime, formatDateToParts, formatTimeToParts } from '../formatters/dateTime';\nimport { formatPlural } from '../formatters/plural';\nimport { formatMessage, formatHTMLMessage } from '../formatters/message';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nimport { formatList } from '../formatters/list';\nimport { formatDisplayName } from '../formatters/displayName';\nvar shallowEquals = shallowEquals_.default || shallowEquals_;\n\nfunction processIntlConfig(config) {\n  return {\n    locale: config.locale,\n    timeZone: config.timeZone,\n    formats: config.formats,\n    textComponent: config.textComponent,\n    messages: config.messages,\n    defaultLocale: config.defaultLocale,\n    defaultFormats: config.defaultFormats,\n    onError: config.onError\n  };\n}\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\n\n\nexport function createIntl(config, cache) {\n  var formatters = createFormatters(cache);\n  var resolvedConfig = Object.assign(Object.assign({}, DEFAULT_INTL_CONFIG), config);\n  var locale = resolvedConfig.locale,\n      defaultLocale = resolvedConfig.defaultLocale,\n      onError = resolvedConfig.onError;\n\n  if (!locale) {\n    if (onError) {\n      onError(createError(\"\\\"locale\\\" was not configured, using \\\"\".concat(defaultLocale, \"\\\" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/API.md#intlshape for more details\")));\n    } // Since there's no registered locale data for `locale`, this will\n    // fallback to the `defaultLocale` to make sure things can render.\n    // The `messages` are overridden to the `defaultProps` empty object\n    // to maintain referential equality across re-renders. It's assumed\n    // each <FormattedMessage> contains a `defaultMessage` prop.\n\n\n    resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n  } else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n    onError(createError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.NumberFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/Getting-Started.md#runtime-requirements for more details\")));\n  } else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length && onError) {\n    onError(createError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/Getting-Started.md#runtime-requirements for more details\")));\n  }\n\n  return Object.assign(Object.assign({}, resolvedConfig), {\n    formatters: formatters,\n    formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat),\n    formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules),\n    formatMessage: formatMessage.bind(null, resolvedConfig, formatters),\n    formatHTMLMessage: formatHTMLMessage.bind(null, resolvedConfig, formatters),\n    formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat),\n    formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames)\n  });\n}\n\nvar IntlProvider = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(IntlProvider, _React$PureComponent);\n\n  var _super = _createSuper(IntlProvider);\n\n  function IntlProvider() {\n    var _this;\n\n    _classCallCheck(this, IntlProvider);\n\n    _this = _super.apply(this, arguments);\n    _this.cache = createIntlCache();\n    _this.state = {\n      cache: _this.cache,\n      intl: createIntl(processIntlConfig(_this.props), _this.cache),\n      prevConfig: processIntlConfig(_this.props)\n    };\n    return _this;\n  }\n\n  _createClass(IntlProvider, [{\n    key: \"render\",\n    value: function render() {\n      invariantIntlContext(this.state.intl);\n      return React.createElement(Provider, {\n        value: this.state.intl\n      }, this.props.children);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, _ref) {\n      var prevConfig = _ref.prevConfig,\n          cache = _ref.cache;\n      var config = processIntlConfig(props);\n\n      if (!shallowEquals(prevConfig, config)) {\n        return {\n          intl: createIntl(config, cache),\n          prevConfig: config\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return IntlProvider;\n}(React.PureComponent);\n\nexport { IntlProvider as default };\nIntlProvider.displayName = 'IntlProvider';\nIntlProvider.defaultProps = DEFAULT_INTL_CONFIG;","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/node_modules/react-intl/lib/components/provider.js"],"names":["React","Provider","createError","DEFAULT_INTL_CONFIG","createFormatters","invariantIntlContext","createIntlCache","formatNumber","formatNumberToParts","formatRelativeTime","formatDate","formatTime","formatDateToParts","formatTimeToParts","formatPlural","formatMessage","formatHTMLMessage","shallowEquals_","formatList","formatDisplayName","shallowEquals","default","processIntlConfig","config","locale","timeZone","formats","textComponent","messages","defaultLocale","defaultFormats","onError","createIntl","cache","formatters","resolvedConfig","Object","assign","Intl","NumberFormat","supportedLocalesOf","length","DateTimeFormat","bind","getNumberFormat","getRelativeTimeFormat","getDateTimeFormat","getPluralRules","getListFormat","getDisplayNames","IntlProvider","arguments","state","intl","props","prevConfig","createElement","value","children","PureComponent","displayName","defaultProps"],"mappings":"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","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { Provider } from './injectIntl';\nimport { createError, DEFAULT_INTL_CONFIG, createFormatters, invariantIntlContext, createIntlCache, } from '../utils';\nimport { formatNumber, formatNumberToParts } from '../formatters/number';\nimport { formatRelativeTime } from '../formatters/relativeTime';\nimport { formatDate, formatTime, formatDateToParts, formatTimeToParts, } from '../formatters/dateTime';\nimport { formatPlural } from '../formatters/plural';\nimport { formatMessage, formatHTMLMessage } from '../formatters/message';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nimport { formatList } from '../formatters/list';\nimport { formatDisplayName } from '../formatters/displayName';\nconst shallowEquals = shallowEquals_.default || shallowEquals_;\nfunction processIntlConfig(config) {\n    return {\n        locale: config.locale,\n        timeZone: config.timeZone,\n        formats: config.formats,\n        textComponent: config.textComponent,\n        messages: config.messages,\n        defaultLocale: config.defaultLocale,\n        defaultFormats: config.defaultFormats,\n        onError: config.onError,\n    };\n}\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nexport function createIntl(config, cache) {\n    const formatters = createFormatters(cache);\n    const resolvedConfig = Object.assign(Object.assign({}, DEFAULT_INTL_CONFIG), config);\n    const { locale, defaultLocale, onError } = resolvedConfig;\n    if (!locale) {\n        if (onError) {\n            onError(createError(`\"locale\" was not configured, using \"${defaultLocale}\" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/API.md#intlshape for more details`));\n        }\n        // Since there's no registered locale data for `locale`, this will\n        // fallback to the `defaultLocale` to make sure things can render.\n        // The `messages` are overridden to the `defaultProps` empty object\n        // to maintain referential equality across re-renders. It's assumed\n        // each <FormattedMessage> contains a `defaultMessage` prop.\n        resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n    }\n    else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n        onError(createError(`Missing locale data for locale: \"${locale}\" in Intl.NumberFormat. Using default locale: \"${defaultLocale}\" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/Getting-Started.md#runtime-requirements for more details`));\n    }\n    else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length &&\n        onError) {\n        onError(createError(`Missing locale data for locale: \"${locale}\" in Intl.DateTimeFormat. Using default locale: \"${defaultLocale}\" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/Getting-Started.md#runtime-requirements for more details`));\n    }\n    return Object.assign(Object.assign({}, resolvedConfig), { formatters, formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), formatMessage: formatMessage.bind(null, resolvedConfig, formatters), formatHTMLMessage: formatHTMLMessage.bind(null, resolvedConfig, formatters), formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames) });\n}\nexport default class IntlProvider extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.cache = createIntlCache();\n        this.state = {\n            cache: this.cache,\n            intl: createIntl(processIntlConfig(this.props), this.cache),\n            prevConfig: processIntlConfig(this.props),\n        };\n    }\n    static getDerivedStateFromProps(props, { prevConfig, cache }) {\n        const config = processIntlConfig(props);\n        if (!shallowEquals(prevConfig, config)) {\n            return {\n                intl: createIntl(config, cache),\n                prevConfig: config,\n            };\n        }\n        return null;\n    }\n    render() {\n        invariantIntlContext(this.state.intl);\n        return React.createElement(Provider, { value: this.state.intl }, this.props.children);\n    }\n}\nIntlProvider.displayName = 'IntlProvider';\nIntlProvider.defaultProps = DEFAULT_INTL_CONFIG;\n"]},"metadata":{},"sourceType":"module"}