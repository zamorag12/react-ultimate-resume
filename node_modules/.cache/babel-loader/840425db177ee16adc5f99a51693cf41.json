{"ast":null,"code":"import _objectSpread from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useEffect,useRef,useState}from'react';var DEFAULT_OPTIONS={type:['(cities)']};export var useGoogleMapsPredictions=function useGoogleMapsPredictions(input){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DEFAULT_OPTIONS;var timer=useRef();var autoCompleteService=useRef(null);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),predictions=_useState2[0],setPredictions=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),ready=_useState4[0],setReady=_useState4[1];var handlePlacesPredictionsUpdate=useCallback(function(receivedPredictions,status){// eslint-disable-next-line no-undef\nif(status!==google.maps.places.PlacesServiceStatus.OK){setPredictions([]);return;}var filteredPredictions=receivedPredictions.filter(function(p){return p.types&&!p.types.includes('country');});setPredictions(filteredPredictions);},[]);useEffect(function(){if(typeof google==='undefined'){return;}// eslint-disable-next-line no-undef\nvar googleInstance=google;if(!googleInstance.ready){console.debug('Google instance did not finish initialization');return;}var gmapsInitError=googleInstance.init_error;if(gmapsInitError){console.warn(\"Failed to init google maps autocomplete google.error is \".concat(gmapsInitError));return;}try{// eslint-disable-next-line no-undef\nautoCompleteService.current=new google.maps.places.AutocompleteService();setReady(true);}catch(e){console.error('Failed to init google maps autocomplete service',e);}},[]);useEffect(function(){if(!autoCompleteService.current){return;}if(!input){setPredictions([]);return;}if(timer.current){clearTimeout(timer.current);}timer.current=setTimeout(autoCompleteService.current.getPlacePredictions(_objectSpread({input:input},options),handlePlacesPredictionsUpdate),200);},[input,autoCompleteService.current]);return{predictions:predictions,ready:ready};};","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/hooks/location/use_google_maps_predictions.js"],"names":["useCallback","useEffect","useRef","useState","DEFAULT_OPTIONS","type","useGoogleMapsPredictions","input","options","timer","autoCompleteService","predictions","setPredictions","ready","setReady","handlePlacesPredictionsUpdate","receivedPredictions","status","google","maps","places","PlacesServiceStatus","OK","filteredPredictions","filter","p","types","includes","googleInstance","console","debug","gmapsInitError","init_error","warn","current","AutocompleteService","e","error","clearTimeout","setTimeout","getPlacePredictions"],"mappings":"iVAAA,OAASA,WAAT,CAAsBC,SAAtB,CAAiCC,MAAjC,CAAyCC,QAAzC,KAAyD,OAAzD,CAEA,GAAMC,CAAAA,eAAe,CAAG,CACpBC,IAAI,CAAE,CAAC,UAAD,CADc,CAAxB,CAIA,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,KAAD,CAAsC,IAA9BC,CAAAA,OAA8B,2DAApBJ,eAAoB,CAC1E,GAAMK,CAAAA,KAAK,CAAGP,MAAM,EAApB,CACA,GAAMQ,CAAAA,mBAAmB,CAAGR,MAAM,CAAC,IAAD,CAAlC,CAF0E,cAGpCC,QAAQ,CAAC,EAAD,CAH4B,wCAGnEQ,WAHmE,eAGtDC,cAHsD,8BAIhDT,QAAQ,CAAC,KAAD,CAJwC,yCAInEU,KAJmE,eAI5DC,QAJ4D,eAK1E,GAAMC,CAAAA,6BAA6B,CAAGf,WAAW,CAAC,SAACgB,mBAAD,CAAsBC,MAAtB,CAAiC,CAC/E;AACA,GAAIA,MAAM,GAAKC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,mBAAnB,CAAuCC,EAAtD,CAA0D,CACtDV,cAAc,CAAC,EAAD,CAAd,CACA,OACH,CACD,GAAMW,CAAAA,mBAAmB,CAAGP,mBAAmB,CAACQ,MAApB,CAA2B,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,KAAF,EAAW,CAACD,CAAC,CAACC,KAAF,CAAQC,QAAR,CAAiB,SAAjB,CAAnB,EAA3B,CAA5B,CACAf,cAAc,CAACW,mBAAD,CAAd,CACH,CARgD,CAQ9C,EAR8C,CAAjD,CASAtB,SAAS,CAAC,UAAM,CACZ,GAAI,MAAOiB,CAAAA,MAAP,GAAkB,WAAtB,CAAmC,CAC/B,OACH,CACD;AACA,GAAMU,CAAAA,cAAc,CAAGV,MAAvB,CACA,GAAI,CAACU,cAAc,CAACf,KAApB,CAA2B,CACvBgB,OAAO,CAACC,KAAR,CAAc,+CAAd,EACA,OACH,CACD,GAAMC,CAAAA,cAAc,CAAGH,cAAc,CAACI,UAAtC,CACA,GAAID,cAAJ,CAAoB,CAChBF,OAAO,CAACI,IAAR,mEAAwEF,cAAxE,GACA,OACH,CACD,GAAI,CACA;AACArB,mBAAmB,CAACwB,OAApB,CAA8B,GAAIhB,CAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBe,mBAAvB,EAA9B,CACArB,QAAQ,CAAC,IAAD,CAAR,CACH,CAAC,MAAOsB,CAAP,CAAU,CACRP,OAAO,CAACQ,KAAR,CAAc,iDAAd,CAAiED,CAAjE,EACH,CACJ,CAtBQ,CAsBN,EAtBM,CAAT,CAuBAnC,SAAS,CAAC,UAAM,CACZ,GAAI,CAACS,mBAAmB,CAACwB,OAAzB,CAAkC,CAC9B,OACH,CACD,GAAI,CAAC3B,KAAL,CAAY,CACRK,cAAc,CAAC,EAAD,CAAd,CACA,OACH,CACD,GAAIH,KAAK,CAACyB,OAAV,CAAmB,CACfI,YAAY,CAAC7B,KAAK,CAACyB,OAAP,CAAZ,CACH,CACDzB,KAAK,CAACyB,OAAN,CAAgBK,UAAU,CACtB7B,mBAAmB,CAACwB,OAApB,CAA4BM,mBAA5B,gBAEQjC,KAAK,CAALA,KAFR,EAGWC,OAHX,EAKIO,6BALJ,CADsB,CAQtB,GARsB,CAA1B,CAUH,CArBQ,CAqBN,CAACR,KAAD,CAAQG,mBAAmB,CAACwB,OAA5B,CArBM,CAAT,CAsBA,MAAO,CAAEvB,WAAW,CAAXA,WAAF,CAAeE,KAAK,CAALA,KAAf,CAAP,CACH,CA5DM","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nconst DEFAULT_OPTIONS = {\n    type: ['(cities)']\n};\n\nexport const useGoogleMapsPredictions = (input, options = DEFAULT_OPTIONS) => {\n    const timer = useRef();\n    const autoCompleteService = useRef(null);\n    const [predictions, setPredictions] = useState([]);\n    const [ready, setReady] = useState(false);\n    const handlePlacesPredictionsUpdate = useCallback((receivedPredictions, status) => {\n        // eslint-disable-next-line no-undef\n        if (status !== google.maps.places.PlacesServiceStatus.OK) {\n            setPredictions([]);\n            return;\n        }\n        const filteredPredictions = receivedPredictions.filter((p) => p.types && !p.types.includes('country'));\n        setPredictions(filteredPredictions);\n    }, []);\n    useEffect(() => {\n        if (typeof google === 'undefined') {\n            return;\n        }\n        // eslint-disable-next-line no-undef\n        const googleInstance = google;\n        if (!googleInstance.ready) {\n            console.debug('Google instance did not finish initialization');\n            return;\n        }\n        const gmapsInitError = googleInstance.init_error;\n        if (gmapsInitError) {\n            console.warn(`Failed to init google maps autocomplete google.error is ${gmapsInitError}`);\n            return;\n        }\n        try {\n            // eslint-disable-next-line no-undef\n            autoCompleteService.current = new google.maps.places.AutocompleteService();\n            setReady(true);\n        } catch (e) {\n            console.error('Failed to init google maps autocomplete service', e);\n        }\n    }, []);\n    useEffect(() => {\n        if (!autoCompleteService.current) {\n            return;\n        }\n        if (!input) {\n            setPredictions([]);\n            return;\n        }\n        if (timer.current) {\n            clearTimeout(timer.current);\n        }\n        timer.current = setTimeout(\n            autoCompleteService.current.getPlacePredictions(\n                {\n                    input,\n                    ...options\n                },\n                handlePlacesPredictionsUpdate\n            ),\n            200\n        );\n    }, [input, autoCompleteService.current]);\n    return { predictions, ready };\n};\n"]},"metadata":{},"sourceType":"module"}