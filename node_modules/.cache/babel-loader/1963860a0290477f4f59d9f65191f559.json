{"ast":null,"code":"import _objectSpread from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useMemo,useState}from'react';import{createUseStyles,useTheme}from'react-jss';import{AnimatePresence,motion}from'framer-motion';import Carousel,{Modal,ModalGateway}from'react-images';import{ProjectDialogContentImage}from'./project_dialog_content_image/project_dialog_content_image';import{ProjectDialogContentAddImage}from'./project_dialog_content_add_image/project_dialog_content_add_image';import{PROJECT_DIALOG_CONTENT_IMAGES_TRANSITIONS_PROPS}from'./project_dialog_content_images_transitions_props';import{styles}from'./project_dialog_content_images_styles';import{useCardVariant}from'../../../../../hooks/profile_card_hooks/use_card_variant';import{getColorsFromCardVariant,getHexFromPaletteColor}from'../../../../../../utils/styles/styles_utils';import{hashCode}from'../../../../../../utils/string_utils';import{DEFAULT_SPRING_TYPE as spring}from'../../../../../../utils/framer_motion/common_types/spring_type';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyles=createUseStyles(styles);var ProjectDialogContentImagesComponent=function ProjectDialogContentImagesComponent(_ref){var _ref$images=_ref.images,images=_ref$images===void 0?[]:_ref$images,isEditing=_ref.isEditing;var classes=useStyles();var theme=useTheme();var _useCardVariant=useCardVariant(),_useCardVariant2=_slicedToArray(_useCardVariant,1),variant=_useCardVariant2[0];var _useState=useState(null),_useState2=_slicedToArray(_useState,2),modalCarouselIndex=_useState2[0],setModelCarouselIndex=_useState2[1];var views=useMemo(function(){return images.map(function(_ref2){var name=_ref2.name,url=_ref2.url;return{caption:name,src:url};});},[images]);var handleImageClick=useCallback(function(index){return function(){if(isEditing){return;}setModelCarouselIndex(index);};},[isEditing]);var handleModalClose=useCallback(function(){return setModelCarouselIndex(null);},[]);var navButtonStyles=useCallback(function(base){return _objectSpread(_objectSpread({},base),{},{backgroundColor:getHexFromPaletteColor(theme,getColorsFromCardVariant(theme,variant).backgroundColor),boxShadow:'0 1px 6px rgba(0, 0, 0, 0.18)',color:getHexFromPaletteColor(theme,getColorsFromCardVariant(theme,variant).color),'&:hover, &:active':{backgroundColor:getHexFromPaletteColor(theme,getColorsFromCardVariant(theme,variant).backgroundColor),opacity:1},'&:active':{boxShadow:'0 1px 3px rgba(0, 0, 0, 0.14)',transform:'scale(0.96)'}});},[theme,variant]);return/*#__PURE__*/_jsxs(\"div\",{className:classes.container,children:[isEditing&&/*#__PURE__*/_jsx(ProjectDialogContentAddImage,{}),/*#__PURE__*/_jsx(AnimatePresence,{children:images.map(function(item,index){return/*#__PURE__*/_jsx(ProjectDialogContentImage,{component:isEditing?motion.button:motion.div,motionConfig:{variants:PROJECT_DIALOG_CONTENT_IMAGES_TRANSITIONS_PROPS,initial:'initial',animate:'animate',exit:'exit',transition:spring},url:item.url,name:item.name,handleImageClick:handleImageClick(index)},\"project_image_\".concat(index,\"_\").concat(hashCode(item.url)));})}),/*#__PURE__*/_jsx(ModalGateway,{children:modalCarouselIndex!==null&&/*#__PURE__*/_jsx(Modal,{onClose:handleModalClose,styles:{blanket:function blanket(base){return _objectSpread(_objectSpread({},base),{},{zIndex:2100});},positioner:function positioner(base){return _objectSpread(_objectSpread({},base),{},{zIndex:2110});},dialog:function dialog(base){return _objectSpread(_objectSpread({},base),{},{zIndex:2120,fontFamily:'Avenir Next'});}},children:/*#__PURE__*/_jsx(Carousel,{views:views,currentIndex:modalCarouselIndex,styles:{navigationNext:navButtonStyles,navigationPrev:navButtonStyles}})})})]});};export var ProjectDialogContentImages=ProjectDialogContentImagesComponent;","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/projects/project_dialog/project_dialog_content_images/project_dialog_content_images.jsx"],"names":["React","useCallback","useMemo","useState","createUseStyles","useTheme","AnimatePresence","motion","Carousel","Modal","ModalGateway","ProjectDialogContentImage","ProjectDialogContentAddImage","PROJECT_DIALOG_CONTENT_IMAGES_TRANSITIONS_PROPS","styles","useCardVariant","getColorsFromCardVariant","getHexFromPaletteColor","hashCode","DEFAULT_SPRING_TYPE","spring","useStyles","ProjectDialogContentImagesComponent","images","isEditing","classes","theme","variant","modalCarouselIndex","setModelCarouselIndex","views","map","name","url","caption","src","handleImageClick","index","handleModalClose","navButtonStyles","base","backgroundColor","boxShadow","color","opacity","transform","container","item","button","div","variants","initial","animate","exit","transition","blanket","zIndex","positioner","dialog","fontFamily","navigationNext","navigationPrev","ProjectDialogContentImages"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\n\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport Carousel, { Modal, ModalGateway } from 'react-images';\n\nimport { ProjectDialogContentImage } from './project_dialog_content_image/project_dialog_content_image';\nimport { ProjectDialogContentAddImage } from './project_dialog_content_add_image/project_dialog_content_add_image';\n\nimport { PROJECT_DIALOG_CONTENT_IMAGES_TRANSITIONS_PROPS } from './project_dialog_content_images_transitions_props';\n\nimport { styles } from './project_dialog_content_images_styles';\nimport { useCardVariant } from '../../../../../hooks/profile_card_hooks/use_card_variant';\nimport { getColorsFromCardVariant, getHexFromPaletteColor } from '../../../../../../utils/styles/styles_utils';\nimport { hashCode } from '../../../../../../utils/string_utils';\nimport { DEFAULT_SPRING_TYPE as spring } from '../../../../../../utils/framer_motion/common_types/spring_type';\n\nconst useStyles = createUseStyles(styles);\n\nconst ProjectDialogContentImagesComponent = ({ images = [], isEditing }) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [variant] = useCardVariant();\n    const [modalCarouselIndex, setModelCarouselIndex] = useState(null);\n\n    const views = useMemo(() => images.map(({ name, url }) => ({ caption: name, src: url })), [images]);\n\n    const handleImageClick = useCallback(\n        (index) => () => {\n            if (isEditing) {\n                return;\n            }\n            setModelCarouselIndex(index);\n        },\n        [isEditing]\n    );\n\n    const handleModalClose = useCallback(() => setModelCarouselIndex(null), []);\n\n    const navButtonStyles = useCallback(\n        (base) => ({\n            ...base,\n            backgroundColor: getHexFromPaletteColor(theme, getColorsFromCardVariant(theme, variant).backgroundColor),\n            boxShadow: '0 1px 6px rgba(0, 0, 0, 0.18)',\n            color: getHexFromPaletteColor(theme, getColorsFromCardVariant(theme, variant).color),\n            '&:hover, &:active': {\n                backgroundColor: getHexFromPaletteColor(\n                    theme,\n                    getColorsFromCardVariant(theme, variant).backgroundColor\n                ),\n                opacity: 1\n            },\n            '&:active': {\n                boxShadow: '0 1px 3px rgba(0, 0, 0, 0.14)',\n                transform: 'scale(0.96)'\n            }\n        }),\n        [theme, variant]\n    );\n    return (\n        <div className={classes.container}>\n            {isEditing && <ProjectDialogContentAddImage />}\n            <AnimatePresence>\n                {images.map((item, index) => (\n                    <ProjectDialogContentImage\n                        key={`project_image_${index}_${hashCode(item.url)}`}\n                        component={isEditing ? motion.button : motion.div}\n                        motionConfig={{\n                            variants: PROJECT_DIALOG_CONTENT_IMAGES_TRANSITIONS_PROPS,\n                            initial: 'initial',\n                            animate: 'animate',\n                            exit: 'exit',\n                            transition: spring\n                        }}\n                        url={item.url}\n                        name={item.name}\n                        handleImageClick={handleImageClick(index)}\n                    />\n                ))}\n            </AnimatePresence>\n            <ModalGateway>\n                {modalCarouselIndex !== null && (\n                    <Modal\n                        onClose={handleModalClose}\n                        styles={{\n                            blanket: (base) => ({ ...base, zIndex: 2100 }),\n                            positioner: (base) => ({ ...base, zIndex: 2110 }),\n                            dialog: (base) => ({ ...base, zIndex: 2120, fontFamily: 'Avenir Next' })\n                        }}\n                    >\n                        <Carousel\n                            views={views}\n                            currentIndex={modalCarouselIndex}\n                            styles={{\n                                navigationNext: navButtonStyles,\n                                navigationPrev: navButtonStyles\n                            }}\n                        />\n                    </Modal>\n                )}\n            </ModalGateway>\n        </div>\n    );\n};\n\nexport const ProjectDialogContentImages = ProjectDialogContentImagesComponent;\n"]},"metadata":{},"sourceType":"module"}