{"ast":null,"code":"import _toConsumableArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import uuid from'uuid/v4';import moment from'moment';export var mapProjectsFromJsonResume=function mapProjectsFromJsonResume(jsonResume){var _jsonResume$projects;return{projects:jsonResume===null||jsonResume===void 0?void 0:(_jsonResume$projects=jsonResume.projects)===null||_jsonResume$projects===void 0?void 0:_jsonResume$projects.map(function(project,index){var projectIndex=Number(project.index);return _objectSpread(_objectSpread({},project),{},{// generating uuid for manipulating data if not present\nid:project.id||uuid(),date:project.endDate&&moment(project.endDate,'YYYY-MM-DD'),index:Number.isNaN(projectIndex)?index:projectIndex});}).sort(function(_ref,_ref2){var a=_ref.index;var b=_ref2.index;return a-b;})};};export var mapProjectToJsonResume=function mapProjectToJsonResume(project){return _objectSpread(_objectSpread({},project),{},{id:project.id||uuid(),endDate:project.date&&project.date.format('YYYY-MM-DD')});};export var updateProjectsArray=function updateProjectsArray(newProject,jsonResume){var _jsonResume$projects2;if(!((_jsonResume$projects2=jsonResume.projects)===null||_jsonResume$projects2===void 0?void 0:_jsonResume$projects2.length)){return{projects:[newProject]};}var newProjects=_toConsumableArray(jsonResume.projects).sort(function(_ref3,_ref4){var a=_ref3.index;var b=_ref4.index;return a-b;});if(!Number.isNaN(Number(newProject.index))){newProjects[newProject.index]=newProject;return{projects:newProjects};}return{projects:newProjects.concat(newProject)};};","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/projects/data/mapping.js"],"names":["uuid","moment","mapProjectsFromJsonResume","jsonResume","projects","map","project","index","projectIndex","Number","id","date","endDate","isNaN","sort","a","b","mapProjectToJsonResume","format","updateProjectsArray","newProject","length","newProjects","concat"],"mappings":"yVAAA,MAAOA,CAAAA,IAAP,KAAiB,SAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,QAAnB,CAEA,MAAO,IAAMC,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAACC,UAAD,iCAAiB,CACtDC,QAAQ,CAAED,UAAF,SAAEA,UAAF,uCAAEA,UAAU,CAAEC,QAAd,+CAAE,qBACJC,GADI,CACA,SAACC,OAAD,CAAUC,KAAV,CAAoB,CACtB,GAAMC,CAAAA,YAAY,CAAGC,MAAM,CAACH,OAAO,CAACC,KAAT,CAA3B,CACA,sCACOD,OADP,MAEI;AACAI,EAAE,CAAEJ,OAAO,CAACI,EAAR,EAAcV,IAAI,EAH1B,CAIIW,IAAI,CAAEL,OAAO,CAACM,OAAR,EAAmBX,MAAM,CAACK,OAAO,CAACM,OAAT,CAAkB,YAAlB,CAJnC,CAKIL,KAAK,CAAEE,MAAM,CAACI,KAAP,CAAaL,YAAb,EAA6BD,KAA7B,CAAqCC,YALhD,GAOH,CAVK,EAWLM,IAXK,CAWA,wBAAUC,CAAAA,CAAV,MAAGR,KAAH,IAAwBS,CAAAA,CAAxB,OAAiBT,KAAjB,OAAgCQ,CAAAA,CAAC,CAAGC,CAApC,EAXA,CAD4C,CAAjB,EAAlC,CAeP,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACX,OAAD,wCAC/BA,OAD+B,MAElCI,EAAE,CAAEJ,OAAO,CAACI,EAAR,EAAcV,IAAI,EAFY,CAGlCY,OAAO,CAAEN,OAAO,CAACK,IAAR,EAAgBL,OAAO,CAACK,IAAR,CAAaO,MAAb,CAAoB,YAApB,CAHS,IAA/B,CAMP,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,UAAD,CAAajB,UAAb,CAA4B,2BAC3D,GAAI,yBAACA,UAAU,CAACC,QAAZ,gDAAC,sBAAqBiB,MAAtB,CAAJ,CAAkC,CAC9B,MAAO,CAAEjB,QAAQ,CAAE,CAACgB,UAAD,CAAZ,CAAP,CACH,CACD,GAAME,CAAAA,WAAW,CAAG,mBAAInB,UAAU,CAACC,QAAf,EAAyBU,IAAzB,CAA8B,yBAAUC,CAAAA,CAAV,OAAGR,KAAH,IAAwBS,CAAAA,CAAxB,OAAiBT,KAAjB,OAAgCQ,CAAAA,CAAC,CAAGC,CAApC,EAA9B,CAApB,CACA,GAAI,CAACP,MAAM,CAACI,KAAP,CAAaJ,MAAM,CAACW,UAAU,CAACb,KAAZ,CAAnB,CAAL,CAA6C,CACzCe,WAAW,CAACF,UAAU,CAACb,KAAZ,CAAX,CAAgCa,UAAhC,CACA,MAAO,CAAEhB,QAAQ,CAAEkB,WAAZ,CAAP,CACH,CACD,MAAO,CAAElB,QAAQ,CAAEkB,WAAW,CAACC,MAAZ,CAAmBH,UAAnB,CAAZ,CAAP,CACH,CAVM","sourcesContent":["import uuid from 'uuid/v4';\nimport moment from 'moment';\n\nexport const mapProjectsFromJsonResume = (jsonResume) => ({\n    projects: jsonResume?.projects\n        ?.map((project, index) => {\n            const projectIndex = Number(project.index);\n            return {\n                ...project,\n                // generating uuid for manipulating data if not present\n                id: project.id || uuid(),\n                date: project.endDate && moment(project.endDate, 'YYYY-MM-DD'),\n                index: Number.isNaN(projectIndex) ? index : projectIndex\n            };\n        })\n        .sort(({ index: a }, { index: b }) => a - b)\n});\n\nexport const mapProjectToJsonResume = (project) => ({\n    ...project,\n    id: project.id || uuid(),\n    endDate: project.date && project.date.format('YYYY-MM-DD')\n});\n\nexport const updateProjectsArray = (newProject, jsonResume) => {\n    if (!jsonResume.projects?.length) {\n        return { projects: [newProject] };\n    }\n    const newProjects = [...jsonResume.projects].sort(({ index: a }, { index: b }) => a - b);\n    if (!Number.isNaN(Number(newProject.index))) {\n        newProjects[newProject.index] = newProject;\n        return { projects: newProjects };\n    }\n    return { projects: newProjects.concat(newProject) };\n};\n"]},"metadata":{},"sourceType":"module"}