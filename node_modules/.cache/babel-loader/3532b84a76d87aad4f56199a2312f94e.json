{"ast":null,"code":"import React,{useMemo}from'react';import{FormattedMessage}from'react-intl';import{jsx as _jsx}from\"react/jsx-runtime\";export var ExperienceYears=function ExperienceYears(_ref){var experienceYears=_ref.experienceYears,codeExperienceYears=_ref.codeExperienceYears;var experienceValue=useMemo(function(){var numberValue=Number(experienceYears);if(Number.isNaN(numberValue)){return 0;}return numberValue;},[experienceYears]);if(!Number.isNaN(Number(codeExperienceYears))){return null;}console.warn('experienceYears is deprecated, please use codeExperienceYears and otherExperienceYears');if(experienceValue===0){return/*#__PURE__*/_jsx(FormattedMessage,{id:\"Basics.Back.ExperienceYear.noExperience\",defaultMessage:'No experience (yet!)',values:{experienceYears:experienceYears}});}return/*#__PURE__*/_jsx(FormattedMessage,{id:\"Basics.Back.ExperienceYear.value\",defaultMessage:'{experienceYears, plural, one {# year} other {# years} }  of experience',values:{experienceYears:experienceYears}});};","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/basics/basics_back/fields/professional_experience.jsx"],"names":["React","useMemo","FormattedMessage","ExperienceYears","experienceYears","codeExperienceYears","experienceValue","numberValue","Number","isNaN","console","warn"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,OAAhB,KAA+B,OAA/B,CACA,OAASC,gBAAT,KAAiC,YAAjC,C,2CAEA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAA8C,IAA3CC,CAAAA,eAA2C,MAA3CA,eAA2C,CAA1BC,mBAA0B,MAA1BA,mBAA0B,CACzE,GAAMC,CAAAA,eAAe,CAAGL,OAAO,CAAC,UAAM,CAClC,GAAMM,CAAAA,WAAW,CAAGC,MAAM,CAACJ,eAAD,CAA1B,CACA,GAAII,MAAM,CAACC,KAAP,CAAaF,WAAb,CAAJ,CAA+B,CAC3B,MAAO,EAAP,CACH,CACD,MAAOA,CAAAA,WAAP,CACH,CAN8B,CAM5B,CAACH,eAAD,CAN4B,CAA/B,CAOA,GAAI,CAACI,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACH,mBAAD,CAAnB,CAAL,CAAgD,CAC5C,MAAO,KAAP,CACH,CAEDK,OAAO,CAACC,IAAR,CAAa,wFAAb,EACA,GAAIL,eAAe,GAAK,CAAxB,CAA2B,CACvB,mBACI,KAAC,gBAAD,EACI,EAAE,CAAC,yCADP,CAEI,cAAc,CAAE,sBAFpB,CAGI,MAAM,CAAE,CAAEF,eAAe,CAAfA,eAAF,CAHZ,EADJ,CAOH,CACD,mBACI,KAAC,gBAAD,EACI,EAAE,CAAC,kCADP,CAEI,cAAc,CAAE,yEAFpB,CAGI,MAAM,CAAE,CAAEA,eAAe,CAAfA,eAAF,CAHZ,EADJ,CAOH,CA7BM","sourcesContent":["import React, { useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport const ExperienceYears = ({ experienceYears, codeExperienceYears }) => {\n    const experienceValue = useMemo(() => {\n        const numberValue = Number(experienceYears);\n        if (Number.isNaN(numberValue)) {\n            return 0;\n        }\n        return numberValue;\n    }, [experienceYears]);\n    if (!Number.isNaN(Number(codeExperienceYears))) {\n        return null;\n    }\n\n    console.warn('experienceYears is deprecated, please use codeExperienceYears and otherExperienceYears');\n    if (experienceValue === 0) {\n        return (\n            <FormattedMessage\n                id=\"Basics.Back.ExperienceYear.noExperience\"\n                defaultMessage={'No experience (yet!)'}\n                values={{ experienceYears }}\n            />\n        );\n    }\n    return (\n        <FormattedMessage\n            id=\"Basics.Back.ExperienceYear.value\"\n            defaultMessage={'{experienceYears, plural, one {# year} other {# years} }  of experience'}\n            values={{ experienceYears }}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}