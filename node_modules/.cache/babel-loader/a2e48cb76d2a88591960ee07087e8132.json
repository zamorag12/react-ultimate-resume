{"ast":null,"code":"// tslint:disable:only-arrow-functions\n// tslint:disable:object-literal-shorthand\n// tslint:disable:trailing-comma\n// tslint:disable:object-literal-sort-keys\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:max-line-length\n// tslint:disable:no-consecutive-blank-lines\n// tslint:disable:align\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )\n//\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\n\n\nimport { TYPE } from './types';\n\nvar SyntaxError =\n/** @class */\nfunction (_super) {\n  __extends(SyntaxError, _super);\n\n  function SyntaxError(message, expected, found, location) {\n    var _this = _super.call(this) || this;\n\n    _this.message = message;\n    _this.expected = expected;\n    _this.found = found;\n    _this.location = location;\n    _this.name = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(_this, SyntaxError);\n    }\n\n    return _this;\n  }\n\n  SyntaxError.buildMessage = function (expected, found) {\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n        return \"\\\\x0\" + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return \"\\\\x\" + hex(ch);\n      });\n    }\n\n    function classEscape(s) {\n      return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n        return \"\\\\x0\" + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return \"\\\\x\" + hex(ch);\n      });\n    }\n\n    function describeExpectation(expectation) {\n      switch (expectation.type) {\n        case \"literal\":\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n\n        case \"class\":\n          var escapedParts = expectation.parts.map(function (part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n\n        case \"any\":\n          return \"any character\";\n\n        case \"end\":\n          return \"end of input\";\n\n        case \"other\":\n          return expectation.description;\n      }\n    }\n\n    function describeExpected(expected1) {\n      var descriptions = expected1.map(describeExpectation);\n      var i;\n      var j;\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found1) {\n      return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  return SyntaxError;\n}(Error);\n\nexport { SyntaxError };\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n  var peg$FAILED = {};\n  var peg$startRuleFunctions = {\n    start: peg$parsestart\n  };\n  var peg$startRuleFunction = peg$parsestart;\n\n  var peg$c0 = function peg$c0(parts) {\n    return parts.join('');\n  };\n\n  var peg$c1 = function peg$c1(messageText) {\n    return __assign({\n      type: TYPE.literal,\n      value: messageText\n    }, insertLocation());\n  };\n\n  var peg$c2 = \"#\";\n  var peg$c3 = peg$literalExpectation(\"#\", false);\n\n  var peg$c4 = function peg$c4() {\n    return __assign({\n      type: TYPE.pound\n    }, insertLocation());\n  };\n\n  var peg$c5 = peg$otherExpectation(\"argumentElement\");\n  var peg$c6 = \"{\";\n  var peg$c7 = peg$literalExpectation(\"{\", false);\n  var peg$c8 = \"}\";\n  var peg$c9 = peg$literalExpectation(\"}\", false);\n\n  var peg$c10 = function peg$c10(value) {\n    return __assign({\n      type: TYPE.argument,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c11 = peg$otherExpectation(\"numberSkeletonId\");\n  var peg$c12 = /^['\\/{}]/;\n  var peg$c13 = peg$classExpectation([\"'\", \"/\", \"{\", \"}\"], false, false);\n  var peg$c14 = peg$anyExpectation();\n  var peg$c15 = peg$otherExpectation(\"numberSkeletonTokenOption\");\n  var peg$c16 = \"/\";\n  var peg$c17 = peg$literalExpectation(\"/\", false);\n\n  var peg$c18 = function peg$c18(option) {\n    return option;\n  };\n\n  var peg$c19 = peg$otherExpectation(\"numberSkeletonToken\");\n\n  var peg$c20 = function peg$c20(stem, options) {\n    return {\n      stem: stem,\n      options: options\n    };\n  };\n\n  var peg$c21 = function peg$c21(tokens) {\n    return __assign({\n      type: 0\n      /* number */\n      ,\n      tokens: tokens\n    }, insertLocation());\n  };\n\n  var peg$c22 = \"::\";\n  var peg$c23 = peg$literalExpectation(\"::\", false);\n\n  var peg$c24 = function peg$c24(skeleton) {\n    return skeleton;\n  };\n\n  var peg$c25 = function peg$c25() {\n    messageCtx.push('numberArgStyle');\n    return true;\n  };\n\n  var peg$c26 = function peg$c26(style) {\n    messageCtx.pop();\n    return style.replace(/\\s*$/, '');\n  };\n\n  var peg$c27 = \",\";\n  var peg$c28 = peg$literalExpectation(\",\", false);\n  var peg$c29 = \"number\";\n  var peg$c30 = peg$literalExpectation(\"number\", false);\n\n  var peg$c31 = function peg$c31(value, type, style) {\n    return __assign({\n      type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time,\n      style: style && style[2],\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c32 = \"'\";\n  var peg$c33 = peg$literalExpectation(\"'\", false);\n  var peg$c34 = /^[^']/;\n  var peg$c35 = peg$classExpectation([\"'\"], true, false);\n  var peg$c36 = /^[^a-zA-Z'{}]/;\n  var peg$c37 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"'\", \"{\", \"}\"], true, false);\n  var peg$c38 = /^[a-zA-Z]/;\n  var peg$c39 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n\n  var peg$c40 = function peg$c40(pattern) {\n    return __assign({\n      type: 1\n      /* dateTime */\n      ,\n      pattern: pattern\n    }, insertLocation());\n  };\n\n  var peg$c41 = function peg$c41() {\n    messageCtx.push('dateOrTimeArgStyle');\n    return true;\n  };\n\n  var peg$c42 = \"date\";\n  var peg$c43 = peg$literalExpectation(\"date\", false);\n  var peg$c44 = \"time\";\n  var peg$c45 = peg$literalExpectation(\"time\", false);\n  var peg$c46 = \"plural\";\n  var peg$c47 = peg$literalExpectation(\"plural\", false);\n  var peg$c48 = \"selectordinal\";\n  var peg$c49 = peg$literalExpectation(\"selectordinal\", false);\n  var peg$c50 = \"offset:\";\n  var peg$c51 = peg$literalExpectation(\"offset:\", false);\n\n  var peg$c52 = function peg$c52(value, pluralType, offset, options) {\n    return __assign({\n      type: TYPE.plural,\n      pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal',\n      value: value,\n      offset: offset ? offset[2] : 0,\n      options: options.reduce(function (all, _a) {\n        var id = _a.id,\n            value = _a.value,\n            optionLocation = _a.location;\n\n        if (id in all) {\n          error(\"Duplicate option \\\"\" + id + \"\\\" in plural element: \\\"\" + text() + \"\\\"\", location());\n        }\n\n        all[id] = {\n          value: value,\n          location: optionLocation\n        };\n        return all;\n      }, {})\n    }, insertLocation());\n  };\n\n  var peg$c53 = \"select\";\n  var peg$c54 = peg$literalExpectation(\"select\", false);\n\n  var peg$c55 = function peg$c55(value, options) {\n    return __assign({\n      type: TYPE.select,\n      value: value,\n      options: options.reduce(function (all, _a) {\n        var id = _a.id,\n            value = _a.value,\n            optionLocation = _a.location;\n\n        if (id in all) {\n          error(\"Duplicate option \\\"\" + id + \"\\\" in select element: \\\"\" + text() + \"\\\"\", location());\n        }\n\n        all[id] = {\n          value: value,\n          location: optionLocation\n        };\n        return all;\n      }, {})\n    }, insertLocation());\n  };\n\n  var peg$c56 = \"=\";\n  var peg$c57 = peg$literalExpectation(\"=\", false);\n\n  var peg$c58 = function peg$c58(id) {\n    messageCtx.push('select');\n    return true;\n  };\n\n  var peg$c59 = function peg$c59(id, value) {\n    messageCtx.pop();\n    return __assign({\n      id: id,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c60 = function peg$c60(id) {\n    messageCtx.push('plural');\n    return true;\n  };\n\n  var peg$c61 = function peg$c61(id, value) {\n    messageCtx.pop();\n    return __assign({\n      id: id,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c62 = peg$otherExpectation(\"whitespace\");\n  var peg$c63 = /^[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n  var peg$c64 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\xA0\", \"\\u1680\", [\"\\u2000\", \"\\u200A\"], \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\"], false, false);\n  var peg$c65 = peg$otherExpectation(\"syntax pattern\");\n  var peg$c66 = /^[!-\\/:-@[-\\^`{-~\\xA1-\\xA7\\xA9\\xAB\\xAC\\xAE\\xB0\\xB1\\xB6\\xBB\\xBF\\xD7\\xF7\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]/;\n  var peg$c67 = peg$classExpectation([[\"!\", \"/\"], [\":\", \"@\"], [\"[\", \"^\"], \"`\", [\"{\", \"~\"], [\"\\xA1\", \"\\xA7\"], \"\\xA9\", \"\\xAB\", \"\\xAC\", \"\\xAE\", \"\\xB0\", \"\\xB1\", \"\\xB6\", \"\\xBB\", \"\\xBF\", \"\\xD7\", \"\\xF7\", [\"\\u2010\", \"\\u2027\"], [\"\\u2030\", \"\\u203E\"], [\"\\u2041\", \"\\u2053\"], [\"\\u2055\", \"\\u205E\"], [\"\\u2190\", \"\\u245F\"], [\"\\u2500\", \"\\u2775\"], [\"\\u2794\", \"\\u2BFF\"], [\"\\u2E00\", \"\\u2E7F\"], [\"\\u3001\", \"\\u3003\"], [\"\\u3008\", \"\\u3020\"], \"\\u3030\", \"\\uFD3E\", \"\\uFD3F\", \"\\uFE45\", \"\\uFE46\"], false, false);\n  var peg$c68 = peg$otherExpectation(\"optional whitespace\");\n  var peg$c69 = peg$otherExpectation(\"number\");\n  var peg$c70 = \"-\";\n  var peg$c71 = peg$literalExpectation(\"-\", false);\n\n  var peg$c72 = function peg$c72(negative, num) {\n    return num ? negative ? -num : num : 0;\n  };\n\n  var peg$c73 = peg$otherExpectation(\"apostrophe\");\n  var peg$c74 = peg$otherExpectation(\"double apostrophes\");\n  var peg$c75 = \"''\";\n  var peg$c76 = peg$literalExpectation(\"''\", false);\n\n  var peg$c77 = function peg$c77() {\n    return \"'\";\n  };\n\n  var peg$c78 = function peg$c78(escapedChar, quotedChars) {\n    return escapedChar + quotedChars.replace(\"''\", \"'\");\n  };\n\n  var peg$c79 = function peg$c79(x) {\n    return x !== '{' && !(isInPluralOption() && x === '#') && !(isNestedMessageText() && x === '}');\n  };\n\n  var peg$c80 = \"\\n\";\n  var peg$c81 = peg$literalExpectation(\"\\n\", false);\n\n  var peg$c82 = function peg$c82(x) {\n    return x === '{' || x === '}' || isInPluralOption() && x === '#';\n  };\n\n  var peg$c83 = peg$otherExpectation(\"argNameOrNumber\");\n  var peg$c84 = peg$otherExpectation(\"argNumber\");\n  var peg$c85 = \"0\";\n  var peg$c86 = peg$literalExpectation(\"0\", false);\n\n  var peg$c87 = function peg$c87() {\n    return 0;\n  };\n\n  var peg$c88 = /^[1-9]/;\n  var peg$c89 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n  var peg$c90 = /^[0-9]/;\n  var peg$c91 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n\n  var peg$c92 = function peg$c92(digits) {\n    return parseInt(digits.join(''), 10);\n  };\n\n  var peg$c93 = peg$otherExpectation(\"argName\");\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }];\n  var peg$maxFailPos = 0;\n  var peg$maxFailExpected = [];\n  var peg$silentFails = 0;\n  var peg$result;\n\n  if (options.startRule !== undefined) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location1) {\n    location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n  }\n\n  function error(message, location1) {\n    location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location1);\n  }\n\n  function peg$literalExpectation(text1, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text1,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected1) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected1);\n  }\n\n  function peg$buildSimpleError(message, location1) {\n    return new SyntaxError(message, [], \"\", location1);\n  }\n\n  function peg$buildStructuredError(expected1, found, location1) {\n    return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n  }\n\n  function peg$parsestart() {\n    var s0;\n    s0 = peg$parsemessage();\n    return s0;\n  }\n\n  function peg$parsemessage() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parsemessageElement();\n\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsemessageElement();\n    }\n\n    return s0;\n  }\n\n  function peg$parsemessageElement() {\n    var s0;\n    s0 = peg$parseliteralElement();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseargumentElement();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsesimpleFormatElement();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsepluralElement();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselectElement();\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsepoundElement();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemessageText() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedoubleApostrophes();\n\n    if (s2 === peg$FAILED) {\n      s2 = peg$parsequotedString();\n\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseunquotedString();\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedoubleApostrophes();\n\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsequotedString();\n\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseunquotedString();\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c0(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseliteralElement() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parsemessageText();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsepoundElement() {\n    var s0, s1;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c2;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c3);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c4();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseargumentElement() {\n    var s0, s1, s2, s3, s4, s5;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 125) {\n              s5 = peg$c8;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c9);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c10(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c5);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonId() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    peg$silentFails++;\n    s4 = peg$parsewhiteSpace();\n\n    if (s4 === peg$FAILED) {\n      if (peg$c12.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c13);\n        }\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s4 === peg$FAILED) {\n      s3 = undefined;\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c14);\n        }\n      }\n\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n\n        if (s4 === peg$FAILED) {\n          if (peg$c12.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c13);\n            }\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c14);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c11);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonTokenOption() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 47) {\n      s1 = peg$c16;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c17);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeletonId();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c18(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c15);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonToken() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeletonId();\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsenumberSkeletonTokenOption();\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsenumberSkeletonTokenOption();\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c20(s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c19);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeleton() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsenumberSkeletonToken();\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsenumberSkeletonToken();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c21(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsenumberArgStyle() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c22) {\n      s1 = peg$c22;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeleton();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c24(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      peg$savedPos = peg$currPos;\n      s1 = peg$c25();\n\n      if (s1) {\n        s1 = undefined;\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsemessageText();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c26(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberFormatElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c27;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c28);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c29) {\n                  s7 = peg$c29;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c30);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c28);\n                      }\n                    }\n\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parsenumberArgStyle();\n\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c8;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c9);\n                          }\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c31(s3, s7, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeletonLiteral() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c32;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c33);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsedoubleApostrophes();\n\n      if (s3 === peg$FAILED) {\n        if (peg$c34.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c35);\n          }\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsedoubleApostrophes();\n\n          if (s3 === peg$FAILED) {\n            if (peg$c34.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c35);\n              }\n            }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c32;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c33);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      s1 = peg$parsedoubleApostrophes();\n\n      if (s1 === peg$FAILED) {\n        if (peg$c36.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c37);\n          }\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          s1 = peg$parsedoubleApostrophes();\n\n          if (s1 === peg$FAILED) {\n            if (peg$c36.test(input.charAt(peg$currPos))) {\n              s1 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c37);\n              }\n            }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeletonPattern() {\n    var s0, s1;\n    s0 = [];\n\n    if (peg$c38.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c39);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n\n        if (peg$c38.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c39);\n          }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeleton() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = [];\n    s3 = peg$parsedateTimeSkeletonLiteral();\n\n    if (s3 === peg$FAILED) {\n      s3 = peg$parsedateTimeSkeletonPattern();\n    }\n\n    if (s3 !== peg$FAILED) {\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsedateTimeSkeletonLiteral();\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsedateTimeSkeletonPattern();\n        }\n      }\n    } else {\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c40(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsedateOrTimeArgStyle() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c22) {\n      s1 = peg$c22;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedateTimeSkeleton();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c24(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      peg$savedPos = peg$currPos;\n      s1 = peg$c41();\n\n      if (s1) {\n        s1 = undefined;\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsemessageText();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c26(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateOrTimeFormatElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c27;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c28);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 4) === peg$c42) {\n                  s7 = peg$c42;\n                  peg$currPos += 4;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c43);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4) === peg$c44) {\n                    s7 = peg$c44;\n                    peg$currPos += 4;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c45);\n                    }\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c28);\n                      }\n                    }\n\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parsedateOrTimeArgStyle();\n\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c8;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c9);\n                          }\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c31(s3, s7, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesimpleFormatElement() {\n    var s0;\n    s0 = peg$parsenumberFormatElement();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedateOrTimeFormatElement();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c27;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c28);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c46) {\n                  s7 = peg$c46;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c47);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13) === peg$c48) {\n                    s7 = peg$c48;\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c49);\n                    }\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s9 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c28);\n                      }\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n\n                        if (input.substr(peg$currPos, 7) === peg$c50) {\n                          s12 = peg$c50;\n                          peg$currPos += 7;\n                        } else {\n                          s12 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c51);\n                          }\n                        }\n\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse_();\n\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parsenumber();\n\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n\n                          if (s12 !== peg$FAILED) {\n                            s13 = [];\n                            s14 = peg$parsepluralOption();\n\n                            if (s14 !== peg$FAILED) {\n                              while (s14 !== peg$FAILED) {\n                                s13.push(s14);\n                                s14 = peg$parsepluralOption();\n                              }\n                            } else {\n                              s13 = peg$FAILED;\n                            }\n\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                  s15 = peg$c8;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n\n                                  if (peg$silentFails === 0) {\n                                    peg$fail(peg$c9);\n                                  }\n                                }\n\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c52(s3, s7, s11, s13);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselectElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c27;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c28);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c53) {\n                  s7 = peg$c53;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c54);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s9 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c28);\n                      }\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$parseselectOption();\n\n                        if (s12 !== peg$FAILED) {\n                          while (s12 !== peg$FAILED) {\n                            s11.push(s12);\n                            s12 = peg$parseselectOption();\n                          }\n                        } else {\n                          s11 = peg$FAILED;\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n\n                          if (s12 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                              s13 = peg$c8;\n                              peg$currPos++;\n                            } else {\n                              s13 = peg$FAILED;\n\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$c9);\n                              }\n                            }\n\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c55(s3, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralRuleSelectValue() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s2 = peg$c56;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c57);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsenumber();\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseargName();\n    }\n\n    return s0;\n  }\n\n  function peg$parseselectOption() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseargName();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s4 = peg$c6;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c7);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s5 = peg$c58(s2);\n\n            if (s5) {\n              s5 = undefined;\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsemessage();\n\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 125) {\n                  s7 = peg$c8;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c9);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c59(s2, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralOption() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsepluralRuleSelectValue();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s4 = peg$c6;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c7);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s5 = peg$c60(s2);\n\n            if (s5) {\n              s5 = undefined;\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsemessage();\n\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 125) {\n                  s7 = peg$c8;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c9);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c61(s2, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhiteSpace() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (peg$c63.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c64);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c62);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepatternSyntax() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (peg$c66.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c67);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c65);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewhiteSpace();\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsewhiteSpace();\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c68);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s1 = peg$c70;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c71);\n      }\n    }\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseargNumber();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c72(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c69);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseapostrophe() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s0 = peg$c32;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c33);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c73);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedoubleApostrophes() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c75) {\n      s1 = peg$c75;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c76);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c77();\n    }\n\n    s0 = s1;\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c74);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsequotedString() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c32;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c33);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseescapedChar();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = [];\n\n        if (input.substr(peg$currPos, 2) === peg$c75) {\n          s5 = peg$c75;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c76);\n          }\n        }\n\n        if (s5 === peg$FAILED) {\n          if (peg$c34.test(input.charAt(peg$currPos))) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c35);\n            }\n          }\n        }\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n\n          if (input.substr(peg$currPos, 2) === peg$c75) {\n            s5 = peg$c75;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c76);\n            }\n          }\n\n          if (s5 === peg$FAILED) {\n            if (peg$c34.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c35);\n              }\n            }\n          }\n        }\n\n        if (s4 !== peg$FAILED) {\n          s3 = input.substring(s3, peg$currPos);\n        } else {\n          s3 = s4;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s4 = peg$c32;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c33);\n            }\n          }\n\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c78(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunquotedString() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.length > peg$currPos) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c14);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c79(s2);\n\n      if (s3) {\n        s3 = undefined;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s1 = peg$c80;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c81);\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseescapedChar() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.length > peg$currPos) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c14);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c82(s2);\n\n      if (s3) {\n        s3 = undefined;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseargNameOrNumber() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseargNumber();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseargName();\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c83);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseargNumber() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 48) {\n      s1 = peg$c85;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c86);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c87();\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (peg$c88.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c89);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n\n        if (peg$c90.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c91);\n          }\n        }\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n\n          if (peg$c90.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c91);\n            }\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c92(s1);\n      }\n\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c84);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseargName() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    peg$silentFails++;\n    s4 = peg$parsewhiteSpace();\n\n    if (s4 === peg$FAILED) {\n      s4 = peg$parsepatternSyntax();\n    }\n\n    peg$silentFails--;\n\n    if (s4 === peg$FAILED) {\n      s3 = undefined;\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c14);\n        }\n      }\n\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n\n        if (s4 === peg$FAILED) {\n          s4 = peg$parsepatternSyntax();\n        }\n\n        peg$silentFails--;\n\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c14);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c93);\n      }\n    }\n\n    return s0;\n  }\n\n  var messageCtx = ['root'];\n\n  function isNestedMessageText() {\n    return messageCtx.length > 1;\n  }\n\n  function isInPluralOption() {\n    return messageCtx[messageCtx.length - 1] === 'plural';\n  }\n\n  function insertLocation() {\n    return options && options.captureLocation ? {\n      location: location()\n    } : {};\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n\nexport var pegParse = peg$parse;","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/node_modules/intl-messageformat-parser/lib/parser.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","TYPE","SyntaxError","_super","message","expected","found","location","_this","name","Error","captureStackTrace","buildMessage","hex","ch","charCodeAt","toString","toUpperCase","literalEscape","replace","classEscape","describeExpectation","expectation","type","text","escapedParts","parts","map","part","isArray","inverted","description","describeExpected","expected1","descriptions","j","sort","slice","join","describeFound","found1","peg$parse","input","options","undefined","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c0","peg$c1","messageText","literal","value","insertLocation","peg$c2","peg$c3","peg$literalExpectation","peg$c4","pound","peg$c5","peg$otherExpectation","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","argument","peg$c11","peg$c12","peg$c13","peg$classExpectation","peg$c14","peg$anyExpectation","peg$c15","peg$c16","peg$c17","peg$c18","option","peg$c19","peg$c20","stem","peg$c21","tokens","peg$c22","peg$c23","peg$c24","skeleton","peg$c25","messageCtx","push","peg$c26","style","pop","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","number","date","time","peg$c32","peg$c33","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","pattern","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","pluralType","offset","plural","reduce","all","_a","id","optionLocation","error","peg$c53","peg$c54","peg$c55","select","peg$c56","peg$c57","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","peg$c63","peg$c64","peg$c65","peg$c66","peg$c67","peg$c68","peg$c69","peg$c70","peg$c71","peg$c72","negative","num","peg$c73","peg$c74","peg$c75","peg$c76","peg$c77","peg$c78","escapedChar","quotedChars","peg$c79","x","isInPluralOption","isNestedMessageText","peg$c80","peg$c81","peg$c82","peg$c83","peg$c84","peg$c85","peg$c86","peg$c87","peg$c88","peg$c89","peg$c90","peg$c91","peg$c92","digits","parseInt","peg$c93","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","peg$computeLocation","location1","peg$buildStructuredError","peg$buildSimpleError","text1","ignoreCase","peg$endExpectation","peg$computePosDetails","pos","details","startPos","endPos","startPosDetails","endPosDetails","end","peg$fail","s0","peg$parsemessage","s1","peg$parsemessageElement","peg$parseliteralElement","peg$parseargumentElement","peg$parsesimpleFormatElement","peg$parsepluralElement","peg$parseselectElement","peg$parsepoundElement","peg$parsemessageText","s2","peg$parsedoubleApostrophes","peg$parsequotedString","peg$parseunquotedString","s3","s4","s5","peg$parse_","peg$parseargNameOrNumber","peg$parsenumberSkeletonId","peg$parsewhiteSpace","test","charAt","peg$parsenumberSkeletonTokenOption","peg$parsenumberSkeletonToken","peg$parsenumberSkeleton","peg$parsenumberArgStyle","substr","peg$parsenumberFormatElement","s6","s7","s8","s9","s10","s11","s12","peg$parsedateTimeSkeletonLiteral","peg$parsedateTimeSkeletonPattern","peg$parsedateTimeSkeleton","peg$parsedateOrTimeArgStyle","peg$parsedateOrTimeFormatElement","s13","s14","s15","peg$parsenumber","peg$parsepluralOption","peg$parseselectOption","peg$parsepluralRuleSelectValue","peg$parseargName","peg$parsepatternSyntax","peg$parseargNumber","peg$parseapostrophe","peg$parseescapedChar","captureLocation","pegParse"],"mappings":"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","sourcesContent":["// tslint:disable:only-arrow-functions\n// tslint:disable:object-literal-shorthand\n// tslint:disable:trailing-comma\n// tslint:disable:object-literal-sort-keys\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:max-line-length\n// tslint:disable:no-consecutive-blank-lines\n// tslint:disable:align\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )\n//\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\nimport { TYPE, } from './types';\nvar SyntaxError = /** @class */ (function (_super) {\n    __extends(SyntaxError, _super);\n    function SyntaxError(message, expected, found, location) {\n        var _this = _super.call(this) || this;\n        _this.message = message;\n        _this.expected = expected;\n        _this.found = found;\n        _this.location = location;\n        _this.name = \"SyntaxError\";\n        if (typeof Error.captureStackTrace === \"function\") {\n            Error.captureStackTrace(_this, SyntaxError);\n        }\n        return _this;\n    }\n    SyntaxError.buildMessage = function (expected, found) {\n        function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n        }\n        function literalEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\"/g, \"\\\\\\\"\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function classEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\\]/g, \"\\\\]\")\n                .replace(/\\^/g, \"\\\\^\")\n                .replace(/-/g, \"\\\\-\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function describeExpectation(expectation) {\n            switch (expectation.type) {\n                case \"literal\":\n                    return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n                case \"class\":\n                    var escapedParts = expectation.parts.map(function (part) {\n                        return Array.isArray(part)\n                            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n                            : classEscape(part);\n                    });\n                    return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n                case \"any\":\n                    return \"any character\";\n                case \"end\":\n                    return \"end of input\";\n                case \"other\":\n                    return expectation.description;\n            }\n        }\n        function describeExpected(expected1) {\n            var descriptions = expected1.map(describeExpectation);\n            var i;\n            var j;\n            descriptions.sort();\n            if (descriptions.length > 0) {\n                for (i = 1, j = 1; i < descriptions.length; i++) {\n                    if (descriptions[i - 1] !== descriptions[i]) {\n                        descriptions[j] = descriptions[i];\n                        j++;\n                    }\n                }\n                descriptions.length = j;\n            }\n            switch (descriptions.length) {\n                case 1:\n                    return descriptions[0];\n                case 2:\n                    return descriptions[0] + \" or \" + descriptions[1];\n                default:\n                    return descriptions.slice(0, -1).join(\", \")\n                        + \", or \"\n                        + descriptions[descriptions.length - 1];\n            }\n        }\n        function describeFound(found1) {\n            return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n        }\n        return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    return SyntaxError;\n}(Error));\nexport { SyntaxError };\nfunction peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n    var peg$FAILED = {};\n    var peg$startRuleFunctions = { start: peg$parsestart };\n    var peg$startRuleFunction = peg$parsestart;\n    var peg$c0 = function (parts) {\n        return parts.join('');\n    };\n    var peg$c1 = function (messageText) {\n        return __assign({ type: TYPE.literal, value: messageText }, insertLocation());\n    };\n    var peg$c2 = \"#\";\n    var peg$c3 = peg$literalExpectation(\"#\", false);\n    var peg$c4 = function () {\n        return __assign({ type: TYPE.pound }, insertLocation());\n    };\n    var peg$c5 = peg$otherExpectation(\"argumentElement\");\n    var peg$c6 = \"{\";\n    var peg$c7 = peg$literalExpectation(\"{\", false);\n    var peg$c8 = \"}\";\n    var peg$c9 = peg$literalExpectation(\"}\", false);\n    var peg$c10 = function (value) {\n        return __assign({ type: TYPE.argument, value: value }, insertLocation());\n    };\n    var peg$c11 = peg$otherExpectation(\"numberSkeletonId\");\n    var peg$c12 = /^['\\/{}]/;\n    var peg$c13 = peg$classExpectation([\"'\", \"/\", \"{\", \"}\"], false, false);\n    var peg$c14 = peg$anyExpectation();\n    var peg$c15 = peg$otherExpectation(\"numberSkeletonTokenOption\");\n    var peg$c16 = \"/\";\n    var peg$c17 = peg$literalExpectation(\"/\", false);\n    var peg$c18 = function (option) { return option; };\n    var peg$c19 = peg$otherExpectation(\"numberSkeletonToken\");\n    var peg$c20 = function (stem, options) {\n        return { stem: stem, options: options };\n    };\n    var peg$c21 = function (tokens) {\n        return __assign({ type: 0 /* number */, tokens: tokens }, insertLocation());\n    };\n    var peg$c22 = \"::\";\n    var peg$c23 = peg$literalExpectation(\"::\", false);\n    var peg$c24 = function (skeleton) { return skeleton; };\n    var peg$c25 = function () { messageCtx.push('numberArgStyle'); return true; };\n    var peg$c26 = function (style) {\n        messageCtx.pop();\n        return style.replace(/\\s*$/, '');\n    };\n    var peg$c27 = \",\";\n    var peg$c28 = peg$literalExpectation(\",\", false);\n    var peg$c29 = \"number\";\n    var peg$c30 = peg$literalExpectation(\"number\", false);\n    var peg$c31 = function (value, type, style) {\n        return __assign({ type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time, style: style && style[2], value: value }, insertLocation());\n    };\n    var peg$c32 = \"'\";\n    var peg$c33 = peg$literalExpectation(\"'\", false);\n    var peg$c34 = /^[^']/;\n    var peg$c35 = peg$classExpectation([\"'\"], true, false);\n    var peg$c36 = /^[^a-zA-Z'{}]/;\n    var peg$c37 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"'\", \"{\", \"}\"], true, false);\n    var peg$c38 = /^[a-zA-Z]/;\n    var peg$c39 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n    var peg$c40 = function (pattern) {\n        return __assign({ type: 1 /* dateTime */, pattern: pattern }, insertLocation());\n    };\n    var peg$c41 = function () { messageCtx.push('dateOrTimeArgStyle'); return true; };\n    var peg$c42 = \"date\";\n    var peg$c43 = peg$literalExpectation(\"date\", false);\n    var peg$c44 = \"time\";\n    var peg$c45 = peg$literalExpectation(\"time\", false);\n    var peg$c46 = \"plural\";\n    var peg$c47 = peg$literalExpectation(\"plural\", false);\n    var peg$c48 = \"selectordinal\";\n    var peg$c49 = peg$literalExpectation(\"selectordinal\", false);\n    var peg$c50 = \"offset:\";\n    var peg$c51 = peg$literalExpectation(\"offset:\", false);\n    var peg$c52 = function (value, pluralType, offset, options) {\n        return __assign({ type: TYPE.plural, pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal', value: value, offset: offset ? offset[2] : 0, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, optionLocation = _a.location;\n                if (id in all) {\n                    error(\"Duplicate option \\\"\" + id + \"\\\" in plural element: \\\"\" + text() + \"\\\"\", location());\n                }\n                all[id] = {\n                    value: value,\n                    location: optionLocation\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c53 = \"select\";\n    var peg$c54 = peg$literalExpectation(\"select\", false);\n    var peg$c55 = function (value, options) {\n        return __assign({ type: TYPE.select, value: value, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, optionLocation = _a.location;\n                if (id in all) {\n                    error(\"Duplicate option \\\"\" + id + \"\\\" in select element: \\\"\" + text() + \"\\\"\", location());\n                }\n                all[id] = {\n                    value: value,\n                    location: optionLocation\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c56 = \"=\";\n    var peg$c57 = peg$literalExpectation(\"=\", false);\n    var peg$c58 = function (id) { messageCtx.push('select'); return true; };\n    var peg$c59 = function (id, value) {\n        messageCtx.pop();\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c60 = function (id) { messageCtx.push('plural'); return true; };\n    var peg$c61 = function (id, value) {\n        messageCtx.pop();\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c62 = peg$otherExpectation(\"whitespace\");\n    var peg$c63 = /^[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n    var peg$c64 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\xA0\", \"\\u1680\", [\"\\u2000\", \"\\u200A\"], \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\"], false, false);\n    var peg$c65 = peg$otherExpectation(\"syntax pattern\");\n    var peg$c66 = /^[!-\\/:-@[-\\^`{-~\\xA1-\\xA7\\xA9\\xAB\\xAC\\xAE\\xB0\\xB1\\xB6\\xBB\\xBF\\xD7\\xF7\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]/;\n    var peg$c67 = peg$classExpectation([[\"!\", \"/\"], [\":\", \"@\"], [\"[\", \"^\"], \"`\", [\"{\", \"~\"], [\"\\xA1\", \"\\xA7\"], \"\\xA9\", \"\\xAB\", \"\\xAC\", \"\\xAE\", \"\\xB0\", \"\\xB1\", \"\\xB6\", \"\\xBB\", \"\\xBF\", \"\\xD7\", \"\\xF7\", [\"\\u2010\", \"\\u2027\"], [\"\\u2030\", \"\\u203E\"], [\"\\u2041\", \"\\u2053\"], [\"\\u2055\", \"\\u205E\"], [\"\\u2190\", \"\\u245F\"], [\"\\u2500\", \"\\u2775\"], [\"\\u2794\", \"\\u2BFF\"], [\"\\u2E00\", \"\\u2E7F\"], [\"\\u3001\", \"\\u3003\"], [\"\\u3008\", \"\\u3020\"], \"\\u3030\", \"\\uFD3E\", \"\\uFD3F\", \"\\uFE45\", \"\\uFE46\"], false, false);\n    var peg$c68 = peg$otherExpectation(\"optional whitespace\");\n    var peg$c69 = peg$otherExpectation(\"number\");\n    var peg$c70 = \"-\";\n    var peg$c71 = peg$literalExpectation(\"-\", false);\n    var peg$c72 = function (negative, num) {\n        return num\n            ? negative\n                ? -num\n                : num\n            : 0;\n    };\n    var peg$c73 = peg$otherExpectation(\"apostrophe\");\n    var peg$c74 = peg$otherExpectation(\"double apostrophes\");\n    var peg$c75 = \"''\";\n    var peg$c76 = peg$literalExpectation(\"''\", false);\n    var peg$c77 = function () { return \"'\"; };\n    var peg$c78 = function (escapedChar, quotedChars) {\n        return escapedChar + quotedChars.replace(\"''\", \"'\");\n    };\n    var peg$c79 = function (x) {\n        return (x !== '{' &&\n            !(isInPluralOption() && x === '#') &&\n            !(isNestedMessageText() && x === '}'));\n    };\n    var peg$c80 = \"\\n\";\n    var peg$c81 = peg$literalExpectation(\"\\n\", false);\n    var peg$c82 = function (x) {\n        return x === '{' || x === '}' || (isInPluralOption() && x === '#');\n    };\n    var peg$c83 = peg$otherExpectation(\"argNameOrNumber\");\n    var peg$c84 = peg$otherExpectation(\"argNumber\");\n    var peg$c85 = \"0\";\n    var peg$c86 = peg$literalExpectation(\"0\", false);\n    var peg$c87 = function () { return 0; };\n    var peg$c88 = /^[1-9]/;\n    var peg$c89 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n    var peg$c90 = /^[0-9]/;\n    var peg$c91 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n    var peg$c92 = function (digits) {\n        return parseInt(digits.join(''), 10);\n    };\n    var peg$c93 = peg$otherExpectation(\"argName\");\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n    var peg$result;\n    if (options.startRule !== undefined) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n            throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n    function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n    }\n    function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n    function expected(description, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n    }\n    function error(message, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location1);\n    }\n    function peg$literalExpectation(text1, ignoreCase) {\n        return { type: \"literal\", text: text1, ignoreCase: ignoreCase };\n    }\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n    function peg$anyExpectation() {\n        return { type: \"any\" };\n    }\n    function peg$endExpectation() {\n        return { type: \"end\" };\n    }\n    function peg$otherExpectation(description) {\n        return { type: \"other\", description: description };\n    }\n    function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n            return details;\n        }\n        else {\n            p = pos - 1;\n            while (!peg$posDetailsCache[p]) {\n                p--;\n            }\n            details = peg$posDetailsCache[p];\n            details = {\n                line: details.line,\n                column: details.column\n            };\n            while (p < pos) {\n                if (input.charCodeAt(p) === 10) {\n                    details.line++;\n                    details.column = 1;\n                }\n                else {\n                    details.column++;\n                }\n                p++;\n            }\n            peg$posDetailsCache[pos] = details;\n            return details;\n        }\n    }\n    function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n            start: {\n                offset: startPos,\n                line: startPosDetails.line,\n                column: startPosDetails.column\n            },\n            end: {\n                offset: endPos,\n                line: endPosDetails.line,\n                column: endPosDetails.column\n            }\n        };\n    }\n    function peg$fail(expected1) {\n        if (peg$currPos < peg$maxFailPos) {\n            return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n            peg$maxFailPos = peg$currPos;\n            peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected1);\n    }\n    function peg$buildSimpleError(message, location1) {\n        return new SyntaxError(message, [], \"\", location1);\n    }\n    function peg$buildStructuredError(expected1, found, location1) {\n        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n    }\n    function peg$parsestart() {\n        var s0;\n        s0 = peg$parsemessage();\n        return s0;\n    }\n    function peg$parsemessage() {\n        var s0, s1;\n        s0 = [];\n        s1 = peg$parsemessageElement();\n        while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            s1 = peg$parsemessageElement();\n        }\n        return s0;\n    }\n    function peg$parsemessageElement() {\n        var s0;\n        s0 = peg$parseliteralElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargumentElement();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parsesimpleFormatElement();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parsepluralElement();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseselectElement();\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$parsepoundElement();\n                        }\n                    }\n                }\n            }\n        }\n        return s0;\n    }\n    function peg$parsemessageText() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsedoubleApostrophes();\n        if (s2 === peg$FAILED) {\n            s2 = peg$parsequotedString();\n            if (s2 === peg$FAILED) {\n                s2 = peg$parseunquotedString();\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsedoubleApostrophes();\n                if (s2 === peg$FAILED) {\n                    s2 = peg$parsequotedString();\n                    if (s2 === peg$FAILED) {\n                        s2 = peg$parseunquotedString();\n                    }\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c0(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parseliteralElement() {\n        var s0, s1;\n        s0 = peg$currPos;\n        s1 = peg$parsemessageText();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsepoundElement() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 35) {\n            s1 = peg$c2;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c3);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c4();\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parseargumentElement() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c6;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c7);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                            s5 = peg$c8;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c9);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c10(s3);\n                            s0 = s1;\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c5);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonId() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n        if (s4 === peg$FAILED) {\n            if (peg$c12.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c13);\n                }\n            }\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c14);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsewhiteSpace();\n                if (s4 === peg$FAILED) {\n                    if (peg$c12.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c13);\n                        }\n                    }\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c14);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c11);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonTokenOption() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 47) {\n            s1 = peg$c16;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c17);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c18(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c15);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonToken() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                s4 = peg$parsenumberSkeletonTokenOption();\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$parsenumberSkeletonTokenOption();\n                }\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c20(s2, s3);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c19);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeleton() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsenumberSkeletonToken();\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsenumberSkeletonToken();\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c21(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsenumberArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c22) {\n            s1 = peg$c22;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            peg$savedPos = peg$currPos;\n            s1 = peg$c25();\n            if (s1) {\n                s1 = undefined;\n            }\n            else {\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsemessageText();\n                if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c26(s2);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c6;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c7);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c27;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c28);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c29) {\n                                    s7 = peg$c29;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c30);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c27;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c28);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsenumberArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c8;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c9);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c31(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonLiteral() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c32;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c33);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsedoubleApostrophes();\n            if (s3 === peg$FAILED) {\n                if (peg$c34.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c35);\n                    }\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$parsedoubleApostrophes();\n                    if (s3 === peg$FAILED) {\n                        if (peg$c34.test(input.charAt(peg$currPos))) {\n                            s3 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s3 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c35);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c32;\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c33);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s1 = [s1, s2, s3];\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = [];\n            s1 = peg$parsedoubleApostrophes();\n            if (s1 === peg$FAILED) {\n                if (peg$c36.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c37);\n                    }\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                while (s1 !== peg$FAILED) {\n                    s0.push(s1);\n                    s1 = peg$parsedoubleApostrophes();\n                    if (s1 === peg$FAILED) {\n                        if (peg$c36.test(input.charAt(peg$currPos))) {\n                            s1 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c37);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonPattern() {\n        var s0, s1;\n        s0 = [];\n        if (peg$c38.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c39);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            while (s1 !== peg$FAILED) {\n                s0.push(s1);\n                if (peg$c38.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c39);\n                    }\n                }\n            }\n        }\n        else {\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeleton() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parsedateTimeSkeletonLiteral();\n        if (s3 === peg$FAILED) {\n            s3 = peg$parsedateTimeSkeletonPattern();\n        }\n        if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parsedateTimeSkeletonLiteral();\n                if (s3 === peg$FAILED) {\n                    s3 = peg$parsedateTimeSkeletonPattern();\n                }\n            }\n        }\n        else {\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            s1 = input.substring(s1, peg$currPos);\n        }\n        else {\n            s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c40(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsedateOrTimeArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c22) {\n            s1 = peg$c22;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsedateTimeSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            peg$savedPos = peg$currPos;\n            s1 = peg$c41();\n            if (s1) {\n                s1 = undefined;\n            }\n            else {\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsemessageText();\n                if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c26(s2);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsedateOrTimeFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c6;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c7);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c27;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c28);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 4) === peg$c42) {\n                                    s7 = peg$c42;\n                                    peg$currPos += 4;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c43);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 4) === peg$c44) {\n                                        s7 = peg$c44;\n                                        peg$currPos += 4;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c45);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c27;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c28);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsedateOrTimeArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c8;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c9);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c31(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsesimpleFormatElement() {\n        var s0;\n        s0 = peg$parsenumberFormatElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parsedateOrTimeFormatElement();\n        }\n        return s0;\n    }\n    function peg$parsepluralElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c6;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c7);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c27;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c28);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c46) {\n                                    s7 = peg$c46;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c47);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 13) === peg$c48) {\n                                        s7 = peg$c48;\n                                        peg$currPos += 13;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c49);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c27;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c28);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = peg$currPos;\n                                                if (input.substr(peg$currPos, 7) === peg$c50) {\n                                                    s12 = peg$c50;\n                                                    peg$currPos += 7;\n                                                }\n                                                else {\n                                                    s12 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c51);\n                                                    }\n                                                }\n                                                if (s12 !== peg$FAILED) {\n                                                    s13 = peg$parse_();\n                                                    if (s13 !== peg$FAILED) {\n                                                        s14 = peg$parsenumber();\n                                                        if (s14 !== peg$FAILED) {\n                                                            s12 = [s12, s13, s14];\n                                                            s11 = s12;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s11;\n                                                            s11 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s11;\n                                                        s11 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s11;\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 === peg$FAILED) {\n                                                    s11 = null;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        s13 = [];\n                                                        s14 = peg$parsepluralOption();\n                                                        if (s14 !== peg$FAILED) {\n                                                            while (s14 !== peg$FAILED) {\n                                                                s13.push(s14);\n                                                                s14 = peg$parsepluralOption();\n                                                            }\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            s14 = peg$parse_();\n                                                            if (s14 !== peg$FAILED) {\n                                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                                    s15 = peg$c8;\n                                                                    peg$currPos++;\n                                                                }\n                                                                else {\n                                                                    s15 = peg$FAILED;\n                                                                    if (peg$silentFails === 0) {\n                                                                        peg$fail(peg$c9);\n                                                                    }\n                                                                }\n                                                                if (s15 !== peg$FAILED) {\n                                                                    peg$savedPos = s0;\n                                                                    s1 = peg$c52(s3, s7, s11, s13);\n                                                                    s0 = s1;\n                                                                }\n                                                                else {\n                                                                    peg$currPos = s0;\n                                                                    s0 = peg$FAILED;\n                                                                }\n                                                            }\n                                                            else {\n                                                                peg$currPos = s0;\n                                                                s0 = peg$FAILED;\n                                                            }\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseselectElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c6;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c7);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c27;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c28);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c53) {\n                                    s7 = peg$c53;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c54);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c27;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c28);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = [];\n                                                s12 = peg$parseselectOption();\n                                                if (s12 !== peg$FAILED) {\n                                                    while (s12 !== peg$FAILED) {\n                                                        s11.push(s12);\n                                                        s12 = peg$parseselectOption();\n                                                    }\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        if (input.charCodeAt(peg$currPos) === 125) {\n                                                            s13 = peg$c8;\n                                                            peg$currPos++;\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                            if (peg$silentFails === 0) {\n                                                                peg$fail(peg$c9);\n                                                            }\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c55(s3, s11);\n                                                            s0 = s1;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralRuleSelectValue() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 61) {\n            s2 = peg$c56;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c57);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parsenumber();\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargName();\n        }\n        return s0;\n    }\n    function peg$parseselectOption() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargName();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c6;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c7);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c58(s2);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parsemessage();\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                    s7 = peg$c8;\n                                    peg$currPos++;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c9);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c59(s2, s6);\n                                    s0 = s1;\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralOption() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsepluralRuleSelectValue();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c6;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c7);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c60(s2);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parsemessage();\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                    s7 = peg$c8;\n                                    peg$currPos++;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c9);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c61(s2, s6);\n                                    s0 = s1;\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsewhiteSpace() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c63.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c64);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c62);\n            }\n        }\n        return s0;\n    }\n    function peg$parsepatternSyntax() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c66.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c67);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c65);\n            }\n        }\n        return s0;\n    }\n    function peg$parse_() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsewhiteSpace();\n        while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parsewhiteSpace();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c68);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumber() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c70;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c71);\n            }\n        }\n        if (s1 === peg$FAILED) {\n            s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargNumber();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c72(s1, s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c69);\n            }\n        }\n        return s0;\n    }\n    function peg$parseapostrophe() {\n        var s0, s1;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s0 = peg$c32;\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c33);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c73);\n            }\n        }\n        return s0;\n    }\n    function peg$parsedoubleApostrophes() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c75) {\n            s1 = peg$c75;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c76);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c77();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c74);\n            }\n        }\n        return s0;\n    }\n    function peg$parsequotedString() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c32;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c33);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseescapedChar();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$currPos;\n                s4 = [];\n                if (input.substr(peg$currPos, 2) === peg$c75) {\n                    s5 = peg$c75;\n                    peg$currPos += 2;\n                }\n                else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c76);\n                    }\n                }\n                if (s5 === peg$FAILED) {\n                    if (peg$c34.test(input.charAt(peg$currPos))) {\n                        s5 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c35);\n                        }\n                    }\n                }\n                while (s5 !== peg$FAILED) {\n                    s4.push(s5);\n                    if (input.substr(peg$currPos, 2) === peg$c75) {\n                        s5 = peg$c75;\n                        peg$currPos += 2;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c76);\n                        }\n                    }\n                    if (s5 === peg$FAILED) {\n                        if (peg$c34.test(input.charAt(peg$currPos))) {\n                            s5 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c35);\n                            }\n                        }\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s3 = input.substring(s3, peg$currPos);\n                }\n                else {\n                    s3 = s4;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                        s4 = peg$c32;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c33);\n                        }\n                    }\n                    if (s4 === peg$FAILED) {\n                        s4 = null;\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c78(s2, s3);\n                        s0 = s1;\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseunquotedString() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c14);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s3 = peg$c79(s2);\n            if (s3) {\n                s3 = undefined;\n            }\n            else {\n                s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 10) {\n                s1 = peg$c80;\n                peg$currPos++;\n            }\n            else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c81);\n                }\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parseescapedChar() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c14);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s3 = peg$c82(s2);\n            if (s3) {\n                s3 = undefined;\n            }\n            else {\n                s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parseargNameOrNumber() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseargNumber();\n        if (s1 === peg$FAILED) {\n            s1 = peg$parseargName();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c83);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargNumber() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 48) {\n            s1 = peg$c85;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c86);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c87();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            if (peg$c88.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c89);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                if (peg$c90.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c91);\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    if (peg$c90.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c91);\n                        }\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s2 = [s2, s3];\n                    s1 = s2;\n                }\n                else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c92(s1);\n            }\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c84);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargName() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n        if (s4 === peg$FAILED) {\n            s4 = peg$parsepatternSyntax();\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c14);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsewhiteSpace();\n                if (s4 === peg$FAILED) {\n                    s4 = peg$parsepatternSyntax();\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c14);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c93);\n            }\n        }\n        return s0;\n    }\n    var messageCtx = ['root'];\n    function isNestedMessageText() {\n        return messageCtx.length > 1;\n    }\n    function isInPluralOption() {\n        return messageCtx[messageCtx.length - 1] === 'plural';\n    }\n    function insertLocation() {\n        return options && options.captureLocation ? {\n            location: location()\n        } : {};\n    }\n    peg$result = peg$startRuleFunction();\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n    }\n    else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n            peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length\n            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n}\nexport var pegParse = peg$parse;\n"]},"metadata":{},"sourceType":"module"}