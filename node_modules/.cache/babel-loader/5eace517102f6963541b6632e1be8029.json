{"ast":null,"code":"import*as Yup from'yup';import{validationTranslations}from'../../../../../utils/validation_translations';import{dreamjobValidationTranslations}from'./validator_translations';import{hasOnlyFreelanceContract}from'../../../utils/has_only_freelance_contract';export var DreamJobValidationSchema=function DreamJobValidationSchema(formatMessage){return Yup.object({places:Yup.array().of(Yup.object().shape({name:Yup.string().min(5,formatMessage(validationTranslations.min,{min:5})).required(formatMessage(validationTranslations.required))})),contractTypes:Yup.array().test('is-not-empty',formatMessage(dreamjobValidationTranslations.atLeastOneContractType),function(value){return!!(value||[]).length;}).test('is-exclusif',formatMessage(dreamjobValidationTranslations.selectByGroup),function(value){return!(['permanent','fixedTerm','freelance'].filter(function(val){return value.includes(val);}).length&&['apprenticeship','internship'].filter(function(val){return value.includes(val);}).length);}),salary:Yup.number().when('contractTypes',{is:function is(contractType){return hasOnlyFreelanceContract(contractType);},then:Yup.number().nullable().notRequired(),otherwise:Yup.number().min(1,formatMessage(validationTranslations.minNumber,{min:1}))}),averageDailyRate:Yup.number().when('contractTypes',{is:function is(contractType){return hasOnlyFreelanceContract(contractType);},then:Yup.number().min(1,formatMessage(validationTranslations.minNumber,{min:1})),otherwise:Yup.number().nullable().notRequired()})});};export var validateDreamjobComplete=function validateDreamjobComplete(data){try{Yup.object({places:Yup.array().required(),contractTypes:Yup.array().required()}).validateSync(data);}catch(e){return false;}return true;};","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/dream_job/data/validator.js"],"names":["Yup","validationTranslations","dreamjobValidationTranslations","hasOnlyFreelanceContract","DreamJobValidationSchema","formatMessage","object","places","array","of","shape","name","string","min","required","contractTypes","test","atLeastOneContractType","value","length","selectByGroup","filter","val","includes","salary","number","when","is","contractType","then","nullable","notRequired","otherwise","minNumber","averageDailyRate","validateDreamjobComplete","data","validateSync","e"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { validationTranslations } from '../../../../../utils/validation_translations';\nimport { dreamjobValidationTranslations } from './validator_translations';\nimport { hasOnlyFreelanceContract } from '../../../utils/has_only_freelance_contract';\n\nexport const DreamJobValidationSchema = (formatMessage) =>\n    Yup.object({\n        places: Yup.array().of(\n            Yup.object().shape({\n                name: Yup.string()\n                    .min(5, formatMessage(validationTranslations.min, { min: 5 }))\n                    .required(formatMessage(validationTranslations.required))\n            })\n        ),\n        contractTypes: Yup.array()\n            .test(\n                'is-not-empty',\n                formatMessage(dreamjobValidationTranslations.atLeastOneContractType),\n                (value) => !!(value || []).length\n            )\n            .test(\n                'is-exclusif',\n                formatMessage(dreamjobValidationTranslations.selectByGroup),\n                (value) =>\n                    !(\n                        ['permanent', 'fixedTerm', 'freelance'].filter((val) => value.includes(val)).length &&\n                        ['apprenticeship', 'internship'].filter((val) => value.includes(val)).length\n                    )\n            ),\n        salary: Yup.number().when('contractTypes', {\n            is: (contractType) => hasOnlyFreelanceContract(contractType),\n            then: Yup.number().nullable().notRequired(),\n            otherwise: Yup.number().min(1, formatMessage(validationTranslations.minNumber, { min: 1 }))\n        }),\n        averageDailyRate: Yup.number().when('contractTypes', {\n            is: (contractType) => hasOnlyFreelanceContract(contractType),\n            then: Yup.number().min(1, formatMessage(validationTranslations.minNumber, { min: 1 })),\n            otherwise: Yup.number().nullable().notRequired()\n        })\n    });\n\nexport const validateDreamjobComplete = (data) => {\n    try {\n        Yup.object({\n            places: Yup.array().required(),\n            contractTypes: Yup.array().required()\n        }).validateSync(data);\n    } catch (e) {\n        return false;\n    }\n    return true;\n};\n"]},"metadata":{},"sourceType":"module"}