{"ast":null,"code":"import _defineProperty from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useEffect,useMemo,useRef,useState}from'react';import cn from'classnames';import{createUseStyles}from'react-jss';import{FormattedMessage,useIntl}from'react-intl';import{TextField,Typography}from'@welovedevs/ui';import{CheckboxGroup}from'../../../../../commons/checkbox_group/checkbox_group';import{CheckboxField}from'../../../../../commons/checkbox_field/checkbox_group';import{JobPerks}from'../../../../../../utils/enums/job_perks/job_perks_utils';import{EditDialogField}from'../../../../../commons/edit_dialog_field/edit_dialog_field';import{jobPerksTranslations}from'../../../../../../utils/enums/job_perks/job_perks_translations';import{PERKS_FIELD_OTHER_TEXTFIELD_TRANSITIONS_PROPS}from'./perks_field_transitions_props';import{styles}from'./perks_field_styles';import{AnimatePresence,motion}from'framer-motion';import{DEFAULT_SPRING_TYPE as spring}from'../../../../../../utils/framer_motion/common_types/spring_type';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyles=createUseStyles(styles);var checkboxGroupPerks=Object.values(JobPerks).filter(function(perk){return perk!==JobPerks.OTHER;});var PerksFieldComponent=function PerksFieldComponent(_ref){var error=_ref.error,perks=_ref.perks,onChange=_ref.onChange,setFieldValue=_ref.setFieldValue;var timerRef=useRef();var classes=useStyles();var _useIntl=useIntl(),formatMessage=_useIntl.formatMessage;var otherPerk=useMemo(function(){var _perks$JobPerks$OTHER;return(_perks$JobPerks$OTHER=perks[JobPerks.OTHER])!==null&&_perks$JobPerks$OTHER!==void 0?_perks$JobPerks$OTHER:null;},[perks]);var _useState=useState(otherPerk),_useState2=_slicedToArray(_useState,2),otherPerkValue=_useState2[0],setOtherPerkValue=_useState2[1];var checkedPerks=useMemo(function(){return Object.entries(perks||{}).filter(function(_ref2){var _ref3=_slicedToArray(_ref2,2),value=_ref3[1];return value===true;}).map(function(_ref4){var _ref5=_slicedToArray(_ref4,1),perk=_ref5[0];return perk;});},[perks]);var handleCheckboxGroupChange=useCallback(function(newPerks){return onChange(_objectSpread(_objectSpread({},newPerks.reduce(function(acc,perk){acc[perk]=true;return acc;},{})),{},_defineProperty({},JobPerks.OTHER,perks[JobPerks.OTHER])));},[perks]);var toggleOtherPerk=useCallback(function(){return setFieldValue(\"perks.\".concat(JobPerks.OTHER),typeof perks[JobPerks.OTHER]==='string'?null:'');},[perks]);useEffect(function(){return setOtherPerkValue(otherPerk);},[otherPerk]);var handleOtherPerkValueChange=useCallback(function(e){return setOtherPerkValue(e.target.value);},[]);useEffect(function(){if(timerRef.current){clearTimeout(timerRef.current);}if(typeof otherPerkValue!=='string'||!otherPerkValue.length){return;}timerRef.current=setTimeout(function(){setFieldValue(\"perks.\".concat(JobPerks.OTHER),otherPerkValue);},500);},[otherPerkValue]);return/*#__PURE__*/_jsxs(EditDialogField,{error:error,title:/*#__PURE__*/_jsx(FormattedMessage,{id:\"DreamJob.editDialog.perks.title\",defaultMessage:\"What perks are important to you ?\"}),children:[/*#__PURE__*/_jsx(CheckboxGroup,{rows:2,values:checkboxGroupPerks,translations:jobPerksTranslations,value:checkedPerks,name:\"perks\",variant:\"outlined\",onChange:handleCheckboxGroupChange}),/*#__PURE__*/_jsx(\"div\",{className:classes.othersCheckbox,children:/*#__PURE__*/_jsx(CheckboxField,{title:/*#__PURE__*/_jsx(Typography,{children:formatMessage(jobPerksTranslations.others)}),onClick:toggleOtherPerk,checked:otherPerk!==null,variant:\"outlined\",color:\"secondary\"})}),otherPerk!==null&&/*#__PURE__*/_jsx(AnimatePresence,{children:/*#__PURE__*/_jsx(TextField,{fullWidth:true,containerElement:motion.div,classes:{container:cn(classes.textField,classes.otherTextField)},onChange:handleOtherPerkValueChange,name:\"perks[\".concat(JobPerks.OTHER,\"]\"),value:otherPerkValue,variant:\"flat\",containerProps:{variants:PERKS_FIELD_OTHER_TEXTFIELD_TRANSITIONS_PROPS,initial:'initial',animate:'animate',exit:'exit',transition:spring}},\"other_field_\".concat(otherPerk?'visible':'invisible'))})]});};export var PerksField=PerksFieldComponent;","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/dream_job/dream_job_edit_dialog/perks_field/perks_field.jsx"],"names":["React","useCallback","useEffect","useMemo","useRef","useState","cn","createUseStyles","FormattedMessage","useIntl","TextField","Typography","CheckboxGroup","CheckboxField","JobPerks","EditDialogField","jobPerksTranslations","PERKS_FIELD_OTHER_TEXTFIELD_TRANSITIONS_PROPS","styles","AnimatePresence","motion","DEFAULT_SPRING_TYPE","spring","useStyles","checkboxGroupPerks","Object","values","filter","perk","OTHER","PerksFieldComponent","error","perks","onChange","setFieldValue","timerRef","classes","formatMessage","otherPerk","otherPerkValue","setOtherPerkValue","checkedPerks","entries","value","map","handleCheckboxGroupChange","newPerks","reduce","acc","toggleOtherPerk","handleOtherPerkValueChange","e","target","current","clearTimeout","length","setTimeout","othersCheckbox","others","div","container","textField","otherTextField","variants","initial","animate","exit","transition","PerksField"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { TextField, Typography } from '@welovedevs/ui';\nimport { CheckboxGroup } from '../../../../../commons/checkbox_group/checkbox_group';\nimport { CheckboxField } from '../../../../../commons/checkbox_field/checkbox_group';\nimport { JobPerks } from '../../../../../../utils/enums/job_perks/job_perks_utils';\nimport { EditDialogField } from '../../../../../commons/edit_dialog_field/edit_dialog_field';\n\nimport { jobPerksTranslations } from '../../../../../../utils/enums/job_perks/job_perks_translations';\n\nimport { PERKS_FIELD_OTHER_TEXTFIELD_TRANSITIONS_PROPS } from './perks_field_transitions_props';\n\nimport { styles } from './perks_field_styles';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { DEFAULT_SPRING_TYPE as spring } from '../../../../../../utils/framer_motion/common_types/spring_type';\n\nconst useStyles = createUseStyles(styles);\n\nconst checkboxGroupPerks = Object.values(JobPerks).filter((perk) => perk !== JobPerks.OTHER);\n\nconst PerksFieldComponent = ({ error, perks, onChange, setFieldValue }) => {\n    const timerRef = useRef();\n\n    const classes = useStyles();\n    const { formatMessage } = useIntl();\n    const otherPerk = useMemo(() => perks[JobPerks.OTHER] ?? null, [perks]);\n    const [otherPerkValue, setOtherPerkValue] = useState(otherPerk);\n\n    const checkedPerks = useMemo(\n        () =>\n            Object.entries(perks || {})\n                .filter(([, value]) => value === true)\n                .map(([perk]) => perk),\n        [perks]\n    );\n\n    const handleCheckboxGroupChange = useCallback(\n        (newPerks) =>\n            onChange({\n                ...newPerks.reduce((acc, perk) => {\n                    acc[perk] = true;\n                    return acc;\n                }, {}),\n                [JobPerks.OTHER]: perks[JobPerks.OTHER]\n            }),\n        [perks]\n    );\n\n    const toggleOtherPerk = useCallback(\n        () => setFieldValue(`perks.${JobPerks.OTHER}`, typeof perks[JobPerks.OTHER] === 'string' ? null : ''),\n        [perks]\n    );\n\n    useEffect(() => setOtherPerkValue(otherPerk), [otherPerk]);\n    const handleOtherPerkValueChange = useCallback((e) => setOtherPerkValue(e.target.value), []);\n    useEffect(() => {\n        if (timerRef.current) {\n            clearTimeout(timerRef.current);\n        }\n        if (typeof otherPerkValue !== 'string' || !otherPerkValue.length) {\n            return;\n        }\n\n        timerRef.current = setTimeout(() => {\n            setFieldValue(`perks.${JobPerks.OTHER}`, otherPerkValue);\n        }, 500);\n    }, [otherPerkValue]);\n\n    return (\n        <EditDialogField\n            error={error}\n            title={\n                <FormattedMessage\n                    id=\"DreamJob.editDialog.perks.title\"\n                    defaultMessage=\"What perks are important to you ?\"\n                />\n            }\n        >\n            <CheckboxGroup\n                rows={2}\n                values={checkboxGroupPerks}\n                translations={jobPerksTranslations}\n                value={checkedPerks}\n                name=\"perks\"\n                variant=\"outlined\"\n                onChange={handleCheckboxGroupChange}\n            />\n            <div className={classes.othersCheckbox}>\n                <CheckboxField\n                    title={<Typography>{formatMessage(jobPerksTranslations.others)}</Typography>}\n                    onClick={toggleOtherPerk}\n                    checked={otherPerk !== null}\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                />\n            </div>\n            {otherPerk !== null && (\n                <AnimatePresence>\n                    <TextField\n                        fullWidth\n                        key={`other_field_${otherPerk ? 'visible' : 'invisible'}`}\n                        containerElement={motion.div}\n                        classes={{ container: cn(classes.textField, classes.otherTextField) }}\n                        onChange={handleOtherPerkValueChange}\n                        name={`perks[${JobPerks.OTHER}]`}\n                        value={otherPerkValue}\n                        variant=\"flat\"\n                        containerProps={{\n                            variants: PERKS_FIELD_OTHER_TEXTFIELD_TRANSITIONS_PROPS,\n                            initial: 'initial',\n                            animate: 'animate',\n                            exit: 'exit',\n                            transition: spring\n                        }}\n                    />\n                </AnimatePresence>\n            )}\n        </EditDialogField>\n    );\n};\n\nexport const PerksField = PerksFieldComponent;\n"]},"metadata":{},"sourceType":"module"}