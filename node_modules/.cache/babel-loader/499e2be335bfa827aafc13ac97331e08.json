{"ast":null,"code":"import _toConsumableArray from \"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { invariant } from '@formatjs/intl-utils';\nimport { createError, escape } from '../utils';\nimport IntlMessageFormat from 'intl-messageformat';\n\nfunction setTimeZoneInOptions(opts, timeZone) {\n  return Object.keys(opts).reduce(function (all, k) {\n    all[k] = Object.assign({\n      timeZone: timeZone\n    }, opts[k]);\n    return all;\n  }, {});\n}\n\nfunction deepMergeOptions(opts1, opts2) {\n  var keys = Object.keys(Object.assign(Object.assign({}, opts1), opts2));\n  return keys.reduce(function (all, k) {\n    all[k] = Object.assign(Object.assign({}, opts1[k] || {}), opts2[k] || {});\n    return all;\n  }, {});\n}\n\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n  if (!timeZone) {\n    return f1;\n  }\n\n  var mfFormats = IntlMessageFormat.formats;\n  return Object.assign(Object.assign(Object.assign({}, mfFormats), f1), {\n    date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)),\n    time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone))\n  });\n}\n\nexport var prepareIntlMessageFormatHtmlOutput = function prepareIntlMessageFormatHtmlOutput(chunks) {\n  return React.createElement.apply(React, [React.Fragment, null].concat(_toConsumableArray(chunks)));\n};\nexport function formatMessage(_ref, state) {\n  var locale = _ref.locale,\n      formats = _ref.formats,\n      messages = _ref.messages,\n      defaultLocale = _ref.defaultLocale,\n      defaultFormats = _ref.defaultFormats,\n      onError = _ref.onError,\n      timeZone = _ref.timeZone;\n  var messageDescriptor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    id: ''\n  };\n  var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var id = messageDescriptor.id,\n      defaultMessage = messageDescriptor.defaultMessage; // `id` is a required field of a Message Descriptor.\n\n  invariant(!!id, '[React Intl] An `id` must be provided to format a message.');\n  var message = messages && messages[String(id)];\n  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n  var formattedMessageParts = [];\n\n  if (message) {\n    try {\n      var formatter = state.getMessageFormat(message, locale, formats, {\n        formatters: state\n      });\n      formattedMessageParts = formatter.formatHTMLMessage(values);\n    } catch (e) {\n      onError(createError(\"Error formatting message: \\\"\".concat(id, \"\\\" for locale: \\\"\").concat(locale, \"\\\"\") + (defaultMessage ? ', using default message as fallback.' : ''), e));\n    }\n  } else {\n    // This prevents warnings from littering the console in development\n    // when no `messages` are passed into the <IntlProvider> for the\n    // default locale, and a default message is in the source.\n    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {\n      onError(createError(\"Missing message: \\\"\".concat(id, \"\\\" for locale: \\\"\").concat(locale, \"\\\"\") + (defaultMessage ? ', using default message as fallback.' : '')));\n    }\n  }\n\n  if (!formattedMessageParts.length && defaultMessage) {\n    try {\n      var _formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n\n      formattedMessageParts = _formatter.formatHTMLMessage(values);\n    } catch (e) {\n      onError(createError(\"Error formatting the default message for: \\\"\".concat(id, \"\\\"\"), e));\n    }\n  }\n\n  if (!formattedMessageParts.length) {\n    onError(createError(\"Cannot format message: \\\"\".concat(id, \"\\\", \") + \"using message \".concat(message || defaultMessage ? 'source' : 'id', \" as fallback.\")));\n\n    if (typeof message === 'string') {\n      return message || defaultMessage || String(id);\n    }\n\n    return defaultMessage || String(id);\n  }\n\n  if (formattedMessageParts.length === 1 && typeof formattedMessageParts[0] === 'string') {\n    return formattedMessageParts[0] || defaultMessage || String(id);\n  }\n\n  return prepareIntlMessageFormatHtmlOutput(formattedMessageParts);\n}\nexport function formatHTMLMessage(config, state) {\n  var messageDescriptor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    id: ''\n  };\n  var rawValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // Process all the values before they are used when formatting the ICU\n  // Message string. Since the formatted message might be injected via\n  // `innerHTML`, all String-based values need to be HTML-escaped.\n  var escapedValues = Object.keys(rawValues).reduce(function (escaped, name) {\n    var value = rawValues[name];\n    escaped[name] = typeof value === 'string' ? escape(value) : value;\n    return escaped;\n  }, {});\n  return formatMessage(config, state, messageDescriptor, escapedValues);\n}","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/node_modules/react-intl/lib/formatters/message.js"],"names":["React","invariant","createError","escape","IntlMessageFormat","setTimeZoneInOptions","opts","timeZone","Object","keys","reduce","all","k","assign","deepMergeOptions","opts1","opts2","deepMergeFormatsAndSetTimeZone","f1","mfFormats","formats","date","time","prepareIntlMessageFormatHtmlOutput","chunks","createElement","Fragment","formatMessage","state","locale","messages","defaultLocale","defaultFormats","onError","messageDescriptor","id","values","defaultMessage","message","String","formattedMessageParts","formatter","getMessageFormat","formatters","formatHTMLMessage","e","toLowerCase","length","config","rawValues","escapedValues","escaped","name","value"],"mappings":"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","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { invariant } from '@formatjs/intl-utils';\nimport { createError, escape } from '../utils';\nimport IntlMessageFormat from 'intl-messageformat';\nfunction setTimeZoneInOptions(opts, timeZone) {\n    return Object.keys(opts).reduce((all, k) => {\n        all[k] = Object.assign({ timeZone }, opts[k]);\n        return all;\n    }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n    const keys = Object.keys(Object.assign(Object.assign({}, opts1), opts2));\n    return keys.reduce((all, k) => {\n        all[k] = Object.assign(Object.assign({}, (opts1[k] || {})), (opts2[k] || {}));\n        return all;\n    }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n    if (!timeZone) {\n        return f1;\n    }\n    const mfFormats = IntlMessageFormat.formats;\n    return Object.assign(Object.assign(Object.assign({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });\n}\nexport const prepareIntlMessageFormatHtmlOutput = (chunks) => React.createElement(React.Fragment, null, ...chunks);\nexport function formatMessage({ locale, formats, messages, defaultLocale, defaultFormats, onError, timeZone, }, state, messageDescriptor = { id: '' }, values = {}) {\n    const { id, defaultMessage } = messageDescriptor;\n    // `id` is a required field of a Message Descriptor.\n    invariant(!!id, '[React Intl] An `id` must be provided to format a message.');\n    const message = messages && messages[String(id)];\n    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n    let formattedMessageParts = [];\n    if (message) {\n        try {\n            const formatter = state.getMessageFormat(message, locale, formats, {\n                formatters: state,\n            });\n            formattedMessageParts = formatter.formatHTMLMessage(values);\n        }\n        catch (e) {\n            onError(createError(`Error formatting message: \"${id}\" for locale: \"${locale}\"` +\n                (defaultMessage ? ', using default message as fallback.' : ''), e));\n        }\n    }\n    else {\n        // This prevents warnings from littering the console in development\n        // when no `messages` are passed into the <IntlProvider> for the\n        // default locale, and a default message is in the source.\n        if (!defaultMessage ||\n            (locale && locale.toLowerCase() !== defaultLocale.toLowerCase())) {\n            onError(createError(`Missing message: \"${id}\" for locale: \"${locale}\"` +\n                (defaultMessage ? ', using default message as fallback.' : '')));\n        }\n    }\n    if (!formattedMessageParts.length && defaultMessage) {\n        try {\n            const formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n            formattedMessageParts = formatter.formatHTMLMessage(values);\n        }\n        catch (e) {\n            onError(createError(`Error formatting the default message for: \"${id}\"`, e));\n        }\n    }\n    if (!formattedMessageParts.length) {\n        onError(createError(`Cannot format message: \"${id}\", ` +\n            `using message ${message || defaultMessage ? 'source' : 'id'} as fallback.`));\n        if (typeof message === 'string') {\n            return message || defaultMessage || String(id);\n        }\n        return defaultMessage || String(id);\n    }\n    if (formattedMessageParts.length === 1 &&\n        typeof formattedMessageParts[0] === 'string') {\n        return formattedMessageParts[0] || defaultMessage || String(id);\n    }\n    return prepareIntlMessageFormatHtmlOutput(formattedMessageParts);\n}\nexport function formatHTMLMessage(config, state, messageDescriptor = { id: '' }, rawValues = {}) {\n    // Process all the values before they are used when formatting the ICU\n    // Message string. Since the formatted message might be injected via\n    // `innerHTML`, all String-based values need to be HTML-escaped.\n    const escapedValues = Object.keys(rawValues).reduce((escaped, name) => {\n        const value = rawValues[name];\n        escaped[name] = typeof value === 'string' ? escape(value) : value;\n        return escaped;\n    }, {});\n    return formatMessage(config, state, messageDescriptor, escapedValues);\n}\n"]},"metadata":{},"sourceType":"module"}