{"ast":null,"code":"import _objectSpread from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useContext,useMemo}from'react';import{ProfileCard}from'../../../commons/profile_card/profile_card';import{LanguagesFront}from'./languages_front/languages_front';import{LanguagesBack}from'./languages_back/languages_back';import{mapLanguagesFromJsonResume,mapLanguagesToJsonResume}from'./data/mapping';import{LanguagesCardEditDialog}from'./languages_edit_dialog/languages_card_edit_dialog';import{LanguageValidator,validateLanguagesComplete}from'./data/validator';import{DeveloperProfileContext}from'../../../../utils/context/contexts';import{SIDES}from'../../../commons/profile_card/profile_card_side/side';import{useMode}from'../../../hooks/use_mode';import{jsx as _jsx}from\"react/jsx-runtime\";var LanguagesCardComponent=function LanguagesCardComponent(_ref){var variant=_ref.variant,side=_ref.side;var _useMode=useMode(),_useMode2=_slicedToArray(_useMode,1),mode=_useMode2[0];var _useContext=useContext(DeveloperProfileContext),data=_useContext.data,isEditing=_useContext.isEditing,onEdit=_useContext.onEdit;var mappedData=useMemo(function(){return mapLanguagesFromJsonResume(data);},[data]);var onDialogEdited=useCallback(function(editedData){onEdit(mapLanguagesToJsonResume(editedData));},[onEdit]);var isComplete=useMemo(function(){return validateLanguagesComplete(mappedData);},[mappedData]);var currentSide=useMemo(function(){if(!isComplete&&!isEditing){return SIDES.FRONT;}return side;},[side,isComplete,isEditing]);if(!isComplete&&mode!=='edit'){return null;}return/*#__PURE__*/_jsx(ProfileCard,{kind:\"languages\",isEditingProfile:isEditing,isComplete:isComplete,data:mappedData,sides:{front:function front(props){return/*#__PURE__*/_jsx(LanguagesFront,_objectSpread({},props));},back:function back(props){return/*#__PURE__*/_jsx(LanguagesBack,_objectSpread({},props));}},variant:variant,side:currentSide,editDialog:{component:LanguagesCardEditDialog,validationSchema:LanguageValidator,onEdit:onDialogEdited}});};export var LanguagesCard=LanguagesCardComponent;","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/languages/languages_card.jsx"],"names":["React","useCallback","useContext","useMemo","ProfileCard","LanguagesFront","LanguagesBack","mapLanguagesFromJsonResume","mapLanguagesToJsonResume","LanguagesCardEditDialog","LanguageValidator","validateLanguagesComplete","DeveloperProfileContext","SIDES","useMode","LanguagesCardComponent","variant","side","mode","data","isEditing","onEdit","mappedData","onDialogEdited","editedData","isComplete","currentSide","FRONT","front","props","back","component","validationSchema","LanguagesCard"],"mappings":"iVAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,UAA7B,CAAyCC,OAAzC,KAAwD,OAAxD,CACA,OAASC,WAAT,KAA4B,4CAA5B,CACA,OAASC,cAAT,KAA+B,mCAA/B,CACA,OAASC,aAAT,KAA8B,iCAA9B,CACA,OAASC,0BAAT,CAAqCC,wBAArC,KAAqE,gBAArE,CACA,OAASC,uBAAT,KAAwC,oDAAxC,CACA,OAASC,iBAAT,CAA4BC,yBAA5B,KAA6D,kBAA7D,CACA,OAASC,uBAAT,KAAwC,oCAAxC,CACA,OAASC,KAAT,KAAsB,sDAAtB,CACA,OAASC,OAAT,KAAwB,yBAAxB,C,2CAEA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,MAAuB,IAApBC,CAAAA,OAAoB,MAApBA,OAAoB,CAAXC,IAAW,MAAXA,IAAW,cACnCH,OAAO,EAD4B,sCAC3CI,IAD2C,8BAEdhB,UAAU,CAACU,uBAAD,CAFI,CAE1CO,IAF0C,aAE1CA,IAF0C,CAEpCC,SAFoC,aAEpCA,SAFoC,CAEzBC,MAFyB,aAEzBA,MAFyB,CAGlD,GAAMC,CAAAA,UAAU,CAAGnB,OAAO,CAAC,iBAAMI,CAAAA,0BAA0B,CAACY,IAAD,CAAhC,EAAD,CAAyC,CAACA,IAAD,CAAzC,CAA1B,CAEA,GAAMI,CAAAA,cAAc,CAAGtB,WAAW,CAC9B,SAACuB,UAAD,CAAgB,CACZH,MAAM,CAACb,wBAAwB,CAACgB,UAAD,CAAzB,CAAN,CACH,CAH6B,CAI9B,CAACH,MAAD,CAJ8B,CAAlC,CAOA,GAAMI,CAAAA,UAAU,CAAGtB,OAAO,CAAC,iBAAMQ,CAAAA,yBAAyB,CAACW,UAAD,CAA/B,EAAD,CAA8C,CAACA,UAAD,CAA9C,CAA1B,CAEA,GAAMI,CAAAA,WAAW,CAAGvB,OAAO,CAAC,UAAM,CAC9B,GAAI,CAACsB,UAAD,EAAe,CAACL,SAApB,CAA+B,CAC3B,MAAOP,CAAAA,KAAK,CAACc,KAAb,CACH,CACD,MAAOV,CAAAA,IAAP,CACH,CAL0B,CAKxB,CAACA,IAAD,CAAOQ,UAAP,CAAmBL,SAAnB,CALwB,CAA3B,CAOA,GAAI,CAACK,UAAD,EAAeP,IAAI,GAAK,MAA5B,CAAoC,CAChC,MAAO,KAAP,CACH,CACD,mBACI,KAAC,WAAD,EACI,IAAI,CAAC,WADT,CAEI,gBAAgB,CAAEE,SAFtB,CAGI,UAAU,CAAEK,UAHhB,CAII,IAAI,CAAEH,UAJV,CAKI,KAAK,CAAE,CACHM,KAAK,CAAE,eAACC,KAAD,qBAAW,KAAC,cAAD,kBAAoBA,KAApB,EAAX,EADJ,CAEHC,IAAI,CAAE,cAACD,KAAD,qBAAW,KAAC,aAAD,kBAAmBA,KAAnB,EAAX,EAFH,CALX,CASI,OAAO,CAAEb,OATb,CAUI,IAAI,CAAEU,WAVV,CAWI,UAAU,CAAE,CACRK,SAAS,CAAEtB,uBADH,CAERuB,gBAAgB,CAAEtB,iBAFV,CAGRW,MAAM,CAAEE,cAHA,CAXhB,EADJ,CAmBH,CA3CD,CA6CA,MAAO,IAAMU,CAAAA,aAAa,CAAGlB,sBAAtB","sourcesContent":["import React, { useCallback, useContext, useMemo } from 'react';\nimport { ProfileCard } from '../../../commons/profile_card/profile_card';\nimport { LanguagesFront } from './languages_front/languages_front';\nimport { LanguagesBack } from './languages_back/languages_back';\nimport { mapLanguagesFromJsonResume, mapLanguagesToJsonResume } from './data/mapping';\nimport { LanguagesCardEditDialog } from './languages_edit_dialog/languages_card_edit_dialog';\nimport { LanguageValidator, validateLanguagesComplete } from './data/validator';\nimport { DeveloperProfileContext } from '../../../../utils/context/contexts';\nimport { SIDES } from '../../../commons/profile_card/profile_card_side/side';\nimport { useMode } from '../../../hooks/use_mode';\n\nconst LanguagesCardComponent = ({ variant, side }) => {\n    const [mode] = useMode();\n    const { data, isEditing, onEdit } = useContext(DeveloperProfileContext);\n    const mappedData = useMemo(() => mapLanguagesFromJsonResume(data), [data]);\n\n    const onDialogEdited = useCallback(\n        (editedData) => {\n            onEdit(mapLanguagesToJsonResume(editedData));\n        },\n        [onEdit]\n    );\n\n    const isComplete = useMemo(() => validateLanguagesComplete(mappedData), [mappedData]);\n\n    const currentSide = useMemo(() => {\n        if (!isComplete && !isEditing) {\n            return SIDES.FRONT;\n        }\n        return side;\n    }, [side, isComplete, isEditing]);\n\n    if (!isComplete && mode !== 'edit') {\n        return null;\n    }\n    return (\n        <ProfileCard\n            kind=\"languages\"\n            isEditingProfile={isEditing}\n            isComplete={isComplete}\n            data={mappedData}\n            sides={{\n                front: (props) => <LanguagesFront {...props} />,\n                back: (props) => <LanguagesBack {...props} />\n            }}\n            variant={variant}\n            side={currentSide}\n            editDialog={{\n                component: LanguagesCardEditDialog,\n                validationSchema: LanguageValidator,\n                onEdit: onDialogEdited\n            }}\n        />\n    );\n};\n\nexport const LanguagesCard = LanguagesCardComponent;\n"]},"metadata":{},"sourceType":"module"}