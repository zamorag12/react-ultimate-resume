{"ast":null,"code":"import _defineProperty from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useEffect,useMemo,useRef,useState}from'react';import cn from'classnames';import{createUseStyles}from'react-jss';import{AnimatePresence,motion}from'framer-motion';import{FormattedMessage,useIntl}from'react-intl';import{TextField,Typography}from'@welovedevs/ui';import{CheckboxGroup}from'../../../../../commons/checkbox_group/checkbox_group';import{CheckboxField}from'../../../../../commons/checkbox_field/checkbox_group';import{JobIssues}from'../../../../../../utils/enums/job_issues/job_issues_utils';import{EditDialogField}from'../../../../../commons/edit_dialog_field/edit_dialog_field';import{CURRENT_JOB_ISSUES_FIELD_OTHER_TEXTFIELD_TRANSITIONS_PROPS}from'./current_job_issues_field_props';import{translations}from'../../../../../../utils/enums/job_issues/job_issues_translations';import{styles}from'./current_job_issues_field_styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyles=createUseStyles(styles);var checkboxGroupCurrentJobIssues=Object.values(JobIssues).filter(function(key){return key!==JobIssues.OTHER;});var CurrentJobIssuesFieldComponent=function CurrentJobIssuesFieldComponent(_ref){var error=_ref.error,currentJobIssues=_ref.currentJobIssues,onChange=_ref.onChange,setFieldValue=_ref.setFieldValue;var timerRef=useRef();var classes=useStyles();var _useIntl=useIntl(),formatMessage=_useIntl.formatMessage;var otherCurrentJobIssue=useMemo(function(){var _currentJobIssues$Job;return(_currentJobIssues$Job=currentJobIssues[JobIssues.OTHER])!==null&&_currentJobIssues$Job!==void 0?_currentJobIssues$Job:null;},[currentJobIssues]);var _useState=useState(otherCurrentJobIssue),_useState2=_slicedToArray(_useState,2),otherCurrentJobIssueValue=_useState2[0],setOtherCurrentJobIssueValue=_useState2[1];var checkedCurrentJobIssues=useMemo(function(){return Object.entries(currentJobIssues||{}).filter(function(_ref2){var _ref3=_slicedToArray(_ref2,2),value=_ref3[1];return value===true;}).map(function(_ref4){var _ref5=_slicedToArray(_ref4,1),issue=_ref5[0];return issue;});},[currentJobIssues]);var handleCheckboxGroupChange=useCallback(function(newCurrentJobIssues){return onChange(_objectSpread(_objectSpread({},newCurrentJobIssues.reduce(function(acc,issue){acc[issue]=true;return acc;},{})),{},_defineProperty({},JobIssues.OTHER,currentJobIssues[JobIssues.OTHER])));},[currentJobIssues]);var toggleOtherCurrentJobIssue=useCallback(function(){return setFieldValue(\"currentJobIssues.\".concat(JobIssues.OTHER),typeof currentJobIssues[JobIssues.OTHER]==='string'?null:'');},[currentJobIssues]);useEffect(function(){return setOtherCurrentJobIssueValue(otherCurrentJobIssue);},[otherCurrentJobIssue]);var handleOtherJobIssueChange=useCallback(function(e){return setOtherCurrentJobIssueValue(e.target.value);},[]);useEffect(function(){if(timerRef.current){clearTimeout(timerRef.current);}if(typeof otherCurrentJobIssueValue!=='string'||!otherCurrentJobIssueValue.length){return;}timerRef.current=setTimeout(function(){setFieldValue(\"currentJobIssues.\".concat(JobIssues.OTHER),otherCurrentJobIssueValue);},500);},[otherCurrentJobIssueValue]);return/*#__PURE__*/_jsxs(EditDialogField,{error:error,title:/*#__PURE__*/_jsx(FormattedMessage,{id:\"DreamJob.editDialog.currentJobIssues.title\",defaultMessage:\"Which issues do you encounter in your current job?\"}),children:[/*#__PURE__*/_jsx(CheckboxGroup,{rows:2,values:checkboxGroupCurrentJobIssues,translations:translations,value:checkedCurrentJobIssues,name:\"currentJobIssues\",variant:\"outlined\",onChange:handleCheckboxGroupChange}),/*#__PURE__*/_jsx(\"div\",{className:classes.othersCheckbox,children:/*#__PURE__*/_jsx(CheckboxField,{title:/*#__PURE__*/_jsx(Typography,{children:formatMessage(translations.other)}),onClick:toggleOtherCurrentJobIssue,checked:otherCurrentJobIssue!==null,variant:\"outlined\",color:\"secondary\"})}),/*#__PURE__*/_jsx(AnimatePresence,{children:otherCurrentJobIssue!==null&&/*#__PURE__*/_jsx(TextField,{fullWidth:true,containerElement:motion.div,classes:{container:cn(classes.textField,classes.otherTextField)},onChange:handleOtherJobIssueChange,name:\"currentJobIssues[\".concat(JobIssues.OTHER,\"]\"),value:otherCurrentJobIssueValue,variant:\"flat\",containerProps:{variants:{CURRENT_JOB_ISSUES_FIELD_OTHER_TEXTFIELD_TRANSITIONS_PROPS:CURRENT_JOB_ISSUES_FIELD_OTHER_TEXTFIELD_TRANSITIONS_PROPS},initial:'initial',animate:'enter',exit:'exit'}})})]});};export var CurrentJobIssuesField=CurrentJobIssuesFieldComponent;","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/dream_job/dream_job_edit_dialog/current_job_issues_field/current_job_issues_field.jsx"],"names":["React","useCallback","useEffect","useMemo","useRef","useState","cn","createUseStyles","AnimatePresence","motion","FormattedMessage","useIntl","TextField","Typography","CheckboxGroup","CheckboxField","JobIssues","EditDialogField","CURRENT_JOB_ISSUES_FIELD_OTHER_TEXTFIELD_TRANSITIONS_PROPS","translations","styles","useStyles","checkboxGroupCurrentJobIssues","Object","values","filter","key","OTHER","CurrentJobIssuesFieldComponent","error","currentJobIssues","onChange","setFieldValue","timerRef","classes","formatMessage","otherCurrentJobIssue","otherCurrentJobIssueValue","setOtherCurrentJobIssueValue","checkedCurrentJobIssues","entries","value","map","issue","handleCheckboxGroupChange","newCurrentJobIssues","reduce","acc","toggleOtherCurrentJobIssue","handleOtherJobIssueChange","e","target","current","clearTimeout","length","setTimeout","othersCheckbox","other","div","container","textField","otherTextField","variants","initial","animate","exit","CurrentJobIssuesField"],"mappings":"4fAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,SAA7B,CAAwCC,OAAxC,CAAiDC,MAAjD,CAAyDC,QAAzD,KAAyE,OAAzE,CAEA,MAAOC,CAAAA,EAAP,KAAe,YAAf,CACA,OAASC,eAAT,KAAgC,WAAhC,CACA,OAASC,eAAT,CAA0BC,MAA1B,KAAwC,eAAxC,CAEA,OAASC,gBAAT,CAA2BC,OAA3B,KAA0C,YAA1C,CACA,OAASC,SAAT,CAAoBC,UAApB,KAAsC,gBAAtC,CACA,OAASC,aAAT,KAA8B,sDAA9B,CACA,OAASC,aAAT,KAA8B,sDAA9B,CACA,OAASC,SAAT,KAA0B,2DAA1B,CACA,OAASC,eAAT,KAAgC,4DAAhC,CAEA,OAASC,0DAAT,KAA2E,kCAA3E,CAEA,OAASC,YAAT,KAA6B,kEAA7B,CACA,OAASC,MAAT,KAAuB,mCAAvB,C,wFAEA,GAAMC,CAAAA,SAAS,CAAGd,eAAe,CAACa,MAAD,CAAjC,CACA,GAAME,CAAAA,6BAA6B,CAAGC,MAAM,CAACC,MAAP,CAAcR,SAAd,EAAyBS,MAAzB,CAAgC,SAACC,GAAD,QAASA,CAAAA,GAAG,GAAKV,SAAS,CAACW,KAA3B,EAAhC,CAAtC,CAEA,GAAMC,CAAAA,8BAA8B,CAAG,QAAjCA,CAAAA,8BAAiC,MAA0D,IAAvDC,CAAAA,KAAuD,MAAvDA,KAAuD,CAAhDC,gBAAgD,MAAhDA,gBAAgD,CAA9BC,QAA8B,MAA9BA,QAA8B,CAApBC,aAAoB,MAApBA,aAAoB,CAC7F,GAAMC,CAAAA,QAAQ,CAAG7B,MAAM,EAAvB,CACA,GAAM8B,CAAAA,OAAO,CAAGb,SAAS,EAAzB,CAF6F,aAGnEV,OAAO,EAH4D,CAGrFwB,aAHqF,UAGrFA,aAHqF,CAI7F,GAAMC,CAAAA,oBAAoB,CAAGjC,OAAO,CAAC,kEAAM2B,gBAAgB,CAACd,SAAS,CAACW,KAAX,CAAtB,+DAA2C,IAA3C,EAAD,CAAkD,CAACG,gBAAD,CAAlD,CAApC,CAJ6F,cAK3BzB,QAAQ,CAAC+B,oBAAD,CALmB,wCAKtFC,yBALsF,eAK3DC,4BAL2D,eAO7F,GAAMC,CAAAA,uBAAuB,CAAGpC,OAAO,CACnC,iBACIoB,CAAAA,MAAM,CAACiB,OAAP,CAAeV,gBAAgB,EAAI,EAAnC,EACKL,MADL,CACY,kDAAIgB,KAAJ,gBAAeA,CAAAA,KAAK,GAAK,IAAzB,EADZ,EAEKC,GAFL,CAES,kDAAEC,KAAF,gBAAaA,CAAAA,KAAb,EAFT,CADJ,EADmC,CAKnC,CAACb,gBAAD,CALmC,CAAvC,CAQA,GAAMc,CAAAA,yBAAyB,CAAG3C,WAAW,CACzC,SAAC4C,mBAAD,QACId,CAAAA,QAAQ,gCACDc,mBAAmB,CAACC,MAApB,CAA2B,SAACC,GAAD,CAAMJ,KAAN,CAAgB,CAC1CI,GAAG,CAACJ,KAAD,CAAH,CAAa,IAAb,CACA,MAAOI,CAAAA,GAAP,CACH,CAHE,CAGA,EAHA,CADC,wBAKH/B,SAAS,CAACW,KALP,CAKeG,gBAAgB,CAACd,SAAS,CAACW,KAAX,CAL/B,GADZ,EADyC,CASzC,CAACG,gBAAD,CATyC,CAA7C,CAYA,GAAMkB,CAAAA,0BAA0B,CAAG/C,WAAW,CAC1C,iBACI+B,CAAAA,aAAa,4BACWhB,SAAS,CAACW,KADrB,EAET,MAAOG,CAAAA,gBAAgB,CAACd,SAAS,CAACW,KAAX,CAAvB,GAA6C,QAA7C,CAAwD,IAAxD,CAA+D,EAFtD,CADjB,EAD0C,CAM1C,CAACG,gBAAD,CAN0C,CAA9C,CAQA5B,SAAS,CAAC,iBAAMoC,CAAAA,4BAA4B,CAACF,oBAAD,CAAlC,EAAD,CAA2D,CAACA,oBAAD,CAA3D,CAAT,CAEA,GAAMa,CAAAA,yBAAyB,CAAGhD,WAAW,CAAC,SAACiD,CAAD,QAAOZ,CAAAA,4BAA4B,CAACY,CAAC,CAACC,MAAF,CAASV,KAAV,CAAnC,EAAD,CAAsD,EAAtD,CAA7C,CAEAvC,SAAS,CAAC,UAAM,CACZ,GAAI+B,QAAQ,CAACmB,OAAb,CAAsB,CAClBC,YAAY,CAACpB,QAAQ,CAACmB,OAAV,CAAZ,CACH,CACD,GAAI,MAAOf,CAAAA,yBAAP,GAAqC,QAArC,EAAiD,CAACA,yBAAyB,CAACiB,MAAhF,CAAwF,CACpF,OACH,CAEDrB,QAAQ,CAACmB,OAAT,CAAmBG,UAAU,CAAC,UAAM,CAChCvB,aAAa,4BAAqBhB,SAAS,CAACW,KAA/B,EAAwCU,yBAAxC,CAAb,CACH,CAF4B,CAE1B,GAF0B,CAA7B,CAGH,CAXQ,CAWN,CAACA,yBAAD,CAXM,CAAT,CAaA,mBACI,MAAC,eAAD,EACI,KAAK,CAAER,KADX,CAEI,KAAK,cACD,KAAC,gBAAD,EACI,EAAE,CAAC,4CADP,CAEI,cAAc,CAAC,oDAFnB,EAHR,wBASI,KAAC,aAAD,EACI,IAAI,CAAE,CADV,CAEI,MAAM,CAAEP,6BAFZ,CAGI,YAAY,CAAEH,YAHlB,CAII,KAAK,CAAEoB,uBAJX,CAKI,IAAI,CAAC,kBALT,CAMI,OAAO,CAAC,UANZ,CAOI,QAAQ,CAAEK,yBAPd,EATJ,cAkBI,YAAK,SAAS,CAAEV,OAAO,CAACsB,cAAxB,uBACI,KAAC,aAAD,EACI,KAAK,cAAE,KAAC,UAAD,WAAarB,aAAa,CAAChB,YAAY,CAACsC,KAAd,CAA1B,EADX,CAEI,OAAO,CAAET,0BAFb,CAGI,OAAO,CAAEZ,oBAAoB,GAAK,IAHtC,CAII,OAAO,CAAC,UAJZ,CAKI,KAAK,CAAC,WALV,EADJ,EAlBJ,cA2BI,KAAC,eAAD,WACKA,oBAAoB,GAAK,IAAzB,eACG,KAAC,SAAD,EACI,SAAS,KADb,CAEI,gBAAgB,CAAE3B,MAAM,CAACiD,GAF7B,CAGI,OAAO,CAAE,CAAEC,SAAS,CAAErD,EAAE,CAAC4B,OAAO,CAAC0B,SAAT,CAAoB1B,OAAO,CAAC2B,cAA5B,CAAf,CAHb,CAII,QAAQ,CAAEZ,yBAJd,CAKI,IAAI,4BAAsBjC,SAAS,CAACW,KAAhC,KALR,CAMI,KAAK,CAAEU,yBANX,CAOI,OAAO,CAAC,MAPZ,CAQI,cAAc,CAAE,CACZyB,QAAQ,CAAE,CAAE5C,0DAA0D,CAA1DA,0DAAF,CADE,CAEZ6C,OAAO,CAAE,SAFG,CAGZC,OAAO,CAAE,OAHG,CAIZC,IAAI,CAAE,MAJM,CARpB,EAFR,EA3BJ,GADJ,CAiDH,CArGD,CAuGA,MAAO,IAAMC,CAAAA,qBAAqB,CAAGtC,8BAA9B","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { TextField, Typography } from '@welovedevs/ui';\nimport { CheckboxGroup } from '../../../../../commons/checkbox_group/checkbox_group';\nimport { CheckboxField } from '../../../../../commons/checkbox_field/checkbox_group';\nimport { JobIssues } from '../../../../../../utils/enums/job_issues/job_issues_utils';\nimport { EditDialogField } from '../../../../../commons/edit_dialog_field/edit_dialog_field';\n\nimport { CURRENT_JOB_ISSUES_FIELD_OTHER_TEXTFIELD_TRANSITIONS_PROPS } from './current_job_issues_field_props';\n\nimport { translations } from '../../../../../../utils/enums/job_issues/job_issues_translations';\nimport { styles } from './current_job_issues_field_styles';\n\nconst useStyles = createUseStyles(styles);\nconst checkboxGroupCurrentJobIssues = Object.values(JobIssues).filter((key) => key !== JobIssues.OTHER);\n\nconst CurrentJobIssuesFieldComponent = ({ error, currentJobIssues, onChange, setFieldValue }) => {\n    const timerRef = useRef();\n    const classes = useStyles();\n    const { formatMessage } = useIntl();\n    const otherCurrentJobIssue = useMemo(() => currentJobIssues[JobIssues.OTHER] ?? null, [currentJobIssues]);\n    const [otherCurrentJobIssueValue, setOtherCurrentJobIssueValue] = useState(otherCurrentJobIssue);\n\n    const checkedCurrentJobIssues = useMemo(\n        () =>\n            Object.entries(currentJobIssues || {})\n                .filter(([, value]) => value === true)\n                .map(([issue]) => issue),\n        [currentJobIssues]\n    );\n\n    const handleCheckboxGroupChange = useCallback(\n        (newCurrentJobIssues) =>\n            onChange({\n                ...newCurrentJobIssues.reduce((acc, issue) => {\n                    acc[issue] = true;\n                    return acc;\n                }, {}),\n                [JobIssues.OTHER]: currentJobIssues[JobIssues.OTHER]\n            }),\n        [currentJobIssues]\n    );\n\n    const toggleOtherCurrentJobIssue = useCallback(\n        () =>\n            setFieldValue(\n                `currentJobIssues.${JobIssues.OTHER}`,\n                typeof currentJobIssues[JobIssues.OTHER] === 'string' ? null : ''\n            ),\n        [currentJobIssues]\n    );\n    useEffect(() => setOtherCurrentJobIssueValue(otherCurrentJobIssue), [otherCurrentJobIssue]);\n\n    const handleOtherJobIssueChange = useCallback((e) => setOtherCurrentJobIssueValue(e.target.value), []);\n\n    useEffect(() => {\n        if (timerRef.current) {\n            clearTimeout(timerRef.current);\n        }\n        if (typeof otherCurrentJobIssueValue !== 'string' || !otherCurrentJobIssueValue.length) {\n            return;\n        }\n\n        timerRef.current = setTimeout(() => {\n            setFieldValue(`currentJobIssues.${JobIssues.OTHER}`, otherCurrentJobIssueValue);\n        }, 500);\n    }, [otherCurrentJobIssueValue]);\n\n    return (\n        <EditDialogField\n            error={error}\n            title={\n                <FormattedMessage\n                    id=\"DreamJob.editDialog.currentJobIssues.title\"\n                    defaultMessage=\"Which issues do you encounter in your current job?\"\n                />\n            }\n        >\n            <CheckboxGroup\n                rows={2}\n                values={checkboxGroupCurrentJobIssues}\n                translations={translations}\n                value={checkedCurrentJobIssues}\n                name=\"currentJobIssues\"\n                variant=\"outlined\"\n                onChange={handleCheckboxGroupChange}\n            />\n            <div className={classes.othersCheckbox}>\n                <CheckboxField\n                    title={<Typography>{formatMessage(translations.other)}</Typography>}\n                    onClick={toggleOtherCurrentJobIssue}\n                    checked={otherCurrentJobIssue !== null}\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                />\n            </div>\n            <AnimatePresence>\n                {otherCurrentJobIssue !== null && (\n                    <TextField\n                        fullWidth\n                        containerElement={motion.div}\n                        classes={{ container: cn(classes.textField, classes.otherTextField) }}\n                        onChange={handleOtherJobIssueChange}\n                        name={`currentJobIssues[${JobIssues.OTHER}]`}\n                        value={otherCurrentJobIssueValue}\n                        variant=\"flat\"\n                        containerProps={{\n                            variants: { CURRENT_JOB_ISSUES_FIELD_OTHER_TEXTFIELD_TRANSITIONS_PROPS },\n                            initial: 'initial',\n                            animate: 'enter',\n                            exit: 'exit'\n                        }}\n                    />\n                )}\n            </AnimatePresence>\n        </EditDialogField>\n    );\n};\n\nexport const CurrentJobIssuesField = CurrentJobIssuesFieldComponent;\n"]},"metadata":{},"sourceType":"module"}