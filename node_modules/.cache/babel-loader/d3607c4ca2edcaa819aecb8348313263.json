{"ast":null,"code":"import _objectSpread from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useMemo}from'react';import{createUseStyles}from'react-jss';import{FormattedMessage}from'react-intl';import{ProfileCard}from'../../../commons/profile_card/profile_card';import{ProjectsFront}from'./projects_front/projects_front';import{ProjectsBack}from'./projects_back/projects_back';import{AddButton}from'./add_button_rounded/add_button_rounded';import{ProjectDialog}from'./project_dialog/project_dialog';import{mapProjectsFromJsonResume}from'./data/mapping';import{DeveloperProfileContext}from'../../../../utils/context/contexts';import{validateProjectsComplete}from'./data/validator';import{SIDES}from'../../../commons/profile_card/profile_card_side/side';import{useMode}from'../../../hooks/use_mode';import{SortProjectsButton}from'./sort_projects_button/sort_projects_button';import{styles}from'./projects_card_styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyles=createUseStyles(styles);var ProjectsCardComponent=function ProjectsCardComponent(_ref){var variant=_ref.variant,side=_ref.side;var classes=useStyles();var _useMode=useMode(),_useMode2=_slicedToArray(_useMode,1),mode=_useMode2[0];var _useContext=useContext(DeveloperProfileContext),data=_useContext.data,isEditing=_useContext.isEditing;var mappedData=useMemo(function(){return mapProjectsFromJsonResume(data);},[data]);var isComplete=useMemo(function(){return validateProjectsComplete(mappedData);},[mappedData]);var currentSide=useMemo(function(){if(!isComplete&&!isEditing){return SIDES.FRONT;}return side;},[side,isComplete,isEditing]);if(!isComplete&&mode!=='edit'){return null;}return/*#__PURE__*/_jsx(ProfileCard,{kind:\"projects\",data:mappedData,isComplete:isComplete,isEditingProfile:isEditing,sides:{front:function front(props){return/*#__PURE__*/_jsx(ProjectsFront,_objectSpread({},props));},back:function back(props){return/*#__PURE__*/_jsx(ProjectsBack,_objectSpread({},props));}},variant:variant,side:currentSide,customEditAction:function customEditAction(props){var _data$projects;return/*#__PURE__*/_jsxs(\"div\",{className:classes.actions,children:[((_data$projects=data.projects)===null||_data$projects===void 0?void 0:_data$projects.length)>1&&/*#__PURE__*/_jsx(SortProjectsButton,{projects:data===null||data===void 0?void 0:data.projects,title:/*#__PURE__*/_jsx(FormattedMessage,{id:\"Projects.Actions.Sort\",defaultMessage:\"Sort projects\"})}),/*#__PURE__*/_jsx(AddButton,_objectSpread({title:/*#__PURE__*/_jsx(FormattedMessage,{id:\"Projects.Actions.Add\",defaultMessage:\"Add a project\"})},props))]});},editDialog:{component:ProjectDialog,data:{}}});};export var ProjectsCard=ProjectsCardComponent;","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/projects/projects_card.jsx"],"names":["React","useContext","useMemo","createUseStyles","FormattedMessage","ProfileCard","ProjectsFront","ProjectsBack","AddButton","ProjectDialog","mapProjectsFromJsonResume","DeveloperProfileContext","validateProjectsComplete","SIDES","useMode","SortProjectsButton","styles","useStyles","ProjectsCardComponent","variant","side","classes","mode","data","isEditing","mappedData","isComplete","currentSide","FRONT","front","props","back","actions","projects","length","component","ProjectsCard"],"mappings":"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","sourcesContent":["import React, { useContext, useMemo } from 'react';\n\nimport { createUseStyles } from 'react-jss';\nimport { FormattedMessage } from 'react-intl';\n\nimport { ProfileCard } from '../../../commons/profile_card/profile_card';\nimport { ProjectsFront } from './projects_front/projects_front';\nimport { ProjectsBack } from './projects_back/projects_back';\nimport { AddButton } from './add_button_rounded/add_button_rounded';\nimport { ProjectDialog } from './project_dialog/project_dialog';\n\nimport { mapProjectsFromJsonResume } from './data/mapping';\nimport { DeveloperProfileContext } from '../../../../utils/context/contexts';\nimport { validateProjectsComplete } from './data/validator';\nimport { SIDES } from '../../../commons/profile_card/profile_card_side/side';\nimport { useMode } from '../../../hooks/use_mode';\nimport { SortProjectsButton } from './sort_projects_button/sort_projects_button';\n\nimport { styles } from './projects_card_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst ProjectsCardComponent = ({ variant, side }) => {\n    const classes = useStyles();\n    const [mode] = useMode();\n    const { data, isEditing } = useContext(DeveloperProfileContext);\n    const mappedData = useMemo(() => mapProjectsFromJsonResume(data), [data]);\n\n    const isComplete = useMemo(() => validateProjectsComplete(mappedData), [mappedData]);\n\n    const currentSide = useMemo(() => {\n        if (!isComplete && !isEditing) {\n            return SIDES.FRONT;\n        }\n        return side;\n    }, [side, isComplete, isEditing]);\n\n    if (!isComplete && mode !== 'edit') {\n        return null;\n    }\n    return (\n        <ProfileCard\n            kind=\"projects\"\n            data={mappedData}\n            isComplete={isComplete}\n            isEditingProfile={isEditing}\n            sides={{\n                front: (props) => <ProjectsFront {...props} />,\n                back: (props) => <ProjectsBack {...props} />\n            }}\n            variant={variant}\n            side={currentSide}\n            customEditAction={(props) => (\n                <div className={classes.actions}>\n                    {data.projects?.length > 1 && (\n                        <SortProjectsButton\n                            projects={data?.projects}\n                            title={<FormattedMessage id=\"Projects.Actions.Sort\" defaultMessage=\"Sort projects\" />}\n                        />\n                    )}\n                    <AddButton\n                        title={<FormattedMessage id=\"Projects.Actions.Add\" defaultMessage=\"Add a project\" />}\n                        {...props}\n                    />\n                </div>\n            )}\n            editDialog={{\n                component: ProjectDialog,\n                data: {}\n            }}\n        />\n    );\n};\n\nexport const ProjectsCard = ProjectsCardComponent;\n"]},"metadata":{},"sourceType":"module"}