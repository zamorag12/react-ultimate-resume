{"ast":null,"code":"import _slicedToArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useEffect,useRef,useState}from'react';import cn from'classnames';import{createUseStyles}from'react-jss';import{useIntl}from'react-intl';import{List,ListItem,PopperCard,TextField,Typography}from'@welovedevs/ui';import{useGoogleMapsPredictions}from'../../hooks/location/use_google_maps_predictions';import{styles}from'./location_field_style';import{translations}from'./location_field_translations';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyles=createUseStyles(styles);var LocationFieldComponent=function LocationFieldComponent(_ref){var variant=_ref.variant,onLocationSelected=_ref.onLocationSelected,value=_ref.value,clearOnSelect=_ref.clearOnSelect,onChange=_ref.onChange,fullWidth=_ref.fullWidth;var classes=useStyles();var _useIntl=useIntl(),locale=_useIntl.locale,formatMessage=_useIntl.formatMessage;var inputRef=useRef();var _useState=useState(value),_useState2=_slicedToArray(_useState,2),input=_useState2[0],setInput=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),preventBlur=_useState4[0],setPreventBlur=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isFocused=_useState6[0],setIsFocused=_useState6[1];var _useGoogleMapsPredict=useGoogleMapsPredictions(input),predictions=_useGoogleMapsPredict.predictions;useEffect(function(){setInput(value);},[value]);var clear=useCallback(function(){return setInput('');},[]);var handleChange=useCallback(function(event){setInput(event.target.value);if(typeof onChange==='function'){event.persist();onChange(event);}},[onChange,onLocationSelected]);var onPredictionSelected=useCallback(function(placeId,description){if(typeof onLocationSelected==='function'){onLocationSelected({name:description,placeId:placeId,locale:locale});}setIsFocused(false);setInput('');},[locale,onLocationSelected]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(TextField,{fullWidth:fullWidth,className:classes.input,onClick:function onClick(e){return e.target&&e.target.select&&e.target.select();},value:input,onChange:handleChange,placeholder:formatMessage(translations.placeholder),onBlur:function onBlur(){if(!preventBlur){setIsFocused(false);}},onFocus:function onFocus(){return setIsFocused(true);},variant:variant||'outlined',label:formatMessage(translations.title),containerRef:inputRef}),isFocused&&/*#__PURE__*/_jsx(PredictionsList,{setPreventBlur:setPreventBlur,input:inputRef.current,predictions:predictions,classes:classes,onPredictionSelected:onPredictionSelected,locale:locale,setIsFocused:setIsFocused,setInput:setInput,clear:clear,clearOnSelect:clearOnSelect})]});};var PredictionsList=function PredictionsList(_ref2){var _ref2$predictions=_ref2.predictions,predictions=_ref2$predictions===void 0?[]:_ref2$predictions,setPreventBlur=_ref2.setPreventBlur,input=_ref2.input,onPredictionSelected=_ref2.onPredictionSelected,classes=_ref2.classes,setInput=_ref2.setInput;var onMouseUp=useCallback(function(){setPreventBlur(false);if(input&&input.focus){input.focus();}},[]);return/*#__PURE__*/_jsx(PopperCard,{open:true,anchorElement:input,classes:{popper:classes.popperCard},children:/*#__PURE__*/_jsx(List,{children:predictions.filter(function(item){return item;}).map(function(_ref3){var description=_ref3.description,placeId=_ref3.place_id;return/*#__PURE__*/_jsx(ListItem,{onMouseDown:function onMouseDown(){return setPreventBlur(true);},onMouseUp:onMouseUp,onClick:function onClick(){if(!placeId){return;}setInput(description);onPredictionSelected(placeId,description);},children:/*#__PURE__*/_jsx(Typography,{children:description||''})},\"prediction_\".concat(placeId));})})});};var StubLocationField=function StubLocationField(_ref4){var variant=_ref4.variant,onLocationSelected=_ref4.onLocationSelected,value=_ref4.value,clearOnSelect=_ref4.clearOnSelect,onChange=_ref4.onChange,fullWidth=_ref4.fullWidth;var _useIntl2=useIntl(),formatMessage=_useIntl2.formatMessage;var _useState7=useState(value),_useState8=_slicedToArray(_useState7,2),input=_useState8[0],setInput=_useState8[1];useEffect(function(){setInput(value);},[value]);var handleChange=useCallback(function(e){setInput(e.target.value);if(typeof onChange==='function'){e.persist();onChange(e);}},[onChange]);var onKeyDown=useCallback(function(e){if(e.keyCode===13){onLocationSelected({name:input});if(clearOnSelect){setInput('');}}},[onLocationSelected,input]);return/*#__PURE__*/_jsx(TextField,{variant:variant||'outlined',value:input,onChange:handleChange,onKeyDown:onKeyDown,placeholder:formatMessage(translations.stubPlaceholder),clearOnSelect:clearOnSelect,fullWidth:fullWidth});};export var LocationField=function LocationField(_ref5){var variant=_ref5.variant,onLocationSelected=_ref5.onLocationSelected,value=_ref5.value,clearOnSelect=_ref5.clearOnSelect,onChange=_ref5.onChange,fullWidth=_ref5.fullWidth,_ref5$classes=_ref5.classes,receivedClasses=_ref5$classes===void 0?{}:_ref5$classes;var _useGoogleMapsPredict2=useGoogleMapsPredictions(),ready=_useGoogleMapsPredict2.ready;var classes=useStyles();if(!ready){return/*#__PURE__*/_jsx(\"div\",{className:cn(classes.container,receivedClasses.container),children:/*#__PURE__*/_jsx(StubLocationField,{variant:variant,onLocationSelected:onLocationSelected,value:value,clearOnSelect:clearOnSelect,onChange:onChange,fullWidth:fullWidth,classes:classes})});}return/*#__PURE__*/_jsx(\"div\",{className:cn(classes.container,receivedClasses.container),children:/*#__PURE__*/_jsx(LocationFieldComponent,{variant:variant,onLocationSelected:onLocationSelected,value:value,clearOnSelect:clearOnSelect,onChange:onChange,fullWidth:fullWidth,classes:classes})});};","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/commons/location_field/location_field.jsx"],"names":["React","useCallback","useEffect","useRef","useState","cn","createUseStyles","useIntl","List","ListItem","PopperCard","TextField","Typography","useGoogleMapsPredictions","styles","translations","useStyles","LocationFieldComponent","variant","onLocationSelected","value","clearOnSelect","onChange","fullWidth","classes","locale","formatMessage","inputRef","input","setInput","preventBlur","setPreventBlur","isFocused","setIsFocused","predictions","clear","handleChange","event","target","persist","onPredictionSelected","placeId","description","name","e","select","placeholder","title","current","PredictionsList","onMouseUp","focus","popper","popperCard","filter","item","map","place_id","StubLocationField","onKeyDown","keyCode","stubPlaceholder","LocationField","receivedClasses","ready","container"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { useIntl } from 'react-intl';\n\nimport { List, ListItem, PopperCard, TextField, Typography } from '@welovedevs/ui';\n\nimport { useGoogleMapsPredictions } from '../../hooks/location/use_google_maps_predictions';\n\nimport { styles } from './location_field_style';\nimport { translations } from './location_field_translations';\n\nconst useStyles = createUseStyles(styles);\n\nconst LocationFieldComponent = ({ variant, onLocationSelected, value, clearOnSelect, onChange, fullWidth }) => {\n    const classes = useStyles();\n    const { locale, formatMessage } = useIntl();\n    const inputRef = useRef();\n    const [input, setInput] = useState(value);\n    const [preventBlur, setPreventBlur] = useState(false);\n    const [isFocused, setIsFocused] = useState(false);\n    const { predictions } = useGoogleMapsPredictions(input);\n\n    useEffect(() => {\n        setInput(value);\n    }, [value]);\n\n    const clear = useCallback(() => setInput(''), []);\n\n    const handleChange = useCallback(\n        (event) => {\n            setInput(event.target.value);\n            if (typeof onChange === 'function') {\n                event.persist();\n                onChange(event);\n            }\n        },\n        [onChange, onLocationSelected]\n    );\n\n    const onPredictionSelected = useCallback(\n        (placeId, description) => {\n            if (typeof onLocationSelected === 'function') {\n                onLocationSelected({ name: description, placeId, locale });\n            }\n            setIsFocused(false);\n            setInput('');\n        },\n        [locale, onLocationSelected]\n    );\n\n    return (\n        <>\n            <TextField\n                fullWidth={fullWidth}\n                className={classes.input}\n                onClick={(e) => e.target && e.target.select && e.target.select()}\n                value={input}\n                onChange={handleChange}\n                placeholder={formatMessage(translations.placeholder)}\n                onBlur={() => {\n                    if (!preventBlur) {\n                        setIsFocused(false);\n                    }\n                }}\n                onFocus={() => setIsFocused(true)}\n                variant={variant || 'outlined'}\n                label={formatMessage(translations.title)}\n                containerRef={inputRef}\n            />\n            {isFocused && (\n                <PredictionsList\n                    setPreventBlur={setPreventBlur}\n                    input={inputRef.current}\n                    {...{\n                        predictions,\n                        classes,\n                        onPredictionSelected,\n                        locale,\n                        setIsFocused,\n                        setInput,\n                        clear,\n                        clearOnSelect\n                    }}\n                />\n            )}\n        </>\n    );\n};\n\nconst PredictionsList = ({ predictions = [], setPreventBlur, input, onPredictionSelected, classes, setInput }) => {\n    const onMouseUp = useCallback(() => {\n        setPreventBlur(false);\n        if (input && input.focus) {\n            input.focus();\n        }\n    }, []);\n    return (\n        <PopperCard\n            open\n            anchorElement={input}\n            classes={{\n                popper: classes.popperCard\n            }}\n        >\n            <List>\n                {predictions\n                    .filter((item) => item)\n                    .map(({ description, place_id: placeId }) => (\n                        <ListItem\n                            key={`prediction_${placeId}`}\n                            onMouseDown={() => setPreventBlur(true)}\n                            onMouseUp={onMouseUp}\n                            onClick={() => {\n                                if (!placeId) {\n                                    return;\n                                }\n                                setInput(description);\n                                onPredictionSelected(placeId, description);\n                            }}\n                        >\n                            <Typography>{description || ''}</Typography>\n                        </ListItem>\n                    ))}\n            </List>\n        </PopperCard>\n    );\n};\nconst StubLocationField = ({ variant, onLocationSelected, value, clearOnSelect, onChange, fullWidth }) => {\n    const { formatMessage } = useIntl();\n    const [input, setInput] = useState(value);\n\n    useEffect(() => {\n        setInput(value);\n    }, [value]);\n\n    const handleChange = useCallback(\n        (e) => {\n            setInput(e.target.value);\n            if (typeof onChange === 'function') {\n                e.persist();\n                onChange(e);\n            }\n        },\n        [onChange]\n    );\n    const onKeyDown = useCallback(\n        (e) => {\n            if (e.keyCode === 13) {\n                onLocationSelected({ name: input });\n                if (clearOnSelect) {\n                    setInput('');\n                }\n            }\n        },\n        [onLocationSelected, input]\n    );\n    return (\n        <TextField\n            variant={variant || 'outlined'}\n            value={input}\n            onChange={handleChange}\n            onKeyDown={onKeyDown}\n            placeholder={formatMessage(translations.stubPlaceholder)}\n            clearOnSelect={clearOnSelect}\n            fullWidth={fullWidth}\n        />\n    );\n};\n\nexport const LocationField = ({\n    variant,\n    onLocationSelected,\n    value,\n    clearOnSelect,\n    onChange,\n    fullWidth,\n    classes: receivedClasses = {}\n}) => {\n    const { ready } = useGoogleMapsPredictions();\n    const classes = useStyles();\n\n    if (!ready) {\n        return (\n            <div className={cn(classes.container, receivedClasses.container)}>\n                <StubLocationField\n                    variant={variant}\n                    onLocationSelected={onLocationSelected}\n                    value={value}\n                    clearOnSelect={clearOnSelect}\n                    onChange={onChange}\n                    fullWidth={fullWidth}\n                    classes={classes}\n                />\n            </div>\n        );\n    }\n    return (\n        <div className={cn(classes.container, receivedClasses.container)}>\n            <LocationFieldComponent\n                variant={variant}\n                onLocationSelected={onLocationSelected}\n                value={value}\n                clearOnSelect={clearOnSelect}\n                onChange={onChange}\n                fullWidth={fullWidth}\n                classes={classes}\n            />\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}