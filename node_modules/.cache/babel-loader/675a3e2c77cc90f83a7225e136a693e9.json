{"ast":null,"code":"/**\n * values.js - Get the tints and shades of a color\n * @version v1.1.1\n * @link http://noeldelgado.github.io/values.js/\n * @license MIT\n */\n(function () {\n  var Utils = {\n    reHash: new RegExp('^#'),\n    reHEX: new RegExp('^(#)?([0-9a-fA-F]{3})([0-9a-fA-F]{3})?$'),\n    reRGB: new RegExp('rgba?\\\\s*\\\\((\\\\d+)\\\\,\\\\s*(\\\\d+)\\\\,\\\\s*(\\\\d+)(,\\\\s*((\\\\d+)?(\\\\.\\\\d+)?))?\\\\)', 'i'),\n    reHSL: new RegExp('hsla?\\\\((\\\\d+),\\\\s*([\\\\d.]+)%,\\\\s*([\\\\d.]+)%,?\\\\s*(?:0?(\\\\.\\\\d+)?|1(\\\\.0)?)?\\\\)', 'i'),\n    isHEX: function isHEX(value) {\n      return this.reHEX.test(value);\n    },\n    isRGB: function isRGB(value) {\n      var rgb = value.match(this.reRGB);\n\n      if (rgb) {\n        if (rgb[1] <= 255 && rgb[2] <= 255 && rgb[3] <= 255) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    isHSL: function isHSL(value) {\n      var hsl = value.match(this.reHSL);\n\n      if (hsl) {\n        if (hsl[1] <= 360 && hsl[2] <= 100 && hsl[3] <= 100) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    HEXtoRGB: function HEXtoRGB(hex) {\n      hex = hex.replace('#', '');\n\n      if (hex.length === 3) {\n        var h1 = hex.charAt(0),\n            h2 = hex.charAt(1),\n            h3 = hex.charAt(2);\n        hex = h1 + h1 + h2 + h2 + h3 + h3;\n      }\n\n      var bw = parseInt(hex, 16);\n      return {\n        r: bw >> 16 & 255,\n        g: bw >> 8 & 255,\n        b: bw & 255\n      };\n    },\n    RGBtoHEX: function RGBtoHEX(r, g, b) {\n      return (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1);\n    },\n    RGBtoHSL: function RGBtoHSL(r, g, b) {\n      var min, max, h, s, l;\n      r = r / 255;\n      g = g / 255;\n      b = b / 255;\n      max = Math.max(r, g, b);\n      min = Math.min(r, g, b);\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0;\n      } else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n        if (max === r) {\n          h = (g - b) / d + (g < b ? 6 : 0);\n        } else if (max === g) {\n          h = (b - r) / d + 2;\n        } else if (max === b) {\n          h = (r - g) / d + 4;\n        }\n\n        h /= 6;\n      }\n\n      return {\n        h: Math.round(h * 360),\n        s: Math.round(s * 100),\n        l: Math.round(l * 100)\n      };\n    },\n    HUEtoRGB: function HUEtoRGB(v1, v2, vh) {\n      if (vh < 0) {\n        vh += 1;\n      }\n\n      if (vh > 1) {\n        vh -= 1;\n      }\n\n      if (6 * vh < 1) {\n        return v1 + (v2 - v1) * 6 * vh;\n      }\n\n      if (2 * vh < 1) {\n        return v2;\n      }\n\n      if (3 * vh < 2) {\n        return v1 + (v2 - v1) * (2 / 3 - vh) * 6;\n      }\n\n      return v1;\n    },\n    HSLtoRGB: function HSLtoRGB(h, s, l) {\n      var r, g, b;\n      h /= 360;\n      s /= 100;\n      l /= 100;\n\n      if (s === 0) {\n        r = g = b = l;\n      } else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = this.HUEtoRGB(p, q, h + 1 / 3);\n        g = this.HUEtoRGB(p, q, h);\n        b = this.HUEtoRGB(p, q, h - 1 / 3);\n      }\n\n      return {\n        r: Math.round(r * 255),\n        g: Math.round(g * 255),\n        b: Math.round(b * 255)\n      };\n    },\n    mix: function mix(color1, color2, percentage) {\n      percentage = typeof percentage === 'undefined' ? 50 : percentage;\n      var weight = percentage / 100.0;\n      var w = weight * 2 - 1;\n      var a = 0;\n      var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      var w2 = 1 - w1;\n      var r = Math.round(color1.rgb.r * w1 + color2.rgb.r * w2);\n      var g = Math.round(color1.rgb.g * w1 + color2.rgb.g * w2);\n      var b = Math.round(color1.rgb.b * w1 + color2.rgb.b * w2);\n      var value = new Values(Utils.RGBtoHEX(r, g, b));\n      value.percentage = percentage;\n      return value;\n    }\n  };\n\n  function Values(color) {\n    this.hex = '';\n    this.hsl = {};\n    this.rgb = {};\n\n    if (color) {\n      return this.setColor(color);\n    }\n\n    return this;\n  }\n\n  Values.Utils = Utils;\n  /* Sets the base color for which all operations are based. Updates the instanceâ€™s properties.\n   * @public\n   * @param {string} color - A valid color format (#000, rgb(0,0,0), hsl(0,0%,0%))\n   * @return {Values|Error}\n   */\n\n  Values.prototype.setColor = function setColor(color) {\n    if (Utils.isHEX(color)) {\n      return this._setFromHexString(color);\n    } else if (Utils.isRGB(color)) {\n      return this._setFromRGBString(color);\n    } else if (Utils.isHSL(color)) {\n      return this._setFromHSLString(color);\n    }\n\n    return new Error('Invalid Color Format');\n  };\n  /* Lightens the instance by mixing it with white as specified by @percentage.\n   * @public\n   * @param {number} [percentage]\n   * @return {Values}\n   */\n\n\n  Values.prototype.tint = function tint(percentage) {\n    return Utils.mix({\n      rgb: {\n        r: 255,\n        g: 255,\n        b: 255\n      }\n    }, this, percentage);\n  };\n  /* Darkens the instance color by mixing it with black as specified by @percentage.\n   * @public\n   * @param {number} [percentage]\n   * @return {Values}\n   */\n\n\n  Values.prototype.shade = function shade(percentage) {\n    return Utils.mix({\n      rgb: {\n        r: 0,\n        g: 0,\n        b: 0\n      }\n    }, this, percentage);\n  };\n  /* Generates the tints of the instance color as specified by @percentage.\n   * @public\n   * @param {number} [percentage=10]\n   * @return {Array<Values>}\n   */\n\n\n  Values.prototype.tints = function tint(percentage) {\n    var i = percentage = percentage || 10,\n        tints = [],\n        tint;\n\n    while (i <= 100) {\n      tint = this.tint(i);\n      tint.isTint = true;\n      tints.push(tint);\n      i += percentage;\n    }\n\n    return tints;\n  };\n  /* Generates the shades of the instance color as specified by @percentage.\n   * @public\n   * @param {number} [percentage=10]\n   * @return {Array<Values>}\n   */\n\n\n  Values.prototype.shades = function tint(percentage) {\n    var i = percentage = percentage || 10,\n        shades = [],\n        shade;\n\n    while (i <= 100) {\n      shade = this.shade(i);\n      shade.isShade = true;\n      shades.push(shade);\n      i += percentage;\n    }\n\n    return shades;\n  };\n  /* Generates the tints and shades of the instance color as specified by @percentage.\n   * @public\n   * @param {number} [percentage]\n   * @return {Array<Values>}\n   */\n\n\n  Values.prototype.all = function all(percentage) {\n    var tints = this.tints(percentage).reverse(),\n        shades = this.shades(percentage);\n    tints.push(Object.assign(this, {\n      isBaseColor: true\n    }));\n    return tints.concat(shades);\n  };\n  /* Calculates the brightness of the instance base-color.\n   * @return {number} the base-color brightness.\n   */\n\n\n  Values.prototype.getBrightness = function getBrightness() {\n    var sum = this.rgb.r + this.rgb.g + this.rgb.b;\n    return Math.round(sum / (255 * 3) * 100);\n  };\n  /* Returns the instance color in hexadecimal string form.\n   * @returns {string} e.g. '#000000'\n   */\n\n\n  Values.prototype.hexString = function hexString() {\n    return '#' + this.hex;\n  };\n  /* Returns the instance color in rgb string form.\n   * @returns {string} e.g. 'rgb(0, 0, 0)'\n   */\n\n\n  Values.prototype.rgbString = function rgbString() {\n    return 'rgb(' + this.rgb.r + ', ' + this.rgb.g + ', ' + this.rgb.b + ')';\n  };\n  /* Returns the instance color in hsl string form.\n   * @returns {string} e.g. 'hsl(0, 0%, 0%)'\n   */\n\n\n  Values.prototype.hslString = function hslString() {\n    return 'hsl(' + this.hsl.h + ', ' + this.hsl.s + '%, ' + this.hsl.l + '%)';\n  };\n  /* Updates the instance base-color properties from a valid hex string.\n   * @private\n   * @param {string} color\n   */\n\n\n  Values.prototype._setFromHexString = function _setFromHexString(color) {\n    this.hex = Utils.reHash.test(color) ? color.replace('#', '') : color;\n    this.rgb = Utils.HEXtoRGB(color);\n    this.hsl = Utils.RGBtoHSL(this.rgb.r, this.rgb.g, this.rgb.b);\n    return this;\n  };\n  /* Updates the instance base-color properties from a valid rgb string.\n   * @private\n   * @param {string} color\n   */\n\n\n  Values.prototype._setFromRGBString = function _setFromRGBString(color) {\n    var rgb = color.replace(/[^\\d,]/g, '').split(','),\n        r = parseInt(rgb[0], 10),\n        g = parseInt(rgb[1], 10),\n        b = parseInt(rgb[2], 10);\n    this.rgb = {\n      r: r,\n      g: g,\n      b: b\n    };\n    this.hex = Utils.RGBtoHEX(r, g, b);\n    this.hsl = Utils.RGBtoHSL(this.rgb.r, this.rgb.g, this.rgb.b);\n    return this;\n  };\n  /* Updates the instance base-color properties from a valid hsl string.\n   * @private\n   * @param {string} color\n   */\n\n\n  Values.prototype._setFromHSLString = function _setFromHSLString(color) {\n    var hsl = color.match(Utils.reHSL),\n        h = Math.round(hsl[1]),\n        s = Math.round(hsl[2]),\n        l = Math.round(hsl[3]);\n    this.hsl = {\n      h: h,\n      s: s,\n      l: l\n    };\n    this.rgb = Utils.HSLtoRGB(h, s, l);\n    this.hex = Utils.RGBtoHEX(this.rgb.r, this.rgb.g, this.rgb.b);\n    return this;\n  };\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = Values;\n  } else {\n    window.Values = Values;\n  }\n})();","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/node_modules/values.js/index.js"],"names":["Utils","reHash","RegExp","reHEX","reRGB","reHSL","isHEX","value","test","isRGB","rgb","match","isHSL","hsl","HEXtoRGB","hex","replace","length","h1","charAt","h2","h3","bw","parseInt","r","g","b","RGBtoHEX","toString","slice","RGBtoHSL","min","max","h","s","l","Math","d","round","HUEtoRGB","v1","v2","vh","HSLtoRGB","q","p","mix","color1","color2","percentage","weight","w","a","w1","w2","Values","color","setColor","prototype","_setFromHexString","_setFromRGBString","_setFromHSLString","Error","tint","shade","tints","i","isTint","push","shades","isShade","all","reverse","Object","assign","isBaseColor","concat","getBrightness","sum","hexString","rgbString","hslString","split","module","exports","window"],"mappings":"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","sourcesContent":["/**\n * values.js - Get the tints and shades of a color\n * @version v1.1.1\n * @link http://noeldelgado.github.io/values.js/\n * @license MIT\n */\n(function () {\n  var Utils = {\n    reHash: new RegExp('^#'),\n    reHEX: new RegExp('^(#)?([0-9a-fA-F]{3})([0-9a-fA-F]{3})?$'),\n    reRGB: new RegExp('rgba?\\\\s*\\\\((\\\\d+)\\\\,\\\\s*(\\\\d+)\\\\,\\\\s*(\\\\d+)(,\\\\s*((\\\\d+)?(\\\\.\\\\d+)?))?\\\\)', 'i'),\n    reHSL: new RegExp('hsla?\\\\((\\\\d+),\\\\s*([\\\\d.]+)%,\\\\s*([\\\\d.]+)%,?\\\\s*(?:0?(\\\\.\\\\d+)?|1(\\\\.0)?)?\\\\)', 'i'),\n\n    isHEX: function isHEX(value) {\n      return this.reHEX.test(value);\n    },\n\n    isRGB: function isRGB(value) {\n      var rgb = value.match(this.reRGB);\n\n      if (rgb) {\n        if ((rgb[1] <= 255) && (rgb[2] <= 255) && (rgb[3] <= 255)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    isHSL: function isHSL(value) {\n      var hsl = value.match(this.reHSL);\n\n      if (hsl) {\n        if ((hsl[1] <= 360) && (hsl[2] <= 100) && (hsl[3] <= 100)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    HEXtoRGB: function HEXtoRGB(hex) {\n      hex = hex.replace('#', '');\n\n      if (hex.length === 3) {\n        var h1 = hex.charAt(0), h2 = hex.charAt(1), h3 = hex.charAt(2);\n        hex = h1 + h1 + h2 + h2 + h3 + h3;\n      }\n      var bw = parseInt(hex, 16);\n\n      return {r: (bw >> 16) & 255, g: (bw >> 8) & 255, b: bw & 255};\n    },\n\n    RGBtoHEX: function RGBtoHEX(r, g, b) {\n      return (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1);\n    },\n\n    RGBtoHSL: function RGBtoHSL(r, g, b) {\n      var min, max, h, s, l;\n\n      r = (r / 255);\n      g = (g / 255);\n      b = (b / 255);\n\n      max = Math.max(r, g, b);\n      min = Math.min(r, g, b);\n      l = ((max + min) / 2);\n\n      if (max === min) {h = s = 0;}\n      else {\n        var d = (max - min);\n        s = (l > 0.5) ? (d / (2 - max - min)) : (d / (max + min));\n\n        if (max === r) {h = ((g - b) / d + (g < b ? 6 : 0));}\n        else if (max === g) {h = ((b - r) / d + 2);}\n        else if (max === b) {h = ((r - g) / d + 4);}\n\n        h /= 6;\n      }\n\n      return {h: Math.round(h * 360), s: Math.round(s * 100), l: Math.round(l * 100)};\n    },\n\n    HUEtoRGB: function HUEtoRGB(v1, v2, vh) {\n      if (vh < 0) {vh += 1;}\n      if (vh > 1) {vh -= 1;}\n\n      if ((6 * vh) < 1) {return (v1 + (v2 - v1) * 6 * vh);}\n      if ((2 * vh) < 1) {return v2;}\n      if ((3 * vh) < 2) {return (v1 + (v2 - v1) * ((2 / 3) - vh) * 6);}\n      return v1;\n    },\n\n    HSLtoRGB: function HSLtoRGB(h, s, l) {\n      var r, g, b;\n\n      h /= 360;\n      s /= 100;\n      l /= 100;\n\n      if (s === 0) {r = g = b = l;} else {\n        var q = (l < 0.5) ? (l * (1 + s)) : (l + s - l * s);\n        var p = (2 * l - q);\n        r = this.HUEtoRGB(p, q, h + 1 / 3);\n        g = this.HUEtoRGB(p, q, h);\n        b = this.HUEtoRGB(p, q, h - 1 / 3);\n      }\n\n      return {r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255)};\n    },\n\n    mix: function mix(color1, color2, percentage) {\n      percentage = (typeof percentage === 'undefined') ? 50 : percentage;\n\n      var weight = (percentage / 100.0);\n      var w = (weight * 2 - 1);\n      var a = 0;\n\n      var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      var w2 = (1 - w1);\n\n      var r = Math.round(color1.rgb.r * w1 + color2.rgb.r * w2);\n      var g = Math.round(color1.rgb.g * w1 + color2.rgb.g * w2);\n      var b = Math.round(color1.rgb.b * w1 + color2.rgb.b * w2);\n\n      var value = new Values(Utils.RGBtoHEX(r, g, b));\n      value.percentage = percentage;\n\n      return value;\n    }\n  };\n\n  function Values (color) {\n    this.hex = '';\n    this.hsl = {};\n    this.rgb = {};\n\n    if (color) {\n      return this.setColor(color);\n    }\n\n    return this;\n  }\n\n  Values.Utils = Utils;\n\n  /* Sets the base color for which all operations are based. Updates the instanceâ€™s properties.\n   * @public\n   * @param {string} color - A valid color format (#000, rgb(0,0,0), hsl(0,0%,0%))\n   * @return {Values|Error}\n   */\n  Values.prototype.setColor = function setColor (color) {\n    if (Utils.isHEX(color)) {\n      return this._setFromHexString(color);\n    } else if (Utils.isRGB(color)) {\n      return this._setFromRGBString(color);\n    } else if (Utils.isHSL(color)) {\n      return this._setFromHSLString(color);\n    }\n\n    return new Error('Invalid Color Format');\n  };\n\n  /* Lightens the instance by mixing it with white as specified by @percentage.\n   * @public\n   * @param {number} [percentage]\n   * @return {Values}\n   */\n  Values.prototype.tint = function tint (percentage) {\n    return Utils.mix({rgb: {r: 255, g: 255, b: 255}}, this, percentage);\n  };\n\n  /* Darkens the instance color by mixing it with black as specified by @percentage.\n   * @public\n   * @param {number} [percentage]\n   * @return {Values}\n   */\n  Values.prototype.shade = function shade (percentage) {\n    return Utils.mix({rgb: {r: 0, g: 0, b: 0}}, this, percentage);\n  };\n\n  /* Generates the tints of the instance color as specified by @percentage.\n   * @public\n   * @param {number} [percentage=10]\n   * @return {Array<Values>}\n   */\n  Values.prototype.tints = function tint (percentage) {\n    var i = percentage = (percentage || 10)\n      , tints = []\n      , tint;\n\n    while (i <= 100) {\n      tint = this.tint(i);\n      tint.isTint = true;\n      tints.push(tint);\n      i += percentage;\n    }\n\n    return tints;\n  };\n\n  /* Generates the shades of the instance color as specified by @percentage.\n   * @public\n   * @param {number} [percentage=10]\n   * @return {Array<Values>}\n   */\n  Values.prototype.shades = function tint (percentage) {\n    var i = percentage = (percentage || 10)\n      , shades = []\n      , shade;\n\n    while (i <= 100) {\n      shade = this.shade(i);\n      shade.isShade = true;\n      shades.push(shade);\n      i += percentage;\n    }\n\n    return shades;\n  };\n\n  /* Generates the tints and shades of the instance color as specified by @percentage.\n   * @public\n   * @param {number} [percentage]\n   * @return {Array<Values>}\n   */\n  Values.prototype.all = function all (percentage) {\n    var tints = this.tints(percentage).reverse()\n      , shades = this.shades(percentage);\n\n    tints.push(Object.assign(this, { isBaseColor: true }));\n    return tints.concat(shades);\n  };\n\n  /* Calculates the brightness of the instance base-color.\n   * @return {number} the base-color brightness.\n   */\n  Values.prototype.getBrightness = function getBrightness () {\n    var sum = (this.rgb.r + this.rgb.g + this.rgb.b);\n    return Math.round(sum / (255 * 3) * 100);\n  };\n\n  /* Returns the instance color in hexadecimal string form.\n   * @returns {string} e.g. '#000000'\n   */\n  Values.prototype.hexString = function hexString () {\n    return ('#' + this.hex);\n  };\n\n  /* Returns the instance color in rgb string form.\n   * @returns {string} e.g. 'rgb(0, 0, 0)'\n   */\n  Values.prototype.rgbString = function rgbString () {\n    return ('rgb(' + this.rgb.r + ', ' + this.rgb.g + ', ' + this.rgb.b + ')');\n  };\n\n  /* Returns the instance color in hsl string form.\n   * @returns {string} e.g. 'hsl(0, 0%, 0%)'\n   */\n  Values.prototype.hslString = function hslString () {\n    return ('hsl(' + this.hsl.h + ', ' + this.hsl.s + '%, ' + this.hsl.l + '%)');\n  };\n\n  /* Updates the instance base-color properties from a valid hex string.\n   * @private\n   * @param {string} color\n   */\n  Values.prototype._setFromHexString = function _setFromHexString (color) {\n    this.hex = (Utils.reHash.test(color)) ? color.replace('#', '') : color;\n    this.rgb = Utils.HEXtoRGB(color);\n    this.hsl = Utils.RGBtoHSL(this.rgb.r, this.rgb.g, this.rgb.b);\n\n    return this;\n  };\n\n  /* Updates the instance base-color properties from a valid rgb string.\n   * @private\n   * @param {string} color\n   */\n  Values.prototype._setFromRGBString = function _setFromRGBString(color) {\n    var rgb = color.replace(/[^\\d,]/g, '').split(',')\n      , r = parseInt(rgb[0], 10)\n      , g = parseInt(rgb[1], 10)\n      , b = parseInt(rgb[2], 10);\n\n    this.rgb = {r: r, g: g, b: b};\n    this.hex = Utils.RGBtoHEX(r, g, b);\n    this.hsl = Utils.RGBtoHSL(this.rgb.r, this.rgb.g, this.rgb.b);\n\n    return this;\n  };\n\n  /* Updates the instance base-color properties from a valid hsl string.\n   * @private\n   * @param {string} color\n   */\n  Values.prototype._setFromHSLString = function _setFromHSLString (color) {\n    var hsl = color.match(Utils.reHSL)\n      , h = Math.round(hsl[1])\n      , s = Math.round(hsl[2])\n      , l = Math.round(hsl[3]);\n\n    this.hsl = {h: h, s: s, l: l};\n    this.rgb = Utils.HSLtoRGB(h, s, l);\n    this.hex = Utils.RGBtoHEX(this.rgb.r, this.rgb.g, this.rgb.b);\n\n    return this;\n  };\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = Values;\n  } else {window.Values = Values;}\n})();\n"]},"metadata":{},"sourceType":"script"}