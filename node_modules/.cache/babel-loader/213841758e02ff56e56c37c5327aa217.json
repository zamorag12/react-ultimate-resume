{"ast":null,"code":"import { getNamedFormat, filterProps, createError } from '../utils';\nvar NUMBER_FORMAT_OPTIONS = ['localeMatcher', 'style', 'currency', 'currencyDisplay', 'unit', 'unitDisplay', 'useGrouping', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits', // Unified NumberFormat (Stage 3 as of 10/22/19)\n'compactDisplay', 'currencyDisplay', 'currencySign', 'notation', 'signDisplay', 'unit', 'unitDisplay'];\nexport function getFormatter(_ref, getNumberFormat) {\n  var locale = _ref.locale,\n      formats = _ref.formats,\n      onError = _ref.onError;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var format = options.format;\n  var defaults = format && getNamedFormat(formats, 'number', format, onError) || {};\n  var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n  return getNumberFormat(locale, filteredOptions);\n}\nexport function formatNumber(config, getNumberFormat, value) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  try {\n    return getFormatter(config, getNumberFormat, options).format(value);\n  } catch (e) {\n    config.onError(createError('Error formatting number.', e));\n  }\n\n  return String(value);\n}\nexport function formatNumberToParts(config, getNumberFormat, value) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  try {\n    return getFormatter(config, getNumberFormat, options).formatToParts(value);\n  } catch (e) {\n    config.onError(createError('Error formatting number.', e));\n  }\n\n  return [];\n}","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/node_modules/react-intl/lib/formatters/number.js"],"names":["getNamedFormat","filterProps","createError","NUMBER_FORMAT_OPTIONS","getFormatter","getNumberFormat","locale","formats","onError","options","format","defaults","filteredOptions","formatNumber","config","value","e","String","formatNumberToParts","formatToParts"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,EAAsCC,WAAtC,QAAyD,UAAzD;AACA,IAAMC,qBAAqB,GAAG,CAC1B,eAD0B,EAE1B,OAF0B,EAG1B,UAH0B,EAI1B,iBAJ0B,EAK1B,MAL0B,EAM1B,aAN0B,EAO1B,aAP0B,EAQ1B,sBAR0B,EAS1B,uBAT0B,EAU1B,uBAV0B,EAW1B,0BAX0B,EAY1B,0BAZ0B,EAa1B;AACA,gBAd0B,EAe1B,iBAf0B,EAgB1B,cAhB0B,EAiB1B,UAjB0B,EAkB1B,aAlB0B,EAmB1B,MAnB0B,EAoB1B,aApB0B,CAA9B;AAsBA,OAAO,SAASC,YAAT,OAAqDC,eAArD,EAAoF;AAAA,MAA5DC,MAA4D,QAA5DA,MAA4D;AAAA,MAApDC,OAAoD,QAApDA,OAAoD;AAAA,MAA3CC,OAA2C,QAA3CA,OAA2C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAAA,MAC/EC,MAD+E,GACpED,OADoE,CAC/EC,MAD+E;AAEvF,MAAMC,QAAQ,GAAKD,MAAM,IACrBV,cAAc,CAACO,OAAD,EAAU,QAAV,EAAoBG,MAApB,EAA4BF,OAA5B,CADA,IAEd,EAFJ;AAGA,MAAMI,eAAe,GAAGX,WAAW,CAACQ,OAAD,EAAUN,qBAAV,EAAiCQ,QAAjC,CAAnC;AACA,SAAON,eAAe,CAACC,MAAD,EAASM,eAAT,CAAtB;AACH;AACD,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BT,eAA9B,EAA+CU,KAA/C,EAAoE;AAAA,MAAdN,OAAc,uEAAJ,EAAI;;AACvE,MAAI;AACA,WAAOL,YAAY,CAACU,MAAD,EAAST,eAAT,EAA0BI,OAA1B,CAAZ,CAA+CC,MAA/C,CAAsDK,KAAtD,CAAP;AACH,GAFD,CAGA,OAAOC,CAAP,EAAU;AACNF,IAAAA,MAAM,CAACN,OAAP,CAAeN,WAAW,CAAC,0BAAD,EAA6Bc,CAA7B,CAA1B;AACH;;AACD,SAAOC,MAAM,CAACF,KAAD,CAAb;AACH;AACD,OAAO,SAASG,mBAAT,CAA6BJ,MAA7B,EAAqCT,eAArC,EAAsDU,KAAtD,EAA2E;AAAA,MAAdN,OAAc,uEAAJ,EAAI;;AAC9E,MAAI;AACA,WAAOL,YAAY,CAACU,MAAD,EAAST,eAAT,EAA0BI,OAA1B,CAAZ,CAA+CU,aAA/C,CAA6DJ,KAA7D,CAAP;AACH,GAFD,CAGA,OAAOC,CAAP,EAAU;AACNF,IAAAA,MAAM,CAACN,OAAP,CAAeN,WAAW,CAAC,0BAAD,EAA6Bc,CAA7B,CAA1B;AACH;;AACD,SAAO,EAAP;AACH","sourcesContent":["import { getNamedFormat, filterProps, createError } from '../utils';\nconst NUMBER_FORMAT_OPTIONS = [\n    'localeMatcher',\n    'style',\n    'currency',\n    'currencyDisplay',\n    'unit',\n    'unitDisplay',\n    'useGrouping',\n    'minimumIntegerDigits',\n    'minimumFractionDigits',\n    'maximumFractionDigits',\n    'minimumSignificantDigits',\n    'maximumSignificantDigits',\n    // Unified NumberFormat (Stage 3 as of 10/22/19)\n    'compactDisplay',\n    'currencyDisplay',\n    'currencySign',\n    'notation',\n    'signDisplay',\n    'unit',\n    'unitDisplay',\n];\nexport function getFormatter({ locale, formats, onError, }, getNumberFormat, options = {}) {\n    const { format } = options;\n    const defaults = ((format &&\n        getNamedFormat(formats, 'number', format, onError)) ||\n        {});\n    const filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n    return getNumberFormat(locale, filteredOptions);\n}\nexport function formatNumber(config, getNumberFormat, value, options = {}) {\n    try {\n        return getFormatter(config, getNumberFormat, options).format(value);\n    }\n    catch (e) {\n        config.onError(createError('Error formatting number.', e));\n    }\n    return String(value);\n}\nexport function formatNumberToParts(config, getNumberFormat, value, options = {}) {\n    try {\n        return getFormatter(config, getNumberFormat, options).formatToParts(value);\n    }\n    catch (e) {\n        config.onError(createError('Error formatting number.', e));\n    }\n    return [];\n}\n"]},"metadata":{},"sourceType":"module"}