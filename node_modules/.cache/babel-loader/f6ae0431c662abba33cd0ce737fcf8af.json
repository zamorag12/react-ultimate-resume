{"ast":null,"code":"import _toConsumableArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from'react';import{FormattedMessage,useIntl}from'react-intl';import capitalize from'lodash/capitalize';import translations from'./contract_types_translations';import{jsx as _jsx}from\"react/jsx-runtime\";export var ContractType=function ContractType(_ref){var _ref$contractTypes=_ref.contractTypes,contractTypes=_ref$contractTypes===void 0?[]:_ref$contractTypes;var _useIntl=useIntl(),formatMessage=_useIntl.formatMessage;var contracts=_toConsumableArray(contractTypes);var lastContract=contracts.pop();if(!lastContract){return null;}if(contracts.length<=1){return/*#__PURE__*/_jsx(FormattedMessage,{id:\"Basics.Back.WorkContract.single\",defaultMessage:'Looking for a {contractType} contract',values:{contractType:capitalize(formatMessage(translations[lastContract]||translations.unknown))}});}return/*#__PURE__*/_jsx(FormattedMessage,{id:\"Basics.Back.WorkContract.multi\",defaultMessage:'Looking for a {contracts} or {lastContract} contract',values:{lastContract:formatMessage(translations[lastContract]),contracts:contracts.map(function(key){return capitalize(formatMessage(translations[key]||translations.unknown));}).join(', ')}});};","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/commons/fields/contract_types/contract_types.jsx"],"names":["React","FormattedMessage","useIntl","capitalize","translations","ContractType","contractTypes","formatMessage","contracts","lastContract","pop","length","contractType","unknown","map","key","join"],"mappings":"iLAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,gBAAT,CAA2BC,OAA3B,KAA0C,YAA1C,CACA,MAAOC,CAAAA,UAAP,KAAuB,mBAAvB,CAEA,MAAOC,CAAAA,YAAP,KAAyB,+BAAzB,C,2CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAA4B,6BAAzBC,aAAyB,CAAzBA,aAAyB,6BAAT,EAAS,iCAC1BJ,OAAO,EADmB,CAC5CK,aAD4C,UAC5CA,aAD4C,CAGpD,GAAMC,CAAAA,SAAS,oBAAOF,aAAP,CAAf,CACA,GAAMG,CAAAA,YAAY,CAAGD,SAAS,CAACE,GAAV,EAArB,CACA,GAAI,CAACD,YAAL,CAAmB,CACf,MAAO,KAAP,CACH,CACD,GAAID,SAAS,CAACG,MAAV,EAAoB,CAAxB,CAA2B,CACvB,mBACI,KAAC,gBAAD,EACI,EAAE,CAAC,iCADP,CAEI,cAAc,CAAE,uCAFpB,CAGI,MAAM,CAAE,CAAEC,YAAY,CAAET,UAAU,CAACI,aAAa,CAACH,YAAY,CAACK,YAAD,CAAZ,EAA8BL,YAAY,CAACS,OAA5C,CAAd,CAA1B,CAHZ,EADJ,CAOH,CACD,mBACI,KAAC,gBAAD,EACI,EAAE,CAAC,gCADP,CAEI,cAAc,CAAE,sDAFpB,CAGI,MAAM,CAAE,CACJJ,YAAY,CAAEF,aAAa,CAACH,YAAY,CAACK,YAAD,CAAb,CADvB,CAEJD,SAAS,CAAEA,SAAS,CACfM,GADM,CACF,SAACC,GAAD,QAASZ,CAAAA,UAAU,CAACI,aAAa,CAACH,YAAY,CAACW,GAAD,CAAZ,EAAqBX,YAAY,CAACS,OAAnC,CAAd,CAAnB,EADE,EAENG,IAFM,CAED,IAFC,CAFP,CAHZ,EADJ,CAYH,CA7BM","sourcesContent":["import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport capitalize from 'lodash/capitalize';\n\nimport translations from './contract_types_translations';\n\nexport const ContractType = ({ contractTypes = [] }) => {\n    const { formatMessage } = useIntl();\n\n    const contracts = [...contractTypes];\n    const lastContract = contracts.pop();\n    if (!lastContract) {\n        return null;\n    }\n    if (contracts.length <= 1) {\n        return (\n            <FormattedMessage\n                id=\"Basics.Back.WorkContract.single\"\n                defaultMessage={'Looking for a {contractType} contract'}\n                values={{ contractType: capitalize(formatMessage(translations[lastContract] || translations.unknown)) }}\n            />\n        );\n    }\n    return (\n        <FormattedMessage\n            id=\"Basics.Back.WorkContract.multi\"\n            defaultMessage={'Looking for a {contracts} or {lastContract} contract'}\n            values={{\n                lastContract: formatMessage(translations[lastContract]),\n                contracts: contracts\n                    .map((key) => capitalize(formatMessage(translations[key] || translations.unknown)))\n                    .join(', ')\n            }}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}