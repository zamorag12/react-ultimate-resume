{"ast":null,"code":"import _objectSpread from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useState}from'react';import copy from'copy-to-clipboard';import{FormattedMessage}from'react-intl';import{Portal,Snackbar}from'@material-ui/core';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var mergeOnClicks=function mergeOnClicks(){for(var _len=arguments.length,fns=new Array(_len),_key=0;_key<_len;_key++){fns[_key]=arguments[_key];}return function(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}fns.forEach(function(fn){if(typeof fn==='function'){fn(args);}});};};var CopyWrapperComponent=function CopyWrapperComponent(_ref){var value=_ref.value,children=_ref.children;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showSnack=_useState2[0],setShowSnack=_useState2[1];var handleCopyToClipboardClick=useCallback(function(){copy(value);setShowSnack(true);},[value]);return/*#__PURE__*/_jsxs(_Fragment,{children:[React.Children.map(children,function(child){return/*#__PURE__*/React.cloneElement(child,_objectSpread(_objectSpread({},child.props),{},{onClick:mergeOnClicks(handleCopyToClipboardClick,child.props.onClick)}));}),/*#__PURE__*/_jsx(Portal,{children:/*#__PURE__*/_jsx(Snackbar,{anchorOrigin:{horizontal:'left',vertical:'bottom'},open:showSnack,message:/*#__PURE__*/_jsx(FormattedMessage,{id:\"Main.lang.copied\",defaultMessage:\"Copied in your clipboard\"}),autoHideDuration:5000,onClose:function onClose(){return setShowSnack(false);}})})]});};export var CopyWrapper=CopyWrapperComponent;","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/commons/copy_wrapper/copy_wrapper.jsx"],"names":["React","useCallback","useState","copy","FormattedMessage","Portal","Snackbar","mergeOnClicks","fns","args","forEach","fn","CopyWrapperComponent","value","children","showSnack","setShowSnack","handleCopyToClipboardClick","Children","map","child","cloneElement","props","onClick","horizontal","vertical","CopyWrapper"],"mappings":"iVAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,QAA7B,KAA6C,OAA7C,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,CACA,OAASC,gBAAT,KAAiC,YAAjC,CACA,OAASC,MAAT,CAAiBC,QAAjB,KAAiC,mBAAjC,C,6IAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,iCAAIC,GAAJ,0CAAIA,GAAJ,8BAAY,WAAa,gCAATC,IAAS,+CAATA,IAAS,0BAC3CD,GAAG,CAACE,OAAJ,CAAY,SAACC,EAAD,CAAQ,CAChB,GAAI,MAAOA,CAAAA,EAAP,GAAc,UAAlB,CAA8B,CAC1BA,EAAE,CAACF,IAAD,CAAF,CACH,CACJ,CAJD,EAKH,CANqB,EAAtB,CAQA,GAAMG,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,MAAyB,IAAtBC,CAAAA,KAAsB,MAAtBA,KAAsB,CAAfC,QAAe,MAAfA,QAAe,eAChBZ,QAAQ,CAAC,KAAD,CADQ,wCAC3Ca,SAD2C,eAChCC,YADgC,eAGlD,GAAMC,CAAAA,0BAA0B,CAAGhB,WAAW,CAAC,UAAM,CACjDE,IAAI,CAACU,KAAD,CAAJ,CACAG,YAAY,CAAC,IAAD,CAAZ,CACH,CAH6C,CAG3C,CAACH,KAAD,CAH2C,CAA9C,CAKA,mBACI,2BACKb,KAAK,CAACkB,QAAN,CAAeC,GAAf,CAAmBL,QAAnB,CAA6B,SAACM,KAAD,qBAC1BpB,KAAK,CAACqB,YAAN,CAAmBD,KAAnB,gCACOA,KAAK,CAACE,KADb,MAEIC,OAAO,CAAEhB,aAAa,CAACU,0BAAD,CAA6BG,KAAK,CAACE,KAAN,CAAYC,OAAzC,CAF1B,GAD0B,EAA7B,CADL,cAOI,KAAC,MAAD,wBACI,KAAC,QAAD,EACI,YAAY,CAAE,CAAEC,UAAU,CAAE,MAAd,CAAsBC,QAAQ,CAAE,QAAhC,CADlB,CAEI,IAAI,CAAEV,SAFV,CAGI,OAAO,cAAE,KAAC,gBAAD,EAAkB,EAAE,CAAC,kBAArB,CAAwC,cAAc,CAAC,0BAAvD,EAHb,CAII,gBAAgB,CAAE,IAJtB,CAKI,OAAO,CAAE,yBAAMC,CAAAA,YAAY,CAAC,KAAD,CAAlB,EALb,EADJ,EAPJ,GADJ,CAmBH,CA3BD,CA6BA,MAAO,IAAMU,CAAAA,WAAW,CAAGd,oBAApB","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport copy from 'copy-to-clipboard';\nimport { FormattedMessage } from 'react-intl';\nimport { Portal, Snackbar } from '@material-ui/core';\n\nconst mergeOnClicks = (...fns) => (...args) => {\n    fns.forEach((fn) => {\n        if (typeof fn === 'function') {\n            fn(args);\n        }\n    });\n};\n\nconst CopyWrapperComponent = ({ value, children }) => {\n    const [showSnack, setShowSnack] = useState(false);\n\n    const handleCopyToClipboardClick = useCallback(() => {\n        copy(value);\n        setShowSnack(true);\n    }, [value]);\n\n    return (\n        <>\n            {React.Children.map(children, (child) =>\n                React.cloneElement(child, {\n                    ...child.props,\n                    onClick: mergeOnClicks(handleCopyToClipboardClick, child.props.onClick)\n                })\n            )}\n            <Portal>\n                <Snackbar\n                    anchorOrigin={{ horizontal: 'left', vertical: 'bottom' }}\n                    open={showSnack}\n                    message={<FormattedMessage id=\"Main.lang.copied\" defaultMessage=\"Copied in your clipboard\" />}\n                    autoHideDuration={5000}\n                    onClose={() => setShowSnack(false)}\n                />\n            </Portal>\n        </>\n    );\n};\n\nexport const CopyWrapper = CopyWrapperComponent;\n"]},"metadata":{},"sourceType":"module"}