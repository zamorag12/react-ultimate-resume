{"ast":null,"code":"import _slicedToArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useEffect,useState}from'react';import{FormattedMessage,useIntl}from'react-intl';import{createUseStyles}from'react-jss';import{Button,Card,PopperCardActions,TextField,Typography}from'@welovedevs/ui';import{BouncingRoundButton}from'../../../../../../commons/bouncing_round_button/bouncing_round_button';import{styles}from'./gif_card_styles';import{translations}from'./gif_card_translations';import{GifAuthorCredits}from'../../../../../../commons/gifs/gif_author_credits/gif_author_credits';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var useStyles=createUseStyles(styles);export var GifCard=function GifCard(_ref){var name=_ref.name,gifUrl=_ref.gifUrl,gifUser=_ref.gifUser,imageEditable=_ref.imageEditable,additionalActions=_ref.additionalActions,onImageEditClick=_ref.onImageEditClick,onChange=_ref.onChange,onRemove=_ref.onRemove,error=_ref.error;var classes=useStyles();var _useIntl=useIntl(),formatMessage=_useIntl.formatMessage;var _useState=useState(name),_useState2=_slicedToArray(_useState,2),input=_useState2[0],setInput=_useState2[1];var handleTextFieldChange=useCallback(function(event){var value=event.target.value;setInput(value);onChange('name')(value);},[]);useEffect(function(){return setInput(name);},[name]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Card,{className:classes.container,children:[(imageEditable||additionalActions)&&/*#__PURE__*/_jsxs(\"div\",{className:classes.actions,children:[imageEditable&&gifUrl&&/*#__PURE__*/_jsx(BouncingRoundButton,{title:/*#__PURE__*/_jsx(FormattedMessage,{id:\"GifsEditDialog.gifCard.changeGif\",defaultMessage:\"Update this gif\"}),onClick:onImageEditClick}),additionalActions]}),/*#__PURE__*/_jsx(CardTopHalf,{error:error,gifUrl:gifUrl,gifUser:gifUser,name:name,onImageEditClick:onImageEditClick,classes:classes}),/*#__PURE__*/_jsxs(\"div\",{className:classes.content,children:[/*#__PURE__*/_jsx(TextField,{classes:{container:classes.textField},fullWidth:true,placeholder:formatMessage(translations.hobbiesNamePlaceholder),variant:\"flat\",value:input,onChange:handleTextFieldChange}),(error===null||error===void 0?void 0:error.name)&&/*#__PURE__*/_jsx(Typography,{color:\"danger\",component:\"div\",variant:\"helper\",children:error===null||error===void 0?void 0:error.name})]}),/*#__PURE__*/_jsx(PopperCardActions,{children:/*#__PURE__*/_jsx(Button,{color:\"danger\",size:\"small\",onClick:onRemove,children:/*#__PURE__*/_jsx(FormattedMessage,{id:\"Main.lang.remove\",defaultMessage:\"Remove\"})})})]})});};var CardTopHalf=function CardTopHalf(_ref2){var error=_ref2.error,gifUrl=_ref2.gifUrl,gifUser=_ref2.gifUser,classes=_ref2.classes,name=_ref2.name,onImageEditClick=_ref2.onImageEditClick;if(!gifUrl){return/*#__PURE__*/_jsx(\"div\",{className:classes.addGifButtonContainer,children:/*#__PURE__*/_jsx(Button,{classes:{container:classes.addGifButton},color:\"primary\",variant:\"outlined\",onClick:onImageEditClick,children:/*#__PURE__*/_jsx(FormattedMessage,{id:\"GifsEditDialog.gifCard.addGif\",defaultMessage:\"Add a gif\"})})});}return/*#__PURE__*/_jsxs(\"div\",{className:classes.imageContainer,children:[(error===null||error===void 0?void 0:error.gifUrl)&&/*#__PURE__*/_jsx(Typography,{color:\"danger\",variant:\"p\",children:error===null||error===void 0?void 0:error.gifUrl}),/*#__PURE__*/_jsx(\"img\",{className:classes.image,src:gifUrl,alt:name}),gifUser&&/*#__PURE__*/_jsx(GifAuthorCredits,{user:gifUser})]});};","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/gifs/gifs_edit_dialog/gifs_edit_form/gif_card/gif_card.jsx"],"names":["React","useCallback","useEffect","useState","FormattedMessage","useIntl","createUseStyles","Button","Card","PopperCardActions","TextField","Typography","BouncingRoundButton","styles","translations","GifAuthorCredits","useStyles","GifCard","name","gifUrl","gifUser","imageEditable","additionalActions","onImageEditClick","onChange","onRemove","error","classes","formatMessage","input","setInput","handleTextFieldChange","event","value","target","container","actions","content","textField","hobbiesNamePlaceholder","CardTopHalf","addGifButtonContainer","addGifButton","imageContainer","image"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\n\nimport { Button, Card, PopperCardActions, TextField, Typography } from '@welovedevs/ui';\n\nimport { BouncingRoundButton } from '../../../../../../commons/bouncing_round_button/bouncing_round_button';\n\nimport { styles } from './gif_card_styles';\nimport { translations } from './gif_card_translations';\nimport { GifAuthorCredits } from '../../../../../../commons/gifs/gif_author_credits/gif_author_credits';\n\nconst useStyles = createUseStyles(styles);\n\nexport const GifCard = ({\n    name,\n    gifUrl,\n    gifUser,\n    imageEditable,\n    additionalActions,\n    onImageEditClick,\n    onChange,\n    onRemove,\n    error\n}) => {\n    const classes = useStyles();\n    const { formatMessage } = useIntl();\n\n    const [input, setInput] = useState(name);\n\n    const handleTextFieldChange = useCallback((event) => {\n        const {\n            target: { value }\n        } = event;\n        setInput(value);\n        onChange('name')(value);\n    }, []);\n\n    useEffect(() => setInput(name), [name]);\n\n    return (\n        <>\n            <Card className={classes.container}>\n                {(imageEditable || additionalActions) && (\n                    <div className={classes.actions}>\n                        {imageEditable && gifUrl && (\n                            <BouncingRoundButton\n                                title={\n                                    <FormattedMessage\n                                        id=\"GifsEditDialog.gifCard.changeGif\"\n                                        defaultMessage=\"Update this gif\"\n                                    />\n                                }\n                                onClick={onImageEditClick}\n                            />\n                        )}\n                        {additionalActions}\n                    </div>\n                )}\n                <CardTopHalf\n                    error={error}\n                    gifUrl={gifUrl}\n                    gifUser={gifUser}\n                    name={name}\n                    onImageEditClick={onImageEditClick}\n                    classes={classes}\n                />\n                <div className={classes.content}>\n                    <TextField\n                        classes={{ container: classes.textField }}\n                        fullWidth\n                        placeholder={formatMessage(translations.hobbiesNamePlaceholder)}\n                        variant=\"flat\"\n                        value={input}\n                        onChange={handleTextFieldChange}\n                    />\n                    {error?.name && (\n                        <Typography color=\"danger\" component=\"div\" variant=\"helper\">\n                            {error?.name}\n                        </Typography>\n                    )}\n                </div>\n                <PopperCardActions>\n                    <Button color=\"danger\" size=\"small\" onClick={onRemove}>\n                        <FormattedMessage id=\"Main.lang.remove\" defaultMessage=\"Remove\" />\n                    </Button>\n                </PopperCardActions>\n            </Card>\n        </>\n    );\n};\n\nconst CardTopHalf = ({ error, gifUrl, gifUser, classes, name, onImageEditClick }) => {\n    if (!gifUrl) {\n        return (\n            <div className={classes.addGifButtonContainer}>\n                <Button\n                    classes={{\n                        container: classes.addGifButton\n                    }}\n                    color=\"primary\"\n                    variant=\"outlined\"\n                    onClick={onImageEditClick}\n                >\n                    <FormattedMessage id=\"GifsEditDialog.gifCard.addGif\" defaultMessage=\"Add a gif\" />\n                </Button>\n            </div>\n        );\n    }\n    return (\n        <div className={classes.imageContainer}>\n            {error?.gifUrl && (\n                <Typography color=\"danger\" variant=\"p\">\n                    {error?.gifUrl}\n                </Typography>\n            )}\n            <img className={classes.image} src={gifUrl} alt={name} />\n            {gifUser && <GifAuthorCredits user={gifUser} />}\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}