{"ast":null,"code":"import _objectSpread from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useMemo,useState}from'react';import{useMediaQuery}from'@material-ui/core';export var useOpenerState=function useOpenerState(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref$mobileWidth=_ref.mobileWidth,mobileWidth=_ref$mobileWidth===void 0?560:_ref$mobileWidth,useClickOnMobile=_ref.useClickOnMobile,defaultHandlers=_ref.defaultHandlers;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),open=_useState2[0],setOpen=_useState2[1];var setOpened=useCallback(function(){return setOpen(true);},[]);var setClosed=useCallback(function(){return setOpen(false);},[]);var toggle=useCallback(function(){return setOpen(!open);},[open]);var handleClick=useCallback(function(){if(typeof defaultHandlers.onClick==='function'){defaultHandlers.onClick();}toggle();},[defaultHandlers,toggle]);var isMobile=useMediaQuery(\"(max-width: \".concat(mobileWidth,\"px)\"),{defaultMatches:true});var eventsHandlerElementProps=useMemo(function(){return _objectSpread(_objectSpread({},isMobile&&useClickOnMobile&&{onClick:handleClick}),(!isMobile||!useClickOnMobile)&&{onMouseEnter:setOpened,onMouseLeave:setClosed,onFocus:setOpened,onBlur:setClosed});},[isMobile,setOpened,setClosed,toggle]);return[open,eventsHandlerElementProps,{setOpened:setOpened,setClosed:setClosed,toggle:toggle}];};","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/hooks/use_opener_state.js"],"names":["useCallback","useMemo","useState","useMediaQuery","useOpenerState","mobileWidth","useClickOnMobile","defaultHandlers","open","setOpen","setOpened","setClosed","toggle","handleClick","onClick","isMobile","defaultMatches","eventsHandlerElementProps","onMouseEnter","onMouseLeave","onFocus","onBlur"],"mappings":"iVAAA,OAASA,WAAT,CAAsBC,OAAtB,CAA+BC,QAA/B,KAA+C,OAA/C,CAEA,OAASC,aAAT,KAA8B,mBAA9B,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAmE,oEAAP,EAAO,uBAAhEC,WAAgE,CAAhEA,WAAgE,2BAAlD,GAAkD,kBAA7CC,gBAA6C,MAA7CA,gBAA6C,CAA3BC,eAA2B,MAA3BA,eAA2B,eACrEL,QAAQ,CAAC,KAAD,CAD6D,wCACtFM,IADsF,eAChFC,OADgF,eAE7F,GAAMC,CAAAA,SAAS,CAAGV,WAAW,CAAC,iBAAMS,CAAAA,OAAO,CAAC,IAAD,CAAb,EAAD,CAAsB,EAAtB,CAA7B,CACA,GAAME,CAAAA,SAAS,CAAGX,WAAW,CAAC,iBAAMS,CAAAA,OAAO,CAAC,KAAD,CAAb,EAAD,CAAuB,EAAvB,CAA7B,CACA,GAAMG,CAAAA,MAAM,CAAGZ,WAAW,CAAC,iBAAMS,CAAAA,OAAO,CAAC,CAACD,IAAF,CAAb,EAAD,CAAuB,CAACA,IAAD,CAAvB,CAA1B,CACA,GAAMK,CAAAA,WAAW,CAAGb,WAAW,CAAC,UAAM,CAClC,GAAI,MAAOO,CAAAA,eAAe,CAACO,OAAvB,GAAmC,UAAvC,CAAmD,CAC/CP,eAAe,CAACO,OAAhB,GACH,CACDF,MAAM,GACT,CAL8B,CAK5B,CAACL,eAAD,CAAkBK,MAAlB,CAL4B,CAA/B,CAMA,GAAMG,CAAAA,QAAQ,CAAGZ,aAAa,uBAAgBE,WAAhB,QAAkC,CAAEW,cAAc,CAAE,IAAlB,CAAlC,CAA9B,CACA,GAAMC,CAAAA,yBAAyB,CAAGhB,OAAO,CACrC,iDACQc,QAAQ,EACRT,gBADA,EACoB,CAChBQ,OAAO,CAAED,WADO,CAF5B,EAKQ,CAAC,CAACE,QAAD,EAAa,CAACT,gBAAf,GAAoC,CACpCY,YAAY,CAAER,SADsB,CAEpCS,YAAY,CAAER,SAFsB,CAGpCS,OAAO,CAAEV,SAH2B,CAIpCW,MAAM,CAAEV,SAJ4B,CAL5C,GADqC,CAarC,CAACI,QAAD,CAAWL,SAAX,CAAsBC,SAAtB,CAAiCC,MAAjC,CAbqC,CAAzC,CAgBA,MAAO,CAACJ,IAAD,CAAOS,yBAAP,CAAkC,CAAEP,SAAS,CAATA,SAAF,CAAaC,SAAS,CAATA,SAAb,CAAwBC,MAAM,CAANA,MAAxB,CAAlC,CAAP,CACH,CA7BM","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\n\nimport { useMediaQuery } from '@material-ui/core';\n\nexport const useOpenerState = ({ mobileWidth = 560, useClickOnMobile, defaultHandlers } = {}) => {\n    const [open, setOpen] = useState(false);\n    const setOpened = useCallback(() => setOpen(true), []);\n    const setClosed = useCallback(() => setOpen(false), []);\n    const toggle = useCallback(() => setOpen(!open), [open]);\n    const handleClick = useCallback(() => {\n        if (typeof defaultHandlers.onClick === 'function') {\n            defaultHandlers.onClick();\n        }\n        toggle();\n    }, [defaultHandlers, toggle]);\n    const isMobile = useMediaQuery(`(max-width: ${mobileWidth}px)`, { defaultMatches: true });\n    const eventsHandlerElementProps = useMemo(\n        () => ({\n            ...(isMobile &&\n                useClickOnMobile && {\n                    onClick: handleClick\n                }),\n            ...((!isMobile || !useClickOnMobile) && {\n                onMouseEnter: setOpened,\n                onMouseLeave: setClosed,\n                onFocus: setOpened,\n                onBlur: setClosed\n            })\n        }),\n        [isMobile, setOpened, setClosed, toggle]\n    );\n\n    return [open, eventsHandlerElementProps, { setOpened, setClosed, toggle }];\n};\n"]},"metadata":{},"sourceType":"module"}