{"ast":null,"code":"import _objectSpread from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/gzamora/Documents/test/react-ultimate-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useContext,useMemo}from'react';import{ProfileCard}from'../../../commons/profile_card/profile_card';import{ExperiencesFront}from'./experiences_front/experiences_front';import{ExperiencesBack}from'./experiences_back/experiences_back';import{ExperiencesEditDialog}from'./experiences_edit_dialog/experiences_edit_dialog';import{validateWorkComplete,WorkValidator}from'./data/validator';import{mapWorkFromJsonResume,mapWorkToJsonResume}from'./data/mapping';import{DeveloperProfileContext}from'../../../../utils/context/contexts';import{SIDES}from'../../../commons/profile_card/profile_card_side/side';import{useMode}from'../../../hooks/use_mode';import{jsx as _jsx}from\"react/jsx-runtime\";var ExperiencesCardComponent=function ExperiencesCardComponent(_ref){var variant=_ref.variant,side=_ref.side;var _useMode=useMode(),_useMode2=_slicedToArray(_useMode,1),mode=_useMode2[0];var _useContext=useContext(DeveloperProfileContext),data=_useContext.data,onEdit=_useContext.onEdit,isEditing=_useContext.isEditing;var mappedData=useMemo(function(){return mapWorkFromJsonResume(data);},[data]);var onDialogEdited=useCallback(function(editedData){return onEdit(mapWorkToJsonResume(editedData));},[onEdit]);var isComplete=useMemo(function(){return validateWorkComplete(mappedData);},[mappedData]);var currentSide=useMemo(function(){if(!isComplete&&!isEditing){return SIDES.FRONT;}return side;},[side,isComplete,isEditing]);if(!isComplete&&mode!=='edit'){return null;}return/*#__PURE__*/_jsx(ProfileCard,{kind:\"experience\",isEditingProfile:isEditing,isComplete:isComplete,data:mappedData,sides:{front:function front(props){return/*#__PURE__*/_jsx(ExperiencesFront,_objectSpread({},props));},back:function back(props){return/*#__PURE__*/_jsx(ExperiencesBack,_objectSpread({},props));}},editDialog:{component:ExperiencesEditDialog,validationSchema:WorkValidator,onEdit:onDialogEdited},variant:variant,side:currentSide});};export var ExperiencesCard=ExperiencesCardComponent;","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/experiences/experiences_card.jsx"],"names":["React","useCallback","useContext","useMemo","ProfileCard","ExperiencesFront","ExperiencesBack","ExperiencesEditDialog","validateWorkComplete","WorkValidator","mapWorkFromJsonResume","mapWorkToJsonResume","DeveloperProfileContext","SIDES","useMode","ExperiencesCardComponent","variant","side","mode","data","onEdit","isEditing","mappedData","onDialogEdited","editedData","isComplete","currentSide","FRONT","front","props","back","component","validationSchema","ExperiencesCard"],"mappings":"iVAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,UAA7B,CAAyCC,OAAzC,KAAwD,OAAxD,CAEA,OAASC,WAAT,KAA4B,4CAA5B,CACA,OAASC,gBAAT,KAAiC,uCAAjC,CACA,OAASC,eAAT,KAAgC,qCAAhC,CACA,OAASC,qBAAT,KAAsC,mDAAtC,CACA,OAASC,oBAAT,CAA+BC,aAA/B,KAAoD,kBAApD,CAEA,OAASC,qBAAT,CAAgCC,mBAAhC,KAA2D,gBAA3D,CACA,OAASC,uBAAT,KAAwC,oCAAxC,CACA,OAASC,KAAT,KAAsB,sDAAtB,CACA,OAASC,OAAT,KAAwB,yBAAxB,C,2CAEA,GAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,MAAuB,IAApBC,CAAAA,OAAoB,MAApBA,OAAoB,CAAXC,IAAW,MAAXA,IAAW,cACrCH,OAAO,EAD8B,sCAC7CI,IAD6C,8BAEhBhB,UAAU,CAACU,uBAAD,CAFM,CAE5CO,IAF4C,aAE5CA,IAF4C,CAEtCC,MAFsC,aAEtCA,MAFsC,CAE9BC,SAF8B,aAE9BA,SAF8B,CAIpD,GAAMC,CAAAA,UAAU,CAAGnB,OAAO,CAAC,iBAAMO,CAAAA,qBAAqB,CAACS,IAAD,CAA3B,EAAD,CAAoC,CAACA,IAAD,CAApC,CAA1B,CAEA,GAAMI,CAAAA,cAAc,CAAGtB,WAAW,CAAC,SAACuB,UAAD,QAAgBJ,CAAAA,MAAM,CAACT,mBAAmB,CAACa,UAAD,CAApB,CAAtB,EAAD,CAA0D,CAACJ,MAAD,CAA1D,CAAlC,CAEA,GAAMK,CAAAA,UAAU,CAAGtB,OAAO,CAAC,iBAAMK,CAAAA,oBAAoB,CAACc,UAAD,CAA1B,EAAD,CAAyC,CAACA,UAAD,CAAzC,CAA1B,CAEA,GAAMI,CAAAA,WAAW,CAAGvB,OAAO,CAAC,UAAM,CAC9B,GAAI,CAACsB,UAAD,EAAe,CAACJ,SAApB,CAA+B,CAC3B,MAAOR,CAAAA,KAAK,CAACc,KAAb,CACH,CACD,MAAOV,CAAAA,IAAP,CACH,CAL0B,CAKxB,CAACA,IAAD,CAAOQ,UAAP,CAAmBJ,SAAnB,CALwB,CAA3B,CAOA,GAAI,CAACI,UAAD,EAAeP,IAAI,GAAK,MAA5B,CAAoC,CAChC,MAAO,KAAP,CACH,CACD,mBACI,KAAC,WAAD,EACI,IAAI,CAAC,YADT,CAEI,gBAAgB,CAAEG,SAFtB,CAGI,UAAU,CAAEI,UAHhB,CAII,IAAI,CAAEH,UAJV,CAKI,KAAK,CAAE,CACHM,KAAK,CAAE,eAACC,KAAD,qBAAW,KAAC,gBAAD,kBAAsBA,KAAtB,EAAX,EADJ,CAEHC,IAAI,CAAE,cAACD,KAAD,qBAAW,KAAC,eAAD,kBAAqBA,KAArB,EAAX,EAFH,CALX,CASI,UAAU,CAAE,CACRE,SAAS,CAAExB,qBADH,CAERyB,gBAAgB,CAAEvB,aAFV,CAGRW,MAAM,CAAEG,cAHA,CAThB,CAcI,OAAO,CAAEP,OAdb,CAeI,IAAI,CAAEU,WAfV,EADJ,CAmBH,CAvCD,CAyCA,MAAO,IAAMO,CAAAA,eAAe,CAAGlB,wBAAxB","sourcesContent":["import React, { useCallback, useContext, useMemo } from 'react';\n\nimport { ProfileCard } from '../../../commons/profile_card/profile_card';\nimport { ExperiencesFront } from './experiences_front/experiences_front';\nimport { ExperiencesBack } from './experiences_back/experiences_back';\nimport { ExperiencesEditDialog } from './experiences_edit_dialog/experiences_edit_dialog';\nimport { validateWorkComplete, WorkValidator } from './data/validator';\n\nimport { mapWorkFromJsonResume, mapWorkToJsonResume } from './data/mapping';\nimport { DeveloperProfileContext } from '../../../../utils/context/contexts';\nimport { SIDES } from '../../../commons/profile_card/profile_card_side/side';\nimport { useMode } from '../../../hooks/use_mode';\n\nconst ExperiencesCardComponent = ({ variant, side }) => {\n    const [mode] = useMode();\n    const { data, onEdit, isEditing } = useContext(DeveloperProfileContext);\n\n    const mappedData = useMemo(() => mapWorkFromJsonResume(data), [data]);\n\n    const onDialogEdited = useCallback((editedData) => onEdit(mapWorkToJsonResume(editedData)), [onEdit]);\n\n    const isComplete = useMemo(() => validateWorkComplete(mappedData), [mappedData]);\n\n    const currentSide = useMemo(() => {\n        if (!isComplete && !isEditing) {\n            return SIDES.FRONT;\n        }\n        return side;\n    }, [side, isComplete, isEditing]);\n\n    if (!isComplete && mode !== 'edit') {\n        return null;\n    }\n    return (\n        <ProfileCard\n            kind=\"experience\"\n            isEditingProfile={isEditing}\n            isComplete={isComplete}\n            data={mappedData}\n            sides={{\n                front: (props) => <ExperiencesFront {...props} />,\n                back: (props) => <ExperiencesBack {...props} />\n            }}\n            editDialog={{\n                component: ExperiencesEditDialog,\n                validationSchema: WorkValidator,\n                onEdit: onDialogEdited\n            }}\n            variant={variant}\n            side={currentSide}\n        />\n    );\n};\n\nexport const ExperiencesCard = ExperiencesCardComponent;\n"]},"metadata":{},"sourceType":"module"}