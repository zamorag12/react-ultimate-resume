{"ast":null,"code":"import { filterProps, createError } from '../utils';\nvar DISPLAY_NAMES_OPTONS = ['localeMatcher', 'style', 'type', 'fallback'];\nexport function formatDisplayName(_ref, getDisplayNames, value) {\n  var locale = _ref.locale,\n      onError = _ref.onError;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var DisplayNames = Intl.DisplayNames;\n\n  if (!DisplayNames) {\n    onError(createError(\"Intl.DisplayNames is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-displaynames\\\"\\n\"));\n  }\n\n  var filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);\n\n  try {\n    return getDisplayNames(locale, filteredOptions).of(value);\n  } catch (e) {\n    onError(createError('Error formatting display name.', e));\n  }\n}","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/node_modules/react-intl/lib/formatters/displayName.js"],"names":["filterProps","createError","DISPLAY_NAMES_OPTONS","formatDisplayName","getDisplayNames","value","locale","onError","options","DisplayNames","Intl","filteredOptions","of","e"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,UAAzC;AACA,IAAMC,oBAAoB,GAAG,CACzB,eADyB,EAEzB,OAFyB,EAGzB,MAHyB,EAIzB,UAJyB,CAA7B;AAMA,OAAO,SAASC,iBAAT,OAAgDC,eAAhD,EAAiEC,KAAjE,EAAsF;AAAA,MAAzDC,MAAyD,QAAzDA,MAAyD;AAAA,MAAjDC,OAAiD,QAAjDA,OAAiD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACzF,MAAMC,YAAY,GAAGC,IAAI,CAACD,YAA1B;;AACA,MAAI,CAACA,YAAL,EAAmB;AACfF,IAAAA,OAAO,CAACN,WAAW,uHAAZ,CAAP;AAGH;;AACD,MAAMU,eAAe,GAAGX,WAAW,CAACQ,OAAD,EAAUN,oBAAV,CAAnC;;AACA,MAAI;AACA,WAAOE,eAAe,CAACE,MAAD,EAASK,eAAT,CAAf,CAAyCC,EAAzC,CAA4CP,KAA5C,CAAP;AACH,GAFD,CAGA,OAAOQ,CAAP,EAAU;AACNN,IAAAA,OAAO,CAACN,WAAW,CAAC,gCAAD,EAAmCY,CAAnC,CAAZ,CAAP;AACH;AACJ","sourcesContent":["import { filterProps, createError } from '../utils';\nconst DISPLAY_NAMES_OPTONS = [\n    'localeMatcher',\n    'style',\n    'type',\n    'fallback',\n];\nexport function formatDisplayName({ locale, onError }, getDisplayNames, value, options = {}) {\n    const DisplayNames = Intl.DisplayNames;\n    if (!DisplayNames) {\n        onError(createError(`Intl.DisplayNames is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-displaynames\"\n`));\n    }\n    const filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);\n    try {\n        return getDisplayNames(locale, filteredOptions).of(value);\n    }\n    catch (e) {\n        onError(createError('Error formatting display name.', e));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}