{"ast":null,"code":"import React,{useMemo}from'react';import{FormattedMessage}from'react-intl';import{jsx as _jsx}from\"react/jsx-runtime\";export var OtherExperienceYears=function OtherExperienceYears(_ref){var codeExperienceYears=_ref.codeExperienceYears,otherExperienceYears=_ref.otherExperienceYears;var otherExperienceValue=useMemo(function(){var numberValue=Number(otherExperienceYears);if(Number.isNaN(numberValue)){return 0;}return numberValue;},[otherExperienceYears]);if(!otherExperienceValue||Number.isNaN(Number(codeExperienceYears))){return null;}return/*#__PURE__*/_jsx(FormattedMessage,{id:\"Basics.Back.OtherExperienceYear.value\",defaultMessage:' and {otherExperienceValue, plural, one {# year} other {# years} } of other work experiences',values:{otherExperienceValue:otherExperienceValue}});};","map":{"version":3,"sources":["/home/gzamora/Documents/test/react-ultimate-resume/src/package/components/cards/cards_types/basics/basics_back/fields/other_professional_experience.jsx"],"names":["React","useMemo","FormattedMessage","OtherExperienceYears","codeExperienceYears","otherExperienceYears","otherExperienceValue","numberValue","Number","isNaN"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,OAAhB,KAA+B,OAA/B,CACA,OAASC,gBAAT,KAAiC,YAAjC,C,2CAEA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,MAAmD,IAAhDC,CAAAA,mBAAgD,MAAhDA,mBAAgD,CAA3BC,oBAA2B,MAA3BA,oBAA2B,CACnF,GAAMC,CAAAA,oBAAoB,CAAGL,OAAO,CAAC,UAAM,CACvC,GAAMM,CAAAA,WAAW,CAAGC,MAAM,CAACH,oBAAD,CAA1B,CACA,GAAIG,MAAM,CAACC,KAAP,CAAaF,WAAb,CAAJ,CAA+B,CAC3B,MAAO,EAAP,CACH,CACD,MAAOA,CAAAA,WAAP,CACH,CANmC,CAMjC,CAACF,oBAAD,CANiC,CAApC,CAOA,GAAI,CAACC,oBAAD,EAAyBE,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACJ,mBAAD,CAAnB,CAA7B,CAAwE,CACpE,MAAO,KAAP,CACH,CACD,mBACI,KAAC,gBAAD,EACI,EAAE,CAAC,uCADP,CAEI,cAAc,CACV,8FAHR,CAKI,MAAM,CAAE,CAAEE,oBAAoB,CAApBA,oBAAF,CALZ,EADJ,CASH,CApBM","sourcesContent":["import React, { useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport const OtherExperienceYears = ({ codeExperienceYears, otherExperienceYears }) => {\n    const otherExperienceValue = useMemo(() => {\n        const numberValue = Number(otherExperienceYears);\n        if (Number.isNaN(numberValue)) {\n            return 0;\n        }\n        return numberValue;\n    }, [otherExperienceYears]);\n    if (!otherExperienceValue || Number.isNaN(Number(codeExperienceYears))) {\n        return null;\n    }\n    return (\n        <FormattedMessage\n            id=\"Basics.Back.OtherExperienceYear.value\"\n            defaultMessage={\n                ' and {otherExperienceValue, plural, one {# year} other {# years} } of other work experiences'\n            }\n            values={{ otherExperienceValue }}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}