"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoComplete = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var react_autosuggest_1 = __importDefault(require("react-autosuggest"));
var styles_1 = require("@material-ui/core/styles");
var text_field_1 = require("../text_field/text_field");
var popper_card_1 = require("../popper_card/popper_card");
var typography_1 = require("../typography/typography");
var list_item_1 = require("../list_item/list_item");
var autocomplete_styles_1 = require("./autocomplete_styles");
var ClickAwayListener_1 = __importDefault(require("@material-ui/core/ClickAwayListener"));
var merge_1 = __importDefault(require("lodash/merge"));
var defaultGetSuggestionValue = function (_a) {
    var value = _a.value;
    return value;
};
var defaultFilterSuggestion = function (inputValue) { return function (_a) {
    var value = _a.value;
    return inputValue && value && value.toLowerCase().includes(inputValue.toLowerCase());
}; };
var useStyles = styles_1.makeStyles(autocomplete_styles_1.styles);
var DEFAULT_FUNCTION = function () { };
function AutoComplete(_a) {
    var placeholder = _a.placeholder, suggestions = _a.suggestions, _b = _a.onChange, onChange = _b === void 0 ? DEFAULT_FUNCTION : _b, _c = _a.onSelect, onSelect = _c === void 0 ? DEFAULT_FUNCTION : _c, _d = _a.getSuggestionValue, getSuggestionValue = _d === void 0 ? defaultGetSuggestionValue : _d, renderSuggestionProps = _a.renderSuggestion, _e = _a.filterFunction, filterFunction = _e === void 0 ? defaultFilterSuggestion : _e, renderNoSuggestion = _a.renderNoSuggestion, _f = _a.maxLength, maxLength = _f === void 0 ? 10 : _f, _g = _a.value, propsValue = _g === void 0 ? '' : _g, id = _a.id, name = _a.name, _h = _a.transformSuggestionValue, transformSuggestionValue = _h === void 0 ? function (props) { return props && props.value; } : _h, _j = _a.customClasses, oldCustomClasses = _j === void 0 ? {} : _j, _k = _a.classes, receivedClasses = _k === void 0 ? {} : _k, popperPlacement = _a.popperPlacement, other = __rest(_a, ["placeholder", "suggestions", "onChange", "onSelect", "getSuggestionValue", "renderSuggestion", "filterFunction", "renderNoSuggestion", "maxLength", "value", "id", "name", "transformSuggestionValue", "customClasses", "classes", "popperPlacement"]);
    var mergedClasses = react_1.useMemo(function () { return merge_1.default({}, oldCustomClasses, receivedClasses); }, [
        JSON.stringify(oldCustomClasses),
        JSON.stringify(receivedClasses),
    ]);
    var classes = useStyles({ classes: mergedClasses });
    var inputReference = react_1.useRef();
    var _l = react_1.useState([]), filteredSuggestions = _l[0], setFilteredSuggetions = _l[1];
    var _m = react_1.useState(propsValue || ''), value = _m[0], setValue = _m[1];
    var _o = react_1.useState(false), focused = _o[0], setFocused = _o[1];
    react_1.useEffect(function () {
        setValue(propsValue);
    }, [propsValue]);
    react_1.useEffect(function () {
        var filter = suggestions.filter(filterFunction(value));
        setFilteredSuggetions(filter.slice(0, maxLength));
    }, [suggestions]);
    var renderSuggestion = renderSuggestionProps ||
        (function (props) { return (react_1.default.createElement(DefaultSuggestionsRender, __assign({}, {
            classes: classes,
            value: transformSuggestionValue(props),
        }))); });
    var filterSuggestions = react_1.useCallback(function (_a) {
        var inputValue = _a.value;
        var filter = suggestions.filter(filterFunction(inputValue));
        setFilteredSuggetions(filter.slice(0, maxLength));
    }, [suggestions]);
    var clearSuggestions = react_1.useCallback(function () {
        setFilteredSuggetions([]);
    }, []);
    var valueChanged = react_1.useCallback(function (e, _a) {
        var newValue = _a.newValue;
        setValue(newValue || '');
        onChange(newValue);
    }, [onChange]);
    var suggestionSelected = react_1.useCallback(function (_, newValue) {
        var suggestionValue = newValue.suggestionValue;
        setValue(suggestionValue);
        onChange && onChange(suggestionValue);
        onSelect && onSelect(newValue);
    }, [onChange, onSelect]);
    var setIsFocused = react_1.useCallback(function () { return setFocused(true); }, []);
    var setIsNotFocused = react_1.useCallback(function () { return setFocused(false); }, []);
    var inputProps = {
        id: id,
        name: name,
        placeholder: placeholder,
        value: value,
        onChange: valueChanged,
        onFocus: setIsFocused,
    };
    return (react_1.default.createElement(ClickAwayListener_1.default, { onClickAway: setIsNotFocused },
        react_1.default.createElement(react_autosuggest_1.default, __assign({ suggestions: filteredSuggestions, focusInputOnSuggestionClick: false, getSuggestionValue: getSuggestionValue, onSuggestionsClearRequested: clearSuggestions, onSuggestionsFetchRequested: filterSuggestions, renderSuggestion: renderSuggestion, renderSuggestionsContainer: function (props) {
                var containerProps = props.containerProps, children = props.children;
                if (value && !filteredSuggestions.length && typeof renderNoSuggestion === 'function') {
                    return renderNoSuggestion({ anchorElement: inputReference.current, open: focused });
                }
                return (react_1.default.createElement(SuggestionsContainer, __assign({}, {
                    popperPlacement: popperPlacement,
                    containerProps: containerProps,
                    children: children,
                }, { className: classnames_1.default(classes.popperCard), popperCustomClasses: { popper: classes.popper }, anchorElement: inputReference.current })));
            }, onSuggestionSelected: suggestionSelected, renderInputComponent: function (_a) {
                var onChange = _a.onChange, props = __rest(_a, ["onChange"]);
                return (react_1.default.createElement(text_field_1.TextField, __assign({}, props, other, { inputRef: inputReference, className: classes.field, onChange: onChange })));
            } }, { inputProps: inputProps }))));
}
exports.AutoComplete = AutoComplete;
var SuggestionsContainer = function (_a) {
    var containerProps = _a.containerProps, popperPlacement = _a.popperPlacement, anchorElement = _a.anchorElement, children = _a.children, _b = _a.popperCustomClasses, popperCustomClasses = _b === void 0 ? {} : _b, className = _a.className;
    var lastChildrenRendered = react_1.useRef(children);
    react_1.useEffect(function () {
        if (children) {
            lastChildrenRendered.current = children;
        }
    }, [children]);
    return (react_1.default.createElement(popper_card_1.PopperCard, __assign({ className: className, open: Boolean(children), popperProps: __assign(__assign({}, (popperPlacement && { placement: popperPlacement })), { modifiers: {
                preventOverflow: {
                    boundariesElement: 'viewport',
                },
            } }), classes: popperCustomClasses }, { anchorElement: anchorElement, containerProps: containerProps }), children || lastChildrenRendered.current));
};
var DefaultSuggestionsRender = function (_a) {
    var value = _a.value, classes = _a.classes;
    return (react_1.default.createElement(list_item_1.ListItem, { className: classes.listItem, key: "prediction_" + value, button: true },
        react_1.default.createElement(typography_1.Typography, { color: "dark", classes: { container: classes.predictionListItem } }, value)));
};
