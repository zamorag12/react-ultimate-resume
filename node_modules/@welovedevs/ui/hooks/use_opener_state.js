"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useOpenerState = void 0;
var react_1 = require("react");
var core_1 = require("@material-ui/core");
var useOpenerState = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.mobileWidth, mobileWidth = _c === void 0 ? 560 : _c, useClickOnMobile = _b.useClickOnMobile, defaultHandlers = _b.defaultHandlers;
    var _d = react_1.useState(false), open = _d[0], setOpen = _d[1];
    var setOpened = react_1.useCallback(function () { return setOpen(true); }, []);
    var setClosed = react_1.useCallback(function () { return setOpen(false); }, []);
    var toggle = react_1.useCallback(function () { return setOpen(!open); }, [open]);
    var handleClick = react_1.useCallback(function () {
        if (typeof (defaultHandlers === null || defaultHandlers === void 0 ? void 0 : defaultHandlers.onClick) === 'function') {
            defaultHandlers === null || defaultHandlers === void 0 ? void 0 : defaultHandlers.onClick();
        }
        toggle();
    }, [defaultHandlers, toggle]);
    var isMobile = core_1.useMediaQuery("(max-width: " + mobileWidth + "px)", { defaultMatches: true });
    var eventsHandlerElementProps = react_1.useMemo(function () { return (__assign(__assign({}, (isMobile &&
        useClickOnMobile && {
        onClick: handleClick,
    })), ((!isMobile || !useClickOnMobile) && {
        onMouseEnter: setOpened,
        onMouseLeave: setClosed,
        onFocus: setOpened,
        onBlur: setClosed,
    }))); }, [isMobile, setOpened, setClosed, toggle]);
    return [open, eventsHandlerElementProps, { setOpened: setOpened, setClosed: setClosed, toggle: toggle }];
};
exports.useOpenerState = useOpenerState;
